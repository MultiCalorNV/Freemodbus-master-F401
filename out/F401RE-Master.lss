
out/F401RE-Master.elf:     file format elf32-littlearm


Disassembly of section .text:

08000198 <memcpy>:
 8000198:	4684      	mov	ip, r0
 800019a:	ea41 0300 	orr.w	r3, r1, r0
 800019e:	f013 0303 	ands.w	r3, r3, #3
 80001a2:	d16d      	bne.n	8000280 <memcpy+0xe8>
 80001a4:	3a40      	subs	r2, #64	; 0x40
 80001a6:	d341      	bcc.n	800022c <memcpy+0x94>
 80001a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ac:	f840 3b04 	str.w	r3, [r0], #4
 80001b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001b4:	f840 3b04 	str.w	r3, [r0], #4
 80001b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001bc:	f840 3b04 	str.w	r3, [r0], #4
 80001c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001c4:	f840 3b04 	str.w	r3, [r0], #4
 80001c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001cc:	f840 3b04 	str.w	r3, [r0], #4
 80001d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001d4:	f840 3b04 	str.w	r3, [r0], #4
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	3a40      	subs	r2, #64	; 0x40
 800022a:	d2bd      	bcs.n	80001a8 <memcpy+0x10>
 800022c:	3230      	adds	r2, #48	; 0x30
 800022e:	d311      	bcc.n	8000254 <memcpy+0xbc>
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	3a10      	subs	r2, #16
 8000252:	d2ed      	bcs.n	8000230 <memcpy+0x98>
 8000254:	320c      	adds	r2, #12
 8000256:	d305      	bcc.n	8000264 <memcpy+0xcc>
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	3a04      	subs	r2, #4
 8000262:	d2f9      	bcs.n	8000258 <memcpy+0xc0>
 8000264:	3204      	adds	r2, #4
 8000266:	d008      	beq.n	800027a <memcpy+0xe2>
 8000268:	07d2      	lsls	r2, r2, #31
 800026a:	bf1c      	itt	ne
 800026c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000270:	f800 3b01 	strbne.w	r3, [r0], #1
 8000274:	d301      	bcc.n	800027a <memcpy+0xe2>
 8000276:	880b      	ldrh	r3, [r1, #0]
 8000278:	8003      	strh	r3, [r0, #0]
 800027a:	4660      	mov	r0, ip
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	2a08      	cmp	r2, #8
 8000282:	d313      	bcc.n	80002ac <memcpy+0x114>
 8000284:	078b      	lsls	r3, r1, #30
 8000286:	d08d      	beq.n	80001a4 <memcpy+0xc>
 8000288:	f010 0303 	ands.w	r3, r0, #3
 800028c:	d08a      	beq.n	80001a4 <memcpy+0xc>
 800028e:	f1c3 0304 	rsb	r3, r3, #4
 8000292:	1ad2      	subs	r2, r2, r3
 8000294:	07db      	lsls	r3, r3, #31
 8000296:	bf1c      	itt	ne
 8000298:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800029c:	f800 3b01 	strbne.w	r3, [r0], #1
 80002a0:	d380      	bcc.n	80001a4 <memcpy+0xc>
 80002a2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002a6:	f820 3b02 	strh.w	r3, [r0], #2
 80002aa:	e77b      	b.n	80001a4 <memcpy+0xc>
 80002ac:	3a04      	subs	r2, #4
 80002ae:	d3d9      	bcc.n	8000264 <memcpy+0xcc>
 80002b0:	3a01      	subs	r2, #1
 80002b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b6:	f800 3b01 	strb.w	r3, [r0], #1
 80002ba:	d2f9      	bcs.n	80002b0 <memcpy+0x118>
 80002bc:	780b      	ldrb	r3, [r1, #0]
 80002be:	7003      	strb	r3, [r0, #0]
 80002c0:	784b      	ldrb	r3, [r1, #1]
 80002c2:	7043      	strb	r3, [r0, #1]
 80002c4:	788b      	ldrb	r3, [r1, #2]
 80002c6:	7083      	strb	r3, [r0, #2]
 80002c8:	4660      	mov	r0, ip
 80002ca:	4770      	bx	lr

080002cc <__aeabi_drsub>:
 80002cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	e002      	b.n	80002d8 <__adddf3>
 80002d2:	bf00      	nop

080002d4 <__aeabi_dsub>:
 80002d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d8 <__adddf3>:
 80002d8:	b530      	push	{r4, r5, lr}
 80002da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e2:	ea94 0f05 	teq	r4, r5
 80002e6:	bf08      	it	eq
 80002e8:	ea90 0f02 	teqeq	r0, r2
 80002ec:	bf1f      	itttt	ne
 80002ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fe:	f000 80e2 	beq.w	80004c6 <__adddf3+0x1ee>
 8000302:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000306:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030a:	bfb8      	it	lt
 800030c:	426d      	neglt	r5, r5
 800030e:	dd0c      	ble.n	800032a <__adddf3+0x52>
 8000310:	442c      	add	r4, r5
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	ea82 0000 	eor.w	r0, r2, r0
 800031e:	ea83 0101 	eor.w	r1, r3, r1
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	2d36      	cmp	r5, #54	; 0x36
 800032c:	bf88      	it	hi
 800032e:	bd30      	pophi	{r4, r5, pc}
 8000330:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000334:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000338:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800033c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x70>
 8000342:	4240      	negs	r0, r0
 8000344:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000348:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800034c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000350:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x84>
 8000356:	4252      	negs	r2, r2
 8000358:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035c:	ea94 0f05 	teq	r4, r5
 8000360:	f000 80a7 	beq.w	80004b2 <__adddf3+0x1da>
 8000364:	f1a4 0401 	sub.w	r4, r4, #1
 8000368:	f1d5 0e20 	rsbs	lr, r5, #32
 800036c:	db0d      	blt.n	800038a <__adddf3+0xb2>
 800036e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000372:	fa22 f205 	lsr.w	r2, r2, r5
 8000376:	1880      	adds	r0, r0, r2
 8000378:	f141 0100 	adc.w	r1, r1, #0
 800037c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000380:	1880      	adds	r0, r0, r2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	4159      	adcs	r1, r3
 8000388:	e00e      	b.n	80003a8 <__adddf3+0xd0>
 800038a:	f1a5 0520 	sub.w	r5, r5, #32
 800038e:	f10e 0e20 	add.w	lr, lr, #32
 8000392:	2a01      	cmp	r2, #1
 8000394:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000398:	bf28      	it	cs
 800039a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	18c0      	adds	r0, r0, r3
 80003a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	d507      	bpl.n	80003be <__adddf3+0xe6>
 80003ae:	f04f 0e00 	mov.w	lr, #0
 80003b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80003be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c2:	d31b      	bcc.n	80003fc <__adddf3+0x124>
 80003c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c8:	d30c      	bcc.n	80003e4 <__adddf3+0x10c>
 80003ca:	0849      	lsrs	r1, r1, #1
 80003cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d4:	f104 0401 	add.w	r4, r4, #1
 80003d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e0:	f080 809a 	bcs.w	8000518 <__adddf3+0x240>
 80003e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e8:	bf08      	it	eq
 80003ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ee:	f150 0000 	adcs.w	r0, r0, #0
 80003f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f6:	ea41 0105 	orr.w	r1, r1, r5
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000400:	4140      	adcs	r0, r0
 8000402:	eb41 0101 	adc.w	r1, r1, r1
 8000406:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040a:	f1a4 0401 	sub.w	r4, r4, #1
 800040e:	d1e9      	bne.n	80003e4 <__adddf3+0x10c>
 8000410:	f091 0f00 	teq	r1, #0
 8000414:	bf04      	itt	eq
 8000416:	4601      	moveq	r1, r0
 8000418:	2000      	moveq	r0, #0
 800041a:	fab1 f381 	clz	r3, r1
 800041e:	bf08      	it	eq
 8000420:	3320      	addeq	r3, #32
 8000422:	f1a3 030b 	sub.w	r3, r3, #11
 8000426:	f1b3 0220 	subs.w	r2, r3, #32
 800042a:	da0c      	bge.n	8000446 <__adddf3+0x16e>
 800042c:	320c      	adds	r2, #12
 800042e:	dd08      	ble.n	8000442 <__adddf3+0x16a>
 8000430:	f102 0c14 	add.w	ip, r2, #20
 8000434:	f1c2 020c 	rsb	r2, r2, #12
 8000438:	fa01 f00c 	lsl.w	r0, r1, ip
 800043c:	fa21 f102 	lsr.w	r1, r1, r2
 8000440:	e00c      	b.n	800045c <__adddf3+0x184>
 8000442:	f102 0214 	add.w	r2, r2, #20
 8000446:	bfd8      	it	le
 8000448:	f1c2 0c20 	rsble	ip, r2, #32
 800044c:	fa01 f102 	lsl.w	r1, r1, r2
 8000450:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000454:	bfdc      	itt	le
 8000456:	ea41 010c 	orrle.w	r1, r1, ip
 800045a:	4090      	lslle	r0, r2
 800045c:	1ae4      	subs	r4, r4, r3
 800045e:	bfa2      	ittt	ge
 8000460:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000464:	4329      	orrge	r1, r5
 8000466:	bd30      	popge	{r4, r5, pc}
 8000468:	ea6f 0404 	mvn.w	r4, r4
 800046c:	3c1f      	subs	r4, #31
 800046e:	da1c      	bge.n	80004aa <__adddf3+0x1d2>
 8000470:	340c      	adds	r4, #12
 8000472:	dc0e      	bgt.n	8000492 <__adddf3+0x1ba>
 8000474:	f104 0414 	add.w	r4, r4, #20
 8000478:	f1c4 0220 	rsb	r2, r4, #32
 800047c:	fa20 f004 	lsr.w	r0, r0, r4
 8000480:	fa01 f302 	lsl.w	r3, r1, r2
 8000484:	ea40 0003 	orr.w	r0, r0, r3
 8000488:	fa21 f304 	lsr.w	r3, r1, r4
 800048c:	ea45 0103 	orr.w	r1, r5, r3
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	f1c4 040c 	rsb	r4, r4, #12
 8000496:	f1c4 0220 	rsb	r2, r4, #32
 800049a:	fa20 f002 	lsr.w	r0, r0, r2
 800049e:	fa01 f304 	lsl.w	r3, r1, r4
 80004a2:	ea40 0003 	orr.w	r0, r0, r3
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	fa21 f004 	lsr.w	r0, r1, r4
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	f094 0f00 	teq	r4, #0
 80004b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ba:	bf06      	itte	eq
 80004bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c0:	3401      	addeq	r4, #1
 80004c2:	3d01      	subne	r5, #1
 80004c4:	e74e      	b.n	8000364 <__adddf3+0x8c>
 80004c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ca:	bf18      	it	ne
 80004cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d0:	d029      	beq.n	8000526 <__adddf3+0x24e>
 80004d2:	ea94 0f05 	teq	r4, r5
 80004d6:	bf08      	it	eq
 80004d8:	ea90 0f02 	teqeq	r0, r2
 80004dc:	d005      	beq.n	80004ea <__adddf3+0x212>
 80004de:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e2:	bf04      	itt	eq
 80004e4:	4619      	moveq	r1, r3
 80004e6:	4610      	moveq	r0, r2
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea91 0f03 	teq	r1, r3
 80004ee:	bf1e      	ittt	ne
 80004f0:	2100      	movne	r1, #0
 80004f2:	2000      	movne	r0, #0
 80004f4:	bd30      	popne	{r4, r5, pc}
 80004f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fa:	d105      	bne.n	8000508 <__adddf3+0x230>
 80004fc:	0040      	lsls	r0, r0, #1
 80004fe:	4149      	adcs	r1, r1
 8000500:	bf28      	it	cs
 8000502:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000506:	bd30      	pop	{r4, r5, pc}
 8000508:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800050c:	bf3c      	itt	cc
 800050e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000512:	bd30      	popcc	{r4, r5, pc}
 8000514:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000518:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800051c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000520:	f04f 0000 	mov.w	r0, #0
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052a:	bf1a      	itte	ne
 800052c:	4619      	movne	r1, r3
 800052e:	4610      	movne	r0, r2
 8000530:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000534:	bf1c      	itt	ne
 8000536:	460b      	movne	r3, r1
 8000538:	4602      	movne	r2, r0
 800053a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053e:	bf06      	itte	eq
 8000540:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000544:	ea91 0f03 	teqeq	r1, r3
 8000548:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	bf00      	nop

08000550 <__aeabi_ui2d>:
 8000550:	f090 0f00 	teq	r0, #0
 8000554:	bf04      	itt	eq
 8000556:	2100      	moveq	r1, #0
 8000558:	4770      	bxeq	lr
 800055a:	b530      	push	{r4, r5, lr}
 800055c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000560:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000564:	f04f 0500 	mov.w	r5, #0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e750      	b.n	8000410 <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_i2d>:
 8000570:	f090 0f00 	teq	r0, #0
 8000574:	bf04      	itt	eq
 8000576:	2100      	moveq	r1, #0
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000580:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000584:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000588:	bf48      	it	mi
 800058a:	4240      	negmi	r0, r0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e73e      	b.n	8000410 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_f2d>:
 8000594:	0042      	lsls	r2, r0, #1
 8000596:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059a:	ea4f 0131 	mov.w	r1, r1, rrx
 800059e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a2:	bf1f      	itttt	ne
 80005a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b0:	4770      	bxne	lr
 80005b2:	f092 0f00 	teq	r2, #0
 80005b6:	bf14      	ite	ne
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e720      	b.n	8000410 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aedc 	beq.w	80003be <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6c1      	b.n	80003be <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__gedf2>:
 8000a60:	f04f 3cff 	mov.w	ip, #4294967295
 8000a64:	e006      	b.n	8000a74 <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__ledf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	e002      	b.n	8000a74 <__cmpdf2+0x4>
 8000a6e:	bf00      	nop

08000a70 <__cmpdf2>:
 8000a70:	f04f 0c01 	mov.w	ip, #1
 8000a74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8a:	d01b      	beq.n	8000ac4 <__cmpdf2+0x54>
 8000a8c:	b001      	add	sp, #4
 8000a8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a92:	bf0c      	ite	eq
 8000a94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a98:	ea91 0f03 	teqne	r1, r3
 8000a9c:	bf02      	ittt	eq
 8000a9e:	ea90 0f02 	teqeq	r0, r2
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	4770      	bxeq	lr
 8000aa6:	f110 0f00 	cmn.w	r0, #0
 8000aaa:	ea91 0f03 	teq	r1, r3
 8000aae:	bf58      	it	pl
 8000ab0:	4299      	cmppl	r1, r3
 8000ab2:	bf08      	it	eq
 8000ab4:	4290      	cmpeq	r0, r2
 8000ab6:	bf2c      	ite	cs
 8000ab8:	17d8      	asrcs	r0, r3, #31
 8000aba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000abe:	f040 0001 	orr.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__cmpdf2+0x64>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d107      	bne.n	8000ae4 <__cmpdf2+0x74>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d1d6      	bne.n	8000a8c <__cmpdf2+0x1c>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d0d3      	beq.n	8000a8c <__cmpdf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cdrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4610      	mov	r0, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	468c      	mov	ip, r1
 8000af4:	4619      	mov	r1, r3
 8000af6:	4663      	mov	r3, ip
 8000af8:	e000      	b.n	8000afc <__aeabi_cdcmpeq>
 8000afa:	bf00      	nop

08000afc <__aeabi_cdcmpeq>:
 8000afc:	b501      	push	{r0, lr}
 8000afe:	f7ff ffb7 	bl	8000a70 <__cmpdf2>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	bf48      	it	mi
 8000b06:	f110 0f00 	cmnmi.w	r0, #0
 8000b0a:	bd01      	pop	{r0, pc}

08000b0c <__aeabi_dcmpeq>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff fff4 	bl	8000afc <__aeabi_cdcmpeq>
 8000b14:	bf0c      	ite	eq
 8000b16:	2001      	moveq	r0, #1
 8000b18:	2000      	movne	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmplt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffea 	bl	8000afc <__aeabi_cdcmpeq>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmple>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffe0 	bl	8000afc <__aeabi_cdcmpeq>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpge>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffce 	bl	8000aec <__aeabi_cdrcmple>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpgt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffc4 	bl	8000aec <__aeabi_cdrcmple>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b94b      	cbnz	r3, 8000bd6 <__aeabi_uldivmod+0x16>
 8000bc2:	b942      	cbnz	r2, 8000bd6 <__aeabi_uldivmod+0x16>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	d002      	beq.n	8000bd2 <__aeabi_uldivmod+0x12>
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	f000 b83b 	b.w	8000c4c <__aeabi_idiv0>
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	46ec      	mov	ip, sp
 8000bda:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000bde:	f000 f81d 	bl	8000c1c <__gnu_uldivmod_helper>
 8000be2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be6:	b002      	add	sp, #8
 8000be8:	bc0c      	pop	{r2, r3}
 8000bea:	4770      	bx	lr

08000bec <__gnu_ldivmod_helper>:
 8000bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf0:	9c06      	ldr	r4, [sp, #24]
 8000bf2:	4615      	mov	r5, r2
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	f000 f829 	bl	8000c50 <__divdi3>
 8000bfe:	fb05 f301 	mul.w	r3, r5, r1
 8000c02:	fb00 3808 	mla	r8, r0, r8, r3
 8000c06:	fba5 2300 	umull	r2, r3, r5, r0
 8000c0a:	1ab2      	subs	r2, r6, r2
 8000c0c:	4443      	add	r3, r8
 8000c0e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c12:	e9c4 2300 	strd	r2, r3, [r4]
 8000c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c1a:	bf00      	nop

08000c1c <__gnu_uldivmod_helper>:
 8000c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c20:	9c06      	ldr	r4, [sp, #24]
 8000c22:	4690      	mov	r8, r2
 8000c24:	4606      	mov	r6, r0
 8000c26:	460f      	mov	r7, r1
 8000c28:	461d      	mov	r5, r3
 8000c2a:	f000 f95f 	bl	8000eec <__udivdi3>
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	fba0 2308 	umull	r2, r3, r0, r8
 8000c36:	fb08 5501 	mla	r5, r8, r1, r5
 8000c3a:	1ab2      	subs	r2, r6, r2
 8000c3c:	442b      	add	r3, r5
 8000c3e:	eb67 0303 	sbc.w	r3, r7, r3
 8000c42:	e9c4 2300 	strd	r2, r3, [r4]
 8000c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__divdi3>:
 8000c50:	2900      	cmp	r1, #0
 8000c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c56:	f2c0 80a6 	blt.w	8000da6 <__divdi3+0x156>
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f2c0 809c 	blt.w	8000d9a <__divdi3+0x14a>
 8000c62:	4688      	mov	r8, r1
 8000c64:	4694      	mov	ip, r2
 8000c66:	469e      	mov	lr, r3
 8000c68:	4615      	mov	r5, r2
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d13d      	bne.n	8000cee <__divdi3+0x9e>
 8000c72:	428a      	cmp	r2, r1
 8000c74:	d959      	bls.n	8000d2a <__divdi3+0xda>
 8000c76:	fab2 f382 	clz	r3, r2
 8000c7a:	b13b      	cbz	r3, 8000c8c <__divdi3+0x3c>
 8000c7c:	f1c3 0220 	rsb	r2, r3, #32
 8000c80:	409f      	lsls	r7, r3
 8000c82:	fa20 f202 	lsr.w	r2, r0, r2
 8000c86:	409d      	lsls	r5, r3
 8000c88:	4317      	orrs	r7, r2
 8000c8a:	409c      	lsls	r4, r3
 8000c8c:	0c29      	lsrs	r1, r5, #16
 8000c8e:	0c22      	lsrs	r2, r4, #16
 8000c90:	fbb7 fef1 	udiv	lr, r7, r1
 8000c94:	b2a8      	uxth	r0, r5
 8000c96:	fb01 771e 	mls	r7, r1, lr, r7
 8000c9a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c9e:	fb00 f30e 	mul.w	r3, r0, lr
 8000ca2:	42bb      	cmp	r3, r7
 8000ca4:	d90a      	bls.n	8000cbc <__divdi3+0x6c>
 8000ca6:	197f      	adds	r7, r7, r5
 8000ca8:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000cac:	f080 8105 	bcs.w	8000eba <__divdi3+0x26a>
 8000cb0:	42bb      	cmp	r3, r7
 8000cb2:	f240 8102 	bls.w	8000eba <__divdi3+0x26a>
 8000cb6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cba:	442f      	add	r7, r5
 8000cbc:	1aff      	subs	r7, r7, r3
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb7 f3f1 	udiv	r3, r7, r1
 8000cc4:	fb01 7713 	mls	r7, r1, r3, r7
 8000cc8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000ccc:	fb00 f003 	mul.w	r0, r0, r3
 8000cd0:	42b8      	cmp	r0, r7
 8000cd2:	d908      	bls.n	8000ce6 <__divdi3+0x96>
 8000cd4:	197f      	adds	r7, r7, r5
 8000cd6:	f103 32ff 	add.w	r2, r3, #4294967295
 8000cda:	f080 80f0 	bcs.w	8000ebe <__divdi3+0x26e>
 8000cde:	42b8      	cmp	r0, r7
 8000ce0:	f240 80ed 	bls.w	8000ebe <__divdi3+0x26e>
 8000ce4:	3b02      	subs	r3, #2
 8000ce6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	e003      	b.n	8000cf6 <__divdi3+0xa6>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d90f      	bls.n	8000d12 <__divdi3+0xc2>
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	1c34      	adds	r4, r6, #0
 8000cf8:	bf18      	it	ne
 8000cfa:	2401      	movne	r4, #1
 8000cfc:	4260      	negs	r0, r4
 8000cfe:	f04f 0500 	mov.w	r5, #0
 8000d02:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000d06:	4058      	eors	r0, r3
 8000d08:	4051      	eors	r1, r2
 8000d0a:	1900      	adds	r0, r0, r4
 8000d0c:	4169      	adcs	r1, r5
 8000d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d12:	fab3 f283 	clz	r2, r3
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8086 	bne.w	8000e28 <__divdi3+0x1d8>
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d302      	bcc.n	8000d26 <__divdi3+0xd6>
 8000d20:	4584      	cmp	ip, r0
 8000d22:	f200 80db 	bhi.w	8000edc <__divdi3+0x28c>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e7e5      	b.n	8000cf6 <__divdi3+0xa6>
 8000d2a:	b912      	cbnz	r2, 8000d32 <__divdi3+0xe2>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000d32:	fab5 f085 	clz	r0, r5
 8000d36:	2800      	cmp	r0, #0
 8000d38:	d13b      	bne.n	8000db2 <__divdi3+0x162>
 8000d3a:	1b78      	subs	r0, r7, r5
 8000d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	2201      	movs	r2, #1
 8000d46:	fbb0 f8fe 	udiv	r8, r0, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 0718 	mls	r7, lr, r8, r0
 8000d50:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000d54:	fb0c f308 	mul.w	r3, ip, r8
 8000d58:	42bb      	cmp	r3, r7
 8000d5a:	d907      	bls.n	8000d6c <__divdi3+0x11c>
 8000d5c:	197f      	adds	r7, r7, r5
 8000d5e:	f108 31ff 	add.w	r1, r8, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__divdi3+0x11a>
 8000d64:	42bb      	cmp	r3, r7
 8000d66:	f200 80bd 	bhi.w	8000ee4 <__divdi3+0x294>
 8000d6a:	4688      	mov	r8, r1
 8000d6c:	1aff      	subs	r7, r7, r3
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb7 f3fe 	udiv	r3, r7, lr
 8000d74:	fb0e 7713 	mls	r7, lr, r3, r7
 8000d78:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000d7c:	fb0c fc03 	mul.w	ip, ip, r3
 8000d80:	45bc      	cmp	ip, r7
 8000d82:	d907      	bls.n	8000d94 <__divdi3+0x144>
 8000d84:	197f      	adds	r7, r7, r5
 8000d86:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__divdi3+0x142>
 8000d8c:	45bc      	cmp	ip, r7
 8000d8e:	f200 80a7 	bhi.w	8000ee0 <__divdi3+0x290>
 8000d92:	460b      	mov	r3, r1
 8000d94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d98:	e7ad      	b.n	8000cf6 <__divdi3+0xa6>
 8000d9a:	4252      	negs	r2, r2
 8000d9c:	ea6f 0606 	mvn.w	r6, r6
 8000da0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000da4:	e75d      	b.n	8000c62 <__divdi3+0x12>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	f04f 36ff 	mov.w	r6, #4294967295
 8000db0:	e754      	b.n	8000c5c <__divdi3+0xc>
 8000db2:	f1c0 0220 	rsb	r2, r0, #32
 8000db6:	fa24 f102 	lsr.w	r1, r4, r2
 8000dba:	fa07 f300 	lsl.w	r3, r7, r0
 8000dbe:	4085      	lsls	r5, r0
 8000dc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc4:	40d7      	lsrs	r7, r2
 8000dc6:	4319      	orrs	r1, r3
 8000dc8:	fbb7 f2fe 	udiv	r2, r7, lr
 8000dcc:	0c0b      	lsrs	r3, r1, #16
 8000dce:	fb0e 7712 	mls	r7, lr, r2, r7
 8000dd2:	fa1f fc85 	uxth.w	ip, r5
 8000dd6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000dda:	fb0c f702 	mul.w	r7, ip, r2
 8000dde:	429f      	cmp	r7, r3
 8000de0:	fa04 f400 	lsl.w	r4, r4, r0
 8000de4:	d907      	bls.n	8000df6 <__divdi3+0x1a6>
 8000de6:	195b      	adds	r3, r3, r5
 8000de8:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dec:	d274      	bcs.n	8000ed8 <__divdi3+0x288>
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d972      	bls.n	8000ed8 <__divdi3+0x288>
 8000df2:	3a02      	subs	r2, #2
 8000df4:	442b      	add	r3, r5
 8000df6:	1bdf      	subs	r7, r3, r7
 8000df8:	b289      	uxth	r1, r1
 8000dfa:	fbb7 f8fe 	udiv	r8, r7, lr
 8000dfe:	fb0e 7318 	mls	r3, lr, r8, r7
 8000e02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e06:	fb0c f708 	mul.w	r7, ip, r8
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__divdi3+0x1d0>
 8000e0e:	195b      	adds	r3, r3, r5
 8000e10:	f108 31ff 	add.w	r1, r8, #4294967295
 8000e14:	d25c      	bcs.n	8000ed0 <__divdi3+0x280>
 8000e16:	429f      	cmp	r7, r3
 8000e18:	d95a      	bls.n	8000ed0 <__divdi3+0x280>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	442b      	add	r3, r5
 8000e20:	1bd8      	subs	r0, r3, r7
 8000e22:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8000e26:	e78e      	b.n	8000d46 <__divdi3+0xf6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa2c f103 	lsr.w	r1, ip, r3
 8000e30:	fa0e fe02 	lsl.w	lr, lr, r2
 8000e34:	fa20 f703 	lsr.w	r7, r0, r3
 8000e38:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e3c:	fa08 f002 	lsl.w	r0, r8, r2
 8000e40:	fa28 f103 	lsr.w	r1, r8, r3
 8000e44:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8000e48:	4338      	orrs	r0, r7
 8000e4a:	fbb1 f8f5 	udiv	r8, r1, r5
 8000e4e:	0c03      	lsrs	r3, r0, #16
 8000e50:	fb05 1118 	mls	r1, r5, r8, r1
 8000e54:	fa1f f78e 	uxth.w	r7, lr
 8000e58:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5c:	fb07 f308 	mul.w	r3, r7, r8
 8000e60:	428b      	cmp	r3, r1
 8000e62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e66:	d909      	bls.n	8000e7c <__divdi3+0x22c>
 8000e68:	eb11 010e 	adds.w	r1, r1, lr
 8000e6c:	f108 39ff 	add.w	r9, r8, #4294967295
 8000e70:	d230      	bcs.n	8000ed4 <__divdi3+0x284>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d92e      	bls.n	8000ed4 <__divdi3+0x284>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4471      	add	r1, lr
 8000e7c:	1ac9      	subs	r1, r1, r3
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	fbb1 f3f5 	udiv	r3, r1, r5
 8000e84:	fb05 1113 	mls	r1, r5, r3, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb07 f703 	mul.w	r7, r7, r3
 8000e90:	428f      	cmp	r7, r1
 8000e92:	d908      	bls.n	8000ea6 <__divdi3+0x256>
 8000e94:	eb11 010e 	adds.w	r1, r1, lr
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__divdi3+0x27c>
 8000e9e:	428f      	cmp	r7, r1
 8000ea0:	d914      	bls.n	8000ecc <__divdi3+0x27c>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4471      	add	r1, lr
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	1bc9      	subs	r1, r1, r7
 8000eac:	fba3 890c 	umull	r8, r9, r3, ip
 8000eb0:	4549      	cmp	r1, r9
 8000eb2:	d309      	bcc.n	8000ec8 <__divdi3+0x278>
 8000eb4:	d005      	beq.n	8000ec2 <__divdi3+0x272>
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	e71d      	b.n	8000cf6 <__divdi3+0xa6>
 8000eba:	4696      	mov	lr, r2
 8000ebc:	e6fe      	b.n	8000cbc <__divdi3+0x6c>
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	e711      	b.n	8000ce6 <__divdi3+0x96>
 8000ec2:	4094      	lsls	r4, r2
 8000ec4:	4544      	cmp	r4, r8
 8000ec6:	d2f6      	bcs.n	8000eb6 <__divdi3+0x266>
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	e7f4      	b.n	8000eb6 <__divdi3+0x266>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	e7ea      	b.n	8000ea6 <__divdi3+0x256>
 8000ed0:	4688      	mov	r8, r1
 8000ed2:	e7a5      	b.n	8000e20 <__divdi3+0x1d0>
 8000ed4:	46c8      	mov	r8, r9
 8000ed6:	e7d1      	b.n	8000e7c <__divdi3+0x22c>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	e78c      	b.n	8000df6 <__divdi3+0x1a6>
 8000edc:	4613      	mov	r3, r2
 8000ede:	e70a      	b.n	8000cf6 <__divdi3+0xa6>
 8000ee0:	3b02      	subs	r3, #2
 8000ee2:	e757      	b.n	8000d94 <__divdi3+0x144>
 8000ee4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee8:	442f      	add	r7, r5
 8000eea:	e73f      	b.n	8000d6c <__divdi3+0x11c>

08000eec <__udivdi3>:
 8000eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d144      	bne.n	8000f7e <__udivdi3+0x92>
 8000ef4:	428a      	cmp	r2, r1
 8000ef6:	4615      	mov	r5, r2
 8000ef8:	4604      	mov	r4, r0
 8000efa:	d94f      	bls.n	8000f9c <__udivdi3+0xb0>
 8000efc:	fab2 f782 	clz	r7, r2
 8000f00:	460e      	mov	r6, r1
 8000f02:	b14f      	cbz	r7, 8000f18 <__udivdi3+0x2c>
 8000f04:	f1c7 0320 	rsb	r3, r7, #32
 8000f08:	40b9      	lsls	r1, r7
 8000f0a:	fa20 f603 	lsr.w	r6, r0, r3
 8000f0e:	fa02 f507 	lsl.w	r5, r2, r7
 8000f12:	430e      	orrs	r6, r1
 8000f14:	fa00 f407 	lsl.w	r4, r0, r7
 8000f18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1c:	0c23      	lsrs	r3, r4, #16
 8000f1e:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f22:	b2af      	uxth	r7, r5
 8000f24:	fb0e 6110 	mls	r1, lr, r0, r6
 8000f28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2c:	fb07 f100 	mul.w	r1, r7, r0
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d909      	bls.n	8000f48 <__udivdi3+0x5c>
 8000f34:	195b      	adds	r3, r3, r5
 8000f36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f3a:	f080 80ec 	bcs.w	8001116 <__udivdi3+0x22a>
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	f240 80e9 	bls.w	8001116 <__udivdi3+0x22a>
 8000f44:	3802      	subs	r0, #2
 8000f46:	442b      	add	r3, r5
 8000f48:	1a5a      	subs	r2, r3, r1
 8000f4a:	b2a4      	uxth	r4, r4
 8000f4c:	fbb2 f3fe 	udiv	r3, r2, lr
 8000f50:	fb0e 2213 	mls	r2, lr, r3, r2
 8000f54:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8000f58:	fb07 f703 	mul.w	r7, r7, r3
 8000f5c:	4297      	cmp	r7, r2
 8000f5e:	d908      	bls.n	8000f72 <__udivdi3+0x86>
 8000f60:	1952      	adds	r2, r2, r5
 8000f62:	f103 31ff 	add.w	r1, r3, #4294967295
 8000f66:	f080 80d8 	bcs.w	800111a <__udivdi3+0x22e>
 8000f6a:	4297      	cmp	r7, r2
 8000f6c:	f240 80d5 	bls.w	800111a <__udivdi3+0x22e>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d847      	bhi.n	8001012 <__udivdi3+0x126>
 8000f82:	fab3 f683 	clz	r6, r3
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d148      	bne.n	800101c <__udivdi3+0x130>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d302      	bcc.n	8000f94 <__udivdi3+0xa8>
 8000f8e:	4282      	cmp	r2, r0
 8000f90:	f200 80cd 	bhi.w	800112e <__udivdi3+0x242>
 8000f94:	2001      	movs	r0, #1
 8000f96:	4631      	mov	r1, r6
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f9c:	b912      	cbnz	r2, 8000fa4 <__udivdi3+0xb8>
 8000f9e:	2501      	movs	r5, #1
 8000fa0:	fbb5 f5f2 	udiv	r5, r5, r2
 8000fa4:	fab5 f885 	clz	r8, r5
 8000fa8:	f1b8 0f00 	cmp.w	r8, #0
 8000fac:	d177      	bne.n	800109e <__udivdi3+0x1b2>
 8000fae:	1b4a      	subs	r2, r1, r5
 8000fb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fb4:	b2af      	uxth	r7, r5
 8000fb6:	2601      	movs	r6, #1
 8000fb8:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fbc:	0c23      	lsrs	r3, r4, #16
 8000fbe:	fb0e 2110 	mls	r1, lr, r0, r2
 8000fc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fc6:	fb07 f300 	mul.w	r3, r7, r0
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	d907      	bls.n	8000fde <__udivdi3+0xf2>
 8000fce:	1949      	adds	r1, r1, r5
 8000fd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fd4:	d202      	bcs.n	8000fdc <__udivdi3+0xf0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	f200 80ba 	bhi.w	8001150 <__udivdi3+0x264>
 8000fdc:	4610      	mov	r0, r2
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	b2a4      	uxth	r4, r4
 8000fe2:	fbb1 f3fe 	udiv	r3, r1, lr
 8000fe6:	fb0e 1113 	mls	r1, lr, r3, r1
 8000fea:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fee:	fb07 f703 	mul.w	r7, r7, r3
 8000ff2:	42a7      	cmp	r7, r4
 8000ff4:	d908      	bls.n	8001008 <__udivdi3+0x11c>
 8000ff6:	1964      	adds	r4, r4, r5
 8000ff8:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ffc:	f080 808f 	bcs.w	800111e <__udivdi3+0x232>
 8001000:	42a7      	cmp	r7, r4
 8001002:	f240 808c 	bls.w	800111e <__udivdi3+0x232>
 8001006:	3b02      	subs	r3, #2
 8001008:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800100c:	4631      	mov	r1, r6
 800100e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001012:	2600      	movs	r6, #0
 8001014:	4630      	mov	r0, r6
 8001016:	4631      	mov	r1, r6
 8001018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800101c:	f1c6 0420 	rsb	r4, r6, #32
 8001020:	fa22 f504 	lsr.w	r5, r2, r4
 8001024:	40b3      	lsls	r3, r6
 8001026:	432b      	orrs	r3, r5
 8001028:	fa20 fc04 	lsr.w	ip, r0, r4
 800102c:	fa01 f706 	lsl.w	r7, r1, r6
 8001030:	fa21 f504 	lsr.w	r5, r1, r4
 8001034:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001038:	ea4c 0707 	orr.w	r7, ip, r7
 800103c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001040:	0c39      	lsrs	r1, r7, #16
 8001042:	fb0e 5518 	mls	r5, lr, r8, r5
 8001046:	fa1f fc83 	uxth.w	ip, r3
 800104a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800104e:	fb0c f108 	mul.w	r1, ip, r8
 8001052:	42a9      	cmp	r1, r5
 8001054:	fa02 f206 	lsl.w	r2, r2, r6
 8001058:	d904      	bls.n	8001064 <__udivdi3+0x178>
 800105a:	18ed      	adds	r5, r5, r3
 800105c:	f108 34ff 	add.w	r4, r8, #4294967295
 8001060:	d367      	bcc.n	8001132 <__udivdi3+0x246>
 8001062:	46a0      	mov	r8, r4
 8001064:	1a6d      	subs	r5, r5, r1
 8001066:	b2bf      	uxth	r7, r7
 8001068:	fbb5 f4fe 	udiv	r4, r5, lr
 800106c:	fb0e 5514 	mls	r5, lr, r4, r5
 8001070:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001074:	fb0c fc04 	mul.w	ip, ip, r4
 8001078:	458c      	cmp	ip, r1
 800107a:	d904      	bls.n	8001086 <__udivdi3+0x19a>
 800107c:	18c9      	adds	r1, r1, r3
 800107e:	f104 35ff 	add.w	r5, r4, #4294967295
 8001082:	d35c      	bcc.n	800113e <__udivdi3+0x252>
 8001084:	462c      	mov	r4, r5
 8001086:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800108a:	ebcc 0101 	rsb	r1, ip, r1
 800108e:	fba4 2302 	umull	r2, r3, r4, r2
 8001092:	4299      	cmp	r1, r3
 8001094:	d348      	bcc.n	8001128 <__udivdi3+0x23c>
 8001096:	d044      	beq.n	8001122 <__udivdi3+0x236>
 8001098:	4620      	mov	r0, r4
 800109a:	2600      	movs	r6, #0
 800109c:	e76c      	b.n	8000f78 <__udivdi3+0x8c>
 800109e:	f1c8 0420 	rsb	r4, r8, #32
 80010a2:	fa01 f308 	lsl.w	r3, r1, r8
 80010a6:	fa05 f508 	lsl.w	r5, r5, r8
 80010aa:	fa20 f704 	lsr.w	r7, r0, r4
 80010ae:	40e1      	lsrs	r1, r4
 80010b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010b4:	431f      	orrs	r7, r3
 80010b6:	fbb1 f6fe 	udiv	r6, r1, lr
 80010ba:	0c3a      	lsrs	r2, r7, #16
 80010bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80010c0:	fa1f fc85 	uxth.w	ip, r5
 80010c4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80010c8:	fb0c f206 	mul.w	r2, ip, r6
 80010cc:	429a      	cmp	r2, r3
 80010ce:	fa00 f408 	lsl.w	r4, r0, r8
 80010d2:	d907      	bls.n	80010e4 <__udivdi3+0x1f8>
 80010d4:	195b      	adds	r3, r3, r5
 80010d6:	f106 31ff 	add.w	r1, r6, #4294967295
 80010da:	d237      	bcs.n	800114c <__udivdi3+0x260>
 80010dc:	429a      	cmp	r2, r3
 80010de:	d935      	bls.n	800114c <__udivdi3+0x260>
 80010e0:	3e02      	subs	r6, #2
 80010e2:	442b      	add	r3, r5
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	b2bf      	uxth	r7, r7
 80010e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80010ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80010f4:	fb0c f100 	mul.w	r1, ip, r0
 80010f8:	4299      	cmp	r1, r3
 80010fa:	d907      	bls.n	800110c <__udivdi3+0x220>
 80010fc:	195b      	adds	r3, r3, r5
 80010fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8001102:	d221      	bcs.n	8001148 <__udivdi3+0x25c>
 8001104:	4299      	cmp	r1, r3
 8001106:	d91f      	bls.n	8001148 <__udivdi3+0x25c>
 8001108:	3802      	subs	r0, #2
 800110a:	442b      	add	r3, r5
 800110c:	1a5a      	subs	r2, r3, r1
 800110e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001112:	4667      	mov	r7, ip
 8001114:	e750      	b.n	8000fb8 <__udivdi3+0xcc>
 8001116:	4610      	mov	r0, r2
 8001118:	e716      	b.n	8000f48 <__udivdi3+0x5c>
 800111a:	460b      	mov	r3, r1
 800111c:	e729      	b.n	8000f72 <__udivdi3+0x86>
 800111e:	4613      	mov	r3, r2
 8001120:	e772      	b.n	8001008 <__udivdi3+0x11c>
 8001122:	40b0      	lsls	r0, r6
 8001124:	4290      	cmp	r0, r2
 8001126:	d2b7      	bcs.n	8001098 <__udivdi3+0x1ac>
 8001128:	1e60      	subs	r0, r4, #1
 800112a:	2600      	movs	r6, #0
 800112c:	e724      	b.n	8000f78 <__udivdi3+0x8c>
 800112e:	4630      	mov	r0, r6
 8001130:	e722      	b.n	8000f78 <__udivdi3+0x8c>
 8001132:	42a9      	cmp	r1, r5
 8001134:	d995      	bls.n	8001062 <__udivdi3+0x176>
 8001136:	f1a8 0802 	sub.w	r8, r8, #2
 800113a:	441d      	add	r5, r3
 800113c:	e792      	b.n	8001064 <__udivdi3+0x178>
 800113e:	458c      	cmp	ip, r1
 8001140:	d9a0      	bls.n	8001084 <__udivdi3+0x198>
 8001142:	3c02      	subs	r4, #2
 8001144:	4419      	add	r1, r3
 8001146:	e79e      	b.n	8001086 <__udivdi3+0x19a>
 8001148:	4610      	mov	r0, r2
 800114a:	e7df      	b.n	800110c <__udivdi3+0x220>
 800114c:	460e      	mov	r6, r1
 800114e:	e7c9      	b.n	80010e4 <__udivdi3+0x1f8>
 8001150:	3802      	subs	r0, #2
 8001152:	4429      	add	r1, r5
 8001154:	e743      	b.n	8000fde <__udivdi3+0xf2>
 8001156:	bf00      	nop

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001158:	f8df d030 	ldr.w	sp, [pc, #48]	; 800118c <LoopFillZerobss+0x10>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800115c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800115e:	e003      	b.n	8001168 <LoopCopyDataInit>

08001160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001166:	3104      	adds	r1, #4

08001168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001168:	480a      	ldr	r0, [pc, #40]	; (8001194 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800116c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001170:	d3f6      	bcc.n	8001160 <CopyDataInit>
  ldr  r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001174:	e002      	b.n	800117c <LoopFillZerobss>

08001176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001178:	f842 3b04 	str.w	r3, [r2], #4

0800117c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800117e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001180:	d3f9      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001182:	f000 f811 	bl	80011a8 <SystemInit>
/* Call static constructors */
   /* bl __libc_init_array */
/* Call the application's entry point.*/
  bl  main
 8001186:	f000 f8a7 	bl	80012d8 <main>
  bx  lr    
 800118a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800118c:	20017fff 	.word	0x20017fff
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001190:	0800a024 	.word	0x0800a024
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001198:	200008a4 	.word	0x200008a4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800119c:	200008a4 	.word	0x200008a4
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011a0:	2000a778 	.word	0x2000a778

080011a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC_IRQHandler>
	...

080011a8 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <SystemInit+0x34>)
 80011aa:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ac:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011b4:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <SystemInit+0x38>)
 80011c4:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011cc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011ce:	60d9      	str	r1, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0x3c>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800
 80011e0:	24003010 	.word	0x24003010
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80011e8:	4770      	bx	lr

080011ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler>

080011ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler>

080011ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler>

080011f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler>

080011f2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80011f8:	b508      	push	{r3, lr}
	HAL_IncTick();
 80011fa:	f002 ffb7 	bl	800416c <HAL_IncTick>
	
	Timeout_Timer_0++;
 80011fe:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <SysTick_Handler+0x3c>)
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	6013      	str	r3, [r2, #0]
  
	//---------------------------
	// msec counter
	//---------------------------
	msec_counter++;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <SysTick_Handler+0x40>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	3201      	adds	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
	switch(msec_counter % 10){
 800120e:	6819      	ldr	r1, [r3, #0]
 8001210:	230a      	movs	r3, #10
 8001212:	fbb1 f2f3 	udiv	r2, r1, r3
 8001216:	fb03 1312 	mls	r3, r3, r2, r1
 800121a:	b913      	cbnz	r3, 8001222 <SysTick_Handler+0x2a>
		case 0:
			gui_Exec = true;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <SysTick_Handler+0x44>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
	}

	//---------------------------
	// Touch-Timer
	//---------------------------
	touch_timer++;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <SysTick_Handler+0x48>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	3201      	adds	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
	switch(touch_timer % 1){
 800122a:	681b      	ldr	r3, [r3, #0]
		case 0:
			Touch_Flagged = true;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Handler+0x4c>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	bd08      	pop	{r3, pc}
 8001234:	200008a4 	.word	0x200008a4
 8001238:	200008ac 	.word	0x200008ac
 800123c:	200008b0 	.word	0x200008b0
 8001240:	200008a8 	.word	0x200008a8
 8001244:	200008b1 	.word	0x200008b1

08001248 <Error_Handler>:
/**
  * @brief	Handles general errors.
  * @param	None
  * @retval	None
  */
static void Error_Handler(void){
 8001248:	b508      	push	{r3, lr}
	
	while(1){
		/* Put error on LED3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <Error_Handler+0x14>)
 800124c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001250:	f002 ff54 	bl	80040fc <HAL_GPIO_TogglePin>
		printf("Peripheral config error\n");
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <Error_Handler+0x18>)
 8001256:	f003 f811 	bl	800427c <puts>
	}
 800125a:	e7f6      	b.n	800124a <Error_Handler+0x2>
 800125c:	40020800 	.word	0x40020800
 8001260:	08009460 	.word	0x08009460

08001264 <Debug_ITMDebugEnable>:
void Debug_ITMDebugEnable(void){
	volatile unsigned int *ITM_TER      = (volatile unsigned int *)0xE0000E00;
	volatile unsigned int *SCB_DHCSR 		= (volatile unsigned int *)0xE000EDF0;
	volatile unsigned int *DBGMCU_CR 		= (volatile unsigned int *)0xE0042004;

	*DBGMCU_CR |= 0x27; // DBGMCU_CR
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <Debug_ITMDebugEnable+0x24>)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800126c:	6013      	str	r3, [r2, #0]

if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <Debug_ITMDebugEnable+0x28>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	07da      	lsls	r2, r3, #31
 8001274:	d506      	bpl.n	8001284 <Debug_ITMDebugEnable+0x20>
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <Debug_ITMDebugEnable+0x2c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	07db      	lsls	r3, r3, #31
    Debug_ITMDebug = 1;
 800127c:	bf42      	ittt	mi
 800127e:	4b05      	ldrmi	r3, [pc, #20]	; (8001294 <Debug_ITMDebugEnable+0x30>)
 8001280:	2201      	movmi	r2, #1
 8001282:	601a      	strmi	r2, [r3, #0]
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e0042004 	.word	0xe0042004
 800128c:	e000edf0 	.word	0xe000edf0
 8001290:	e0000e00 	.word	0xe0000e00
 8001294:	200053b8 	.word	0x200053b8

08001298 <Debug_ITMDebugOutputChar>:

void Debug_ITMDebugOutputChar(char ch){
	static volatile unsigned int *ITM_STIM0 = (volatile unsigned int *)0xE0000000; // ITM Port 0
	static volatile unsigned int *SCB_DEMCR = (volatile unsigned int *)0xE000EDFC;

	if (Debug_ITMDebug && (*SCB_DEMCR & 0x01000000))
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <Debug_ITMDebugOutputChar+0x1c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	b14b      	cbz	r3, 80012b2 <Debug_ITMDebugOutputChar+0x1a>
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <Debug_ITMDebugOutputChar+0x20>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	d505      	bpl.n	80012b2 <Debug_ITMDebugOutputChar+0x1a>
	{
		while(*ITM_STIM0 == 0);
 80012a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	d0fa      	beq.n	80012a6 <Debug_ITMDebugOutputChar+0xe>
  	*((volatile char *)ITM_STIM0) = ch;
 80012b0:	7018      	strb	r0, [r3, #0]
 80012b2:	4770      	bx	lr
 80012b4:	200053b8 	.word	0x200053b8
 80012b8:	e000edfc 	.word	0xe000edfc

080012bc <Debug_ITMDebugOutputString>:
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
	if (Debug_ITMDebug)
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <Debug_ITMDebugOutputString+0x18>)
 80012be:	681b      	ldr	r3, [r3, #0]
	}
}

//****************************************************************************

void Debug_ITMDebugOutputString(char *Buffer){
 80012c0:	b510      	push	{r4, lr}
	if (Debug_ITMDebug)
 80012c2:	b133      	cbz	r3, 80012d2 <Debug_ITMDebugOutputString+0x16>
 80012c4:	1e44      	subs	r4, r0, #1
		while(*Buffer)
 80012c6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80012ca:	b110      	cbz	r0, 80012d2 <Debug_ITMDebugOutputString+0x16>
			Debug_ITMDebugOutputChar(*Buffer++);
 80012cc:	f7ff ffe4 	bl	8001298 <Debug_ITMDebugOutputChar>
 80012d0:	e7f9      	b.n	80012c6 <Debug_ITMDebugOutputString+0xa>
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	200053b8 	.word	0x200053b8

080012d8 <main>:
  * @param	None
  *	@note	Init the system.
  * 		return here after a call.
  *	@retval	None
  */
int main(void){
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b09f      	sub	sp, #124	; 0x7c
	/* STM32f4xx HAL library initialization:
	 - Cofigure Flash prefetch, flash preread and Buffer caches
	 - Systick timer config
	 - Low level init
	 */
	HAL_Init();
 80012dc:	f002 ff30 	bl	8004140 <HAL_Init>
static void SystemClock_Config(void){
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	4aa9      	ldr	r2, [pc, #676]	; (8001588 <main+0x2b0>)
 80012e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40

	/* The voltage scaling allows optimizing the power consumption when the
	   device is clocked below the maximum system frequency, to update the
	   voltage scaling value regarding system frequency refer to product
	   datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ea:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800

	 /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ee:	2402      	movs	r4, #2

	/* The voltage scaling allows optimizing the power consumption when the
	   device is clocked below the maximum system frequency, to update the
	   voltage scaling value regarding system frequency refer to product
	   datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f6:	6013      	str	r3, [r2, #0]

	 /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80012fc:	2310      	movs	r3, #16
 80012fe:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001300:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001302:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001306:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001308:	2304      	movs	r3, #4
	 /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800130c:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLQ = 7;
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800130e:	a812      	add	r0, sp, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001310:	2307      	movs	r3, #7
	   voltage scaling value regarding system frequency refer to product
	   datasheet. */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	 /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001312:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001316:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001318:	931d      	str	r3, [sp, #116]	; 0x74
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800131a:	f001 fb5f 	bl	80029dc <HAL_RCC_OscConfig>
 800131e:	b108      	cbz	r0, 8001324 <main+0x4c>
		/* Initialization Error */
		Error_Handler();
 8001320:	f7ff ff92 	bl	8001248 <Error_Handler>
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001324:	230f      	movs	r3, #15
 8001326:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 800132e:	9007      	str	r0, [sp, #28]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001330:	4621      	mov	r1, r4
 8001332:	a803      	add	r0, sp, #12
		Error_Handler();
	}
	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8001336:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001338:	f001 fd52 	bl	8002de0 <HAL_RCC_ClockConfig>
 800133c:	2800      	cmp	r0, #0
 800133e:	d1ef      	bne.n	8001320 <main+0x48>
  {
    Error_Handler();
  }

	/* STM32F407x Revision Z devices: prefetch is supported */
	if(HAL_GetREVID() == 0x1001){
 8001340:	f002 ff22 	bl	8004188 <HAL_GetREVID>
 8001344:	f241 0301 	movw	r3, #4097	; 0x1001
 8001348:	4298      	cmp	r0, r3
		/* Enable the Flash prefetch */
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134a:	bf01      	itttt	eq
 800134c:	4a8f      	ldreq	r2, [pc, #572]	; (800158c <main+0x2b4>)
 800134e:	6813      	ldreq	r3, [r2, #0]
 8001350:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8001354:	6013      	streq	r3, [r2, #0]

	/* configure the system clock to 168 MHz */
	SystemClock_Config();

	/* Enable TRACE debug -----------------------------------------------*/
	Debug_ITMDebugEnable();
 8001356:	f7ff ff85 	bl	8001264 <Debug_ITMDebugEnable>
 	Debug_ITMDebugOutputString("SWV Enabled\n");
 800135a:	488d      	ldr	r0, [pc, #564]	; (8001590 <main+0x2b8>)
 800135c:	f7ff ffae 	bl	80012bc <Debug_ITMDebugOutputString>
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;

	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001360:	488c      	ldr	r0, [pc, #560]	; (8001594 <main+0x2bc>)
  * @param None
  * @retval None
  */
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 8001362:	498d      	ldr	r1, [pc, #564]	; (8001598 <main+0x2c0>)
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;

	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001364:	2210      	movs	r2, #16
  * @param None
  * @retval None
  */
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 8001366:	2301      	movs	r3, #1
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;

	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001368:	6142      	str	r2, [r0, #20]
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800136a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  * @param None
  * @retval None
  */
static void sram_init(void){
	/*	Configure the FSCM bus ---------------------------*/
	SRAM_Timing.AddressSetupTime = 1;
 800136e:	600b      	str	r3, [r1, #0]
	SRAM_Timing.AddressHoldTime = 1;
 8001370:	604b      	str	r3, [r1, #4]
	SRAM_Timing.DataSetupTime = 1;
 8001372:	608b      	str	r3, [r1, #8]
	SRAM_Timing.BusTurnAroundDuration = 1;
 8001374:	60cb      	str	r3, [r1, #12]
	SRAM_Timing.CLKDivision = 1;
 8001376:	610b      	str	r3, [r1, #16]
	SRAM_Timing.DataLatency = 1;
 8001378:	614b      	str	r3, [r1, #20]
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137a:	6282      	str	r2, [r0, #40]	; 0x28
	SRAM_Timing.AddressHoldTime = 1;
	SRAM_Timing.DataSetupTime = 1;
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800137c:	2300      	movs	r3, #0
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;

	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 800137e:	460a      	mov	r2, r1
	SRAM_Timing.AddressHoldTime = 1;
	SRAM_Timing.DataSetupTime = 1;
	SRAM_Timing.BusTurnAroundDuration = 1;
	SRAM_Timing.CLKDivision = 1;
	SRAM_Timing.DataLatency = 1;
	SRAM_Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001380:	618b      	str	r3, [r1, #24]

	hsram.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001382:	6083      	str	r3, [r0, #8]
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001384:	60c3      	str	r3, [r0, #12]
	hsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001386:	6103      	str	r3, [r0, #16]
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001388:	6183      	str	r3, [r0, #24]
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800138a:	61c3      	str	r3, [r0, #28]
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800138c:	6203      	str	r3, [r0, #32]
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800138e:	6243      	str	r3, [r0, #36]	; 0x24
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001390:	62c3      	str	r3, [r0, #44]	; 0x2c
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001392:	6303      	str	r3, [r0, #48]	; 0x30
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001394:	6343      	str	r3, [r0, #52]	; 0x34
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001396:	6383      	str	r3, [r0, #56]	; 0x38

	/* Initialize the SRAM controller ----------------------------*/
	if(HAL_SRAM_Init(&hsram, &SRAM_Timing, &SRAM_Timing) != HAL_OK){
 8001398:	f002 fb1e 	bl	80039d8 <HAL_SRAM_Init>
 800139c:	2800      	cmp	r0, #0
 800139e:	d1bf      	bne.n	8001320 <main+0x48>
  * @param None
  * @retval None
  */
static void I2C_init(void){
	/*	Configure the I2C peripheral ---------------------------*/
  I2cHandle.Instance             = I2Cx;
 80013a0:	4b7e      	ldr	r3, [pc, #504]	; (800159c <main+0x2c4>)
 80013a2:	4a7f      	ldr	r2, [pc, #508]	; (80015a0 <main+0x2c8>)
 80013a4:	601a      	str	r2, [r3, #0]

  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80013a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013aa:	611a      	str	r2, [r3, #16]
  I2cHandle.Init.ClockSpeed      = 400000;
 80013ac:	4a7d      	ldr	r2, [pc, #500]	; (80015a4 <main+0x2cc>)
 80013ae:	605a      	str	r2, [r3, #4]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80013b0:	2240      	movs	r2, #64	; 0x40
	/*	Configure the I2C peripheral ---------------------------*/
  I2cHandle.Instance             = I2Cx;

  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
  I2cHandle.Init.ClockSpeed      = 400000;
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b2:	6158      	str	r0, [r3, #20]
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80013b4:	6098      	str	r0, [r3, #8]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80013b6:	61da      	str	r2, [r3, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80013b8:	6218      	str	r0, [r3, #32]
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 80013ba:	22fe      	movs	r2, #254	; 0xfe
  I2cHandle.Init.OwnAddress2	 = I2C_ADDRESS;

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013bc:	4618      	mov	r0, r3
  I2cHandle.Init.ClockSpeed      = 400000;
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  I2cHandle.Init.DutyCycle       = I2C_DUTYCYCLE_2;
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  I2cHandle.Init.OwnAddress1     = I2C_ADDRESS;
 80013be:	60da      	str	r2, [r3, #12]
  I2cHandle.Init.OwnAddress2	 = I2C_ADDRESS;
 80013c0:	619a      	str	r2, [r3, #24]

  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 80013c2:	f001 ff11 	bl	80031e8 <HAL_I2C_Init>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d1aa      	bne.n	8001320 <main+0x48>
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = None
      - BaudRate = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
 80013ca:	4b77      	ldr	r3, [pc, #476]	; (80015a8 <main+0x2d0>)
  
	UartHandle.Init.BaudRate     = baudrate;
 80013cc:	4977      	ldr	r1, [pc, #476]	; (80015ac <main+0x2d4>)
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80013ce:	6098      	str	r0, [r3, #8]
      - Parity = None
      - BaudRate = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
  
	UartHandle.Init.BaudRate     = baudrate;
 80013d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013d4:	e883 0006 	stmia.w	r3, {r1, r2}
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80013d8:	220c      	movs	r2, #12
      - Hardware flow control disabled (RTS and CTS signals) */
	UartHandle.Instance          = USARTx;
  
	UartHandle.Init.BaudRate     = baudrate;
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80013da:	60d8      	str	r0, [r3, #12]
	UartHandle.Init.Parity       = UART_PARITY_NONE;
 80013dc:	6118      	str	r0, [r3, #16]
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80013de:	6198      	str	r0, [r3, #24]
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80013e0:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_8;
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80013e2:	4618      	mov	r0, r3
	UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits     = UART_STOPBITS_1;
	UartHandle.Init.Parity       = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode         = UART_MODE_TX_RX;
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_8;
 80013e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e8:	61da      	str	r2, [r3, #28]
    
	if(HAL_UART_Init(&UartHandle) != HAL_OK)
 80013ea:	f002 f921 	bl	8003630 <HAL_UART_Init>
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d196      	bne.n	8001320 <main+0x48>
	RCC_ClkInitTypeDef sClokConfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0;
	uint32_t uwPrescalerValue = 0;
	uint32_t pFLatency;
	
	HAL_RCC_GetClockConfig(&sClokConfig, &pFLatency);
 80013f2:	a808      	add	r0, sp, #32
 80013f4:	a901      	add	r1, sp, #4
 80013f6:	f001 fed9 	bl	80031ac <HAL_RCC_GetClockConfig>
	
	uwAPB1Prescaler = sClokConfig.APB1CLKDivider;
	if (uwAPB1Prescaler == 0) 
 80013fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013fc:	b913      	cbnz	r3, 8001404 <main+0x12c>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013fe:	f001 fea5 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8001402:	e002      	b.n	800140a <main+0x132>
	}
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001404:	f001 fea2 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8001408:	0040      	lsls	r0, r0, #1
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_4.Instance = TIMx_4;
 800140a:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <main+0x2d8>)
 800140c:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <main+0x2dc>)
 800140e:	601a      	str	r2, [r3, #0]
	
	TimHandle_4.Init.Period = 20000 - 1;
 8001410:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001414:	60da      	str	r2, [r3, #12]
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
 8001416:	f644 6220 	movw	r2, #20000	; 0x4e20
 800141a:	fbb0 f0f2 	udiv	r0, r0, r2
 800141e:	3801      	subs	r0, #1
	
	TimHandle_4.Instance = TIMx_4;
	
	TimHandle_4.Init.Period = 20000 - 1;
	TimHandle_4.Init.Prescaler = uwPrescalerValue;
	TimHandle_4.Init.ClockDivision = 0;
 8001420:	2200      	movs	r2, #0
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_4.Instance = TIMx_4;
	
	TimHandle_4.Init.Period = 20000 - 1;
	TimHandle_4.Init.Prescaler = uwPrescalerValue;
 8001422:	6058      	str	r0, [r3, #4]
	TimHandle_4.Init.ClockDivision = 0;
	TimHandle_4.Init.CounterMode = TIM_COUNTERMODE_UP;
	if(HAL_TIM_Base_Init(&TimHandle_4) != HAL_OK)
 8001424:	4618      	mov	r0, r3
	
	TimHandle_4.Instance = TIMx_4;
	
	TimHandle_4.Init.Period = 20000 - 1;
	TimHandle_4.Init.Prescaler = uwPrescalerValue;
	TimHandle_4.Init.ClockDivision = 0;
 8001426:	611a      	str	r2, [r3, #16]
	TimHandle_4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_Base_Init(&TimHandle_4) != HAL_OK)
 800142a:	f002 fcad 	bl	8003d88 <HAL_TIM_Base_Init>
 800142e:	2800      	cmp	r0, #0
 8001430:	f47f af76 	bne.w	8001320 <main+0x48>
	RCC_ClkInitTypeDef sClokConfig;
	uint32_t uwTimclock, uwAPB1Prescaler = 0;
	uint32_t uwPrescalerValue = 0;
	uint32_t pFLatency;
	
	HAL_RCC_GetClockConfig(&sClokConfig, &pFLatency);
 8001434:	a80d      	add	r0, sp, #52	; 0x34
 8001436:	a902      	add	r1, sp, #8
 8001438:	f001 feb8 	bl	80031ac <HAL_RCC_GetClockConfig>
	
	uwAPB1Prescaler = sClokConfig.APB1CLKDivider;
	if (uwAPB1Prescaler == 0) 
 800143c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800143e:	b913      	cbnz	r3, 8001446 <main+0x16e>
	{
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001440:	f001 fe84 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8001444:	e002      	b.n	800144c <main+0x174>
	}
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001446:	f001 fe81 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 800144a:	0040      	lsls	r0, r0, #1
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_5.Instance = TIMx_5;
 800144c:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <main+0x2e0>)
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <main+0x2e4>)
 8001450:	601a      	str	r2, [r3, #0]
	
	TimHandle_5.Init.Period = 70 - 1;
 8001452:	2245      	movs	r2, #69	; 0x45
 8001454:	60da      	str	r2, [r3, #12]
	else
	{
		uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
	}
	
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
 8001456:	f644 6220 	movw	r2, #20000	; 0x4e20
 800145a:	fbb0 f0f2 	udiv	r0, r0, r2
 800145e:	3801      	subs	r0, #1
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period = 70 - 1;
	TimHandle_5.Init.Prescaler = uwPrescalerValue;
	TimHandle_5.Init.ClockDivision = 0;
 8001460:	2200      	movs	r2, #0
	uwPrescalerValue = (uint32_t) ((uwTimclock / 20000) - 1);
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period = 70 - 1;
	TimHandle_5.Init.Prescaler = uwPrescalerValue;
 8001462:	6058      	str	r0, [r3, #4]
	TimHandle_5.Init.ClockDivision = 0;
	TimHandle_5.Init.CounterMode = TIM_COUNTERMODE_UP;
	if(HAL_TIM_Base_Init(&TimHandle_5) != HAL_OK)
 8001464:	4618      	mov	r0, r3
	
	TimHandle_5.Instance = TIMx_5;
	
	TimHandle_5.Init.Period = 70 - 1;
	TimHandle_5.Init.Prescaler = uwPrescalerValue;
	TimHandle_5.Init.ClockDivision = 0;
 8001466:	611a      	str	r2, [r3, #16]
	TimHandle_5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	609a      	str	r2, [r3, #8]
	if(HAL_TIM_Base_Init(&TimHandle_5) != HAL_OK)
 800146a:	f002 fc8d 	bl	8003d88 <HAL_TIM_Base_Init>
 800146e:	4605      	mov	r5, r0
 8001470:	2800      	cmp	r0, #0
 8001472:	f47f af55 	bne.w	8001320 <main+0x48>
  */
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();
 8001476:	4a44      	ldr	r2, [pc, #272]	; (8001588 <main+0x2b0>)
	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001478:	4851      	ldr	r0, [pc, #324]	; (80015c0 <main+0x2e8>)
  */
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();
 800147a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	
	/*********************************************************************/
	
	/*	Init modbus	slave -----------------------------------------------*/
	eStatus = eMBMasterInit(MB_RTU, 0, 28800, MB_PAR_NONE);
	printf("eStatus: %s\n", eStatus ? "error": "no'error");
 800147c:	4e51      	ldr	r6, [pc, #324]	; (80015c4 <main+0x2ec>)
  */
static void init_leds(void){
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6313      	str	r3, [r2, #48]	; 0x30

	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
 8001484:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2401      	movs	r4, #1

	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();

	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
 800148a:	9312      	str	r3, [sp, #72]	; 0x48
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800148c:	a912      	add	r1, sp, #72	; 0x48
	__GPIOC_CLK_ENABLE();

	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	9315      	str	r3, [sp, #84]	; 0x54
	// Enable AHB1per Clock
	__GPIOC_CLK_ENABLE();

	//Config pins
	GPIO_InitStructure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001494:	9414      	str	r4, [sp, #80]	; 0x50
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001496:	f002 fce7 	bl	8003e68 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800149a:	4849      	ldr	r0, [pc, #292]	; (80015c0 <main+0x2e8>)
 800149c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a0:	4622      	mov	r2, r4
 80014a2:	f002 fe13 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80014a6:	4846      	ldr	r0, [pc, #280]	; (80015c0 <main+0x2e8>)
 80014a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ac:	4622      	mov	r2, r4
 80014ae:	f002 fe0d 	bl	80040cc <HAL_GPIO_WritePin>
	init_leds();
	
	/*********************************************************************/
	
	/*	Init modbus	slave -----------------------------------------------*/
	eStatus = eMBMasterInit(MB_RTU, 0, 28800, MB_PAR_NONE);
 80014b2:	462b      	mov	r3, r5
 80014b4:	4629      	mov	r1, r5
 80014b6:	f44f 42e1 	mov.w	r2, #28800	; 0x7080
 80014ba:	4628      	mov	r0, r5
 80014bc:	f000 fcb4 	bl	8001e28 <eMBMasterInit>
	printf("eStatus: %s\n", eStatus ? "error": "no'error");
 80014c0:	4d41      	ldr	r5, [pc, #260]	; (80015c8 <main+0x2f0>)
 80014c2:	2800      	cmp	r0, #0
 80014c4:	bf14      	ite	ne
 80014c6:	4629      	movne	r1, r5
 80014c8:	4631      	moveq	r1, r6
 80014ca:	4840      	ldr	r0, [pc, #256]	; (80015cc <main+0x2f4>)
 80014cc:	f002 fe94 	bl	80041f8 <printf>
	/*********************************************************************/
	
	/*	Enable the Modbus Protocol Stack --------------------------------*/
	eStatus = eMBMasterEnable();
 80014d0:	f000 fcf6 	bl	8001ec0 <eMBMasterEnable>
	printf("eStatus: %s\n", eStatus ? "error": "no'error");
 80014d4:	2800      	cmp	r0, #0
 80014d6:	bf14      	ite	ne
 80014d8:	4629      	movne	r1, r5
 80014da:	4631      	moveq	r1, r6
 80014dc:	483b      	ldr	r0, [pc, #236]	; (80015cc <main+0x2f4>)
 80014de:	f002 fe8b 	bl	80041f8 <printf>

		//printf("HAL integrated...\n");
				
		//test_Cplusplus();
		
		if(xtNeedPoll == true){
 80014e2:	4e3b      	ldr	r6, [pc, #236]	; (80015d0 <main+0x2f8>)
 80014e4:	7833      	ldrb	r3, [r6, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 809f 	beq.w	800162a <main+0x352>
			//printf("xtNeedPoll: %s\n", xtNeedPoll ? "true" : "false");
			counter++;
 80014ec:	3401      	adds	r4, #1
 80014ee:	b2a4      	uxth	r4, r4
			
			for(i = 0; i <= xtholdingNRegs; i++){
 80014f0:	2100      	movs	r1, #0
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <main+0x2fc>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b28d      	uxth	r5, r1
 80014f8:	42ab      	cmp	r3, r5
 80014fa:	f101 0701 	add.w	r7, r1, #1
 80014fe:	d311      	bcc.n	8001524 <main+0x24c>
					printf("usMRegHoldBuf[%d]: %d\n", xtholdingRegIndex + i, usMRegHoldBuf[ucMBMasterGetDestAddress() - 1][xtholdingRegIndex + i]);
 8001500:	f000 fdec 	bl	80020dc <ucMBMasterGetDestAddress>
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <main+0x300>)
 8001506:	4a35      	ldr	r2, [pc, #212]	; (80015dc <main+0x304>)
 8001508:	8819      	ldrh	r1, [r3, #0]
 800150a:	3801      	subs	r0, #1
 800150c:	4429      	add	r1, r5
 800150e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001512:	fb03 1300 	mla	r3, r3, r0, r1
 8001516:	4832      	ldr	r0, [pc, #200]	; (80015e0 <main+0x308>)
 8001518:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800151c:	f002 fe6c 	bl	80041f8 <printf>
 8001520:	4639      	mov	r1, r7
 8001522:	e7e6      	b.n	80014f2 <main+0x21a>
 8001524:	2100      	movs	r1, #0
			}
			for(i = 0; i <= xtinputNRegs; i++){
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <main+0x30c>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	b28d      	uxth	r5, r1
 800152c:	42ab      	cmp	r3, r5
 800152e:	f101 0701 	add.w	r7, r1, #1
 8001532:	d311      	bcc.n	8001558 <main+0x280>
					printf("usMRegInBuf[%d]: %d\n", xtinputRegIndex + i, usMRegInBuf[ucMBMasterGetDestAddress() - 1][xtinputRegIndex + i]);
 8001534:	f000 fdd2 	bl	80020dc <ucMBMasterGetDestAddress>
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <main+0x310>)
 800153a:	4a2c      	ldr	r2, [pc, #176]	; (80015ec <main+0x314>)
 800153c:	8819      	ldrh	r1, [r3, #0]
 800153e:	3801      	subs	r0, #1
 8001540:	4429      	add	r1, r5
 8001542:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001546:	fb03 1300 	mla	r3, r3, r0, r1
 800154a:	4829      	ldr	r0, [pc, #164]	; (80015f0 <main+0x318>)
 800154c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001550:	f002 fe52 	bl	80041f8 <printf>
 8001554:	4639      	mov	r1, r7
 8001556:	e7e6      	b.n	8001526 <main+0x24e>
 8001558:	2100      	movs	r1, #0
			}
			for(i = 0; i <= xtCoilNRegs; i++){
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <main+0x31c>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b28d      	uxth	r5, r1
 8001560:	42ab      	cmp	r3, r5
 8001562:	f101 0701 	add.w	r7, r1, #1
 8001566:	d34d      	bcc.n	8001604 <main+0x32c>
					printf("ucMCoilBuf[%d]: %d\n", xtCoilRegIndex + i, ucMCoilBuf[ucMBMasterGetDestAddress() - 1][xtCoilRegIndex + i]);
 8001568:	f000 fdb8 	bl	80020dc <ucMBMasterGetDestAddress>
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <main+0x320>)
 800156e:	4a23      	ldr	r2, [pc, #140]	; (80015fc <main+0x324>)
 8001570:	8819      	ldrh	r1, [r3, #0]
 8001572:	3801      	subs	r0, #1
 8001574:	4429      	add	r1, r5
 8001576:	234b      	movs	r3, #75	; 0x4b
 8001578:	fb03 1300 	mla	r3, r3, r0, r1
 800157c:	4820      	ldr	r0, [pc, #128]	; (8001600 <main+0x328>)
 800157e:	5cd2      	ldrb	r2, [r2, r3]
 8001580:	f002 fe3a 	bl	80041f8 <printf>
 8001584:	4639      	mov	r1, r7
 8001586:	e7e8      	b.n	800155a <main+0x282>
 8001588:	40023800 	.word	0x40023800
 800158c:	40023c00 	.word	0x40023c00
 8001590:	08009481 	.word	0x08009481
 8001594:	2000a6a4 	.word	0x2000a6a4
 8001598:	2000a688 	.word	0x2000a688
 800159c:	2000a724 	.word	0x2000a724
 80015a0:	40005400 	.word	0x40005400
 80015a4:	00061a80 	.word	0x00061a80
 80015a8:	2000a15c 	.word	0x2000a15c
 80015ac:	40011000 	.word	0x40011000
 80015b0:	2000a6e8 	.word	0x2000a6e8
 80015b4:	40000800 	.word	0x40000800
 80015b8:	2000a64c 	.word	0x2000a64c
 80015bc:	40000c00 	.word	0x40000c00
 80015c0:	40020800 	.word	0x40020800
 80015c4:	08009478 	.word	0x08009478
 80015c8:	08009472 	.word	0x08009472
 80015cc:	0800948e 	.word	0x0800948e
 80015d0:	20000004 	.word	0x20000004
 80015d4:	200053b4 	.word	0x200053b4
 80015d8:	200053c2 	.word	0x200053c2
 80015dc:	200053c4 	.word	0x200053c4
 80015e0:	0800949b 	.word	0x0800949b
 80015e4:	200053be 	.word	0x200053be
 80015e8:	200053c0 	.word	0x200053c0
 80015ec:	200008b4 	.word	0x200008b4
 80015f0:	080094b2 	.word	0x080094b2
 80015f4:	200053bc 	.word	0x200053bc
 80015f8:	200008b2 	.word	0x200008b2
 80015fc:	2000a19c 	.word	0x2000a19c
 8001600:	080094c7 	.word	0x080094c7
			}

			switch(counter % 2){
 8001604:	07e3      	lsls	r3, r4, #31
				
				break;
			case 1:
				//errorCode = eMBMasterReqReadHoldingRegister(10, 147, 6, -1);
				//errorCode = eMBMasterReqReadInputRegister(10, 497, 15, -1);
				errorCode = eMBMasterReqReadCoils(10,80,25,-1);
 8001606:	f04f 000a 	mov.w	r0, #10
			}
			for(i = 0; i <= xtCoilNRegs; i++){
					printf("ucMCoilBuf[%d]: %d\n", xtCoilRegIndex + i, ucMCoilBuf[ucMBMasterGetDestAddress() - 1][xtCoilRegIndex + i]);
			}

			switch(counter % 2){
 800160a:	d406      	bmi.n	800161a <main+0x342>
			case 0:
				//errorCode = eMBMasterReqReadInputRegister(10, 497, 6, -1);
				errorCode = eMBMasterReqReadHoldingRegister(10, 147, 20, -1);
 800160c:	2193      	movs	r1, #147	; 0x93
 800160e:	2214      	movs	r2, #20
 8001610:	f04f 33ff 	mov.w	r3, #4294967295
 8001614:	f001 f950 	bl	80028b8 <eMBMasterReqReadHoldingRegister>
				
				break;
 8001618:	e005      	b.n	8001626 <main+0x34e>
			case 1:
				//errorCode = eMBMasterReqReadHoldingRegister(10, 147, 6, -1);
				//errorCode = eMBMasterReqReadInputRegister(10, 497, 15, -1);
				errorCode = eMBMasterReqReadCoils(10,80,25,-1);
 800161a:	2150      	movs	r1, #80	; 0x50
 800161c:	2219      	movs	r2, #25
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	f000 ffd1 	bl	80025c8 <eMBMasterReqReadCoils>
				break;
			default:
				break;
			}
			
			xtNeedPoll = false;
 8001626:	2300      	movs	r3, #0
 8001628:	7033      	strb	r3, [r6, #0]
		}
		
		if(gui_Exec == true){
 800162a:	4d0b      	ldr	r5, [pc, #44]	; (8001658 <main+0x380>)
 800162c:	782b      	ldrb	r3, [r5, #0]
 800162e:	b15b      	cbz	r3, 8001648 <main+0x370>
			
			eStatus = eMBMasterPoll();
 8001630:	f000 fc58 	bl	8001ee4 <eMBMasterPoll>
			
			printf("eStatus: %s\n", eStatus ? "error": "no'error");
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <main+0x384>)
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <main+0x388>)
 8001638:	2800      	cmp	r0, #0
 800163a:	bf18      	it	ne
 800163c:	4619      	movne	r1, r3
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <main+0x38c>)
 8001640:	f002 fdda 	bl	80041f8 <printf>
			//printf("SystemCoreClock: %d\n", SystemCoreClock);
			
			/*Clear Flag*/
			gui_Exec = false;
 8001644:	2300      	movs	r3, #0
 8001646:	702b      	strb	r3, [r5, #0]
		}
		
		if(Touch_Flagged == true){
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <main+0x390>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	2a00      	cmp	r2, #0
 800164e:	f43f af48 	beq.w	80014e2 <main+0x20a>
			
			Touch_Flagged = false;
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e744      	b.n	80014e2 <main+0x20a>
 8001658:	200008b0 	.word	0x200008b0
 800165c:	08009472 	.word	0x08009472
 8001660:	08009478 	.word	0x08009478
 8001664:	0800948e 	.word	0x0800948e
 8001668:	200008b1 	.word	0x200008b1

0800166c <eMBMasterRegInputCB>:
  * @param	usNRegs
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
 800166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800166e:	4615      	mov	r5, r2
 8001670:	460c      	mov	r4, r1
 8001672:	4606      	mov	r6, r0
    uint16_t          REG_INPUT_START;
    uint16_t          REG_INPUT_NREGS;
    uint16_t          usRegInStart;
	uint8_t			MasterDestAddress;
	
	MasterDestAddress = ucMBMasterGetDestAddress();
 8001674:	f000 fd32 	bl	80020dc <ucMBMasterGetDestAddress>
 8001678:	4601      	mov	r1, r0
	printf("MasterDestAddress: %d\n", MasterDestAddress);
 800167a:	4816      	ldr	r0, [pc, #88]	; (80016d4 <eMBMasterRegInputCB+0x68>)
 800167c:	f002 fdbc 	bl	80041f8 <printf>
	
	xtinputNRegs = usNRegs;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <eMBMasterRegInputCB+0x6c>)
 8001682:	801d      	strh	r5, [r3, #0]

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 8001684:	f000 fd2a 	bl	80020dc <ucMBMasterGetDestAddress>
    REG_INPUT_START = M_REG_INPUT_START;
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
    usRegInStart = usMRegInStart;

    /* it already plus one in modbus function method. */
    usAddress--;
 8001688:	1e63      	subs	r3, r4, #1
 800168a:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_INPUT_START)
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 800168c:	195a      	adds	r2, r3, r5
 800168e:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 8001692:	dc1d      	bgt.n	80016d0 <eMBMasterRegInputCB+0x64>
    {
        iRegIndex = usAddress - usRegInStart;
		xtinputRegIndex = iRegIndex;
 8001694:	4a11      	ldr	r2, [pc, #68]	; (80016dc <eMBMasterRegInputCB+0x70>)
 8001696:	8013      	strh	r3, [r2, #0]
 8001698:	192a      	adds	r2, r5, r4
 800169a:	b292      	uxth	r2, r2
 800169c:	1c5d      	adds	r5, r3, #1
 800169e:	b2ad      	uxth	r5, r5
        while (usNRegs > 0)
 80016a0:	4295      	cmp	r5, r2
 80016a2:	f106 0602 	add.w	r6, r6, #2
 80016a6:	d011      	beq.n	80016cc <eMBMasterRegInputCB+0x60>
	MasterDestAddress = ucMBMasterGetDestAddress();
	printf("MasterDestAddress: %d\n", MasterDestAddress);
	
	xtinputNRegs = usNRegs;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 80016a8:	4f0d      	ldr	r7, [pc, #52]	; (80016e0 <eMBMasterRegInputCB+0x74>)
    {
        iRegIndex = usAddress - usRegInStart;
		xtinputRegIndex = iRegIndex;
        while (usNRegs > 0)
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80016aa:	f816 4c02 	ldrb.w	r4, [r6, #-2]
	MasterDestAddress = ucMBMasterGetDestAddress();
	printf("MasterDestAddress: %d\n", MasterDestAddress);
	
	xtinputNRegs = usNRegs;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 80016ae:	1e41      	subs	r1, r0, #1
 80016b0:	f44f 6e96 	mov.w	lr, #1200	; 0x4b0
 80016b4:	fb0e 7101 	mla	r1, lr, r1, r7
    {
        iRegIndex = usAddress - usRegInStart;
		xtinputRegIndex = iRegIndex;
        while (usNRegs > 0)
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 80016b8:	0224      	lsls	r4, r4, #8
 80016ba:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 80016be:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80016c2:	433c      	orrs	r4, r7
 80016c4:	f821 4013 	strh.w	r4, [r1, r3, lsl #1]
 80016c8:	462b      	mov	r3, r5
 80016ca:	e7e7      	b.n	800169c <eMBMasterRegInputCB+0x30>
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegInputCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs)
{
	eMBErrorCode    eStatus = MB_ENOERR;
 80016cc:	2000      	movs	r0, #0
 80016ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80016d0:	2001      	movs	r0, #1
    }

    return eStatus;
}
 80016d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d4:	080094db 	.word	0x080094db
 80016d8:	200053be 	.word	0x200053be
 80016dc:	200053c0 	.word	0x200053c0
 80016e0:	200008b4 	.word	0x200008b4

080016e4 <eMBMasterRegHoldingCB>:
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t *        pusRegHoldingBuf;
    uint16_t          REG_HOLDING_START;
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <eMBMasterRegHoldingCB+0x5c>)
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80016e8:	460c      	mov	r4, r1
    uint16_t *        pusRegHoldingBuf;
    uint16_t          REG_HOLDING_START;
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;
 80016ea:	801a      	strh	r2, [r3, #0]
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
 80016ec:	4615      	mov	r5, r2
 80016ee:	4607      	mov	r7, r0
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80016f0:	f000 fcf4 	bl	80020dc <ucMBMasterGetDestAddress>
    usRegHoldStart = usMRegHoldStart;
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 80016f4:	1e63      	subs	r3, r4, #1
 80016f6:	b29b      	uxth	r3, r3

    if ((usAddress >= REG_HOLDING_START)
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80016f8:	195a      	adds	r2, r3, r5
 80016fa:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 80016fe:	dc1d      	bgt.n	800173c <eMBMasterRegHoldingCB+0x58>
    {
        iRegIndex = usAddress - usRegHoldStart;
		xtholdingRegIndex = iRegIndex;
 8001700:	4a10      	ldr	r2, [pc, #64]	; (8001744 <eMBMasterRegHoldingCB+0x60>)
 8001702:	8013      	strh	r3, [r2, #0]
 8001704:	192a      	adds	r2, r5, r4
 8001706:	b292      	uxth	r2, r2
 8001708:	1c5e      	adds	r6, r3, #1
 800170a:	b2b6      	uxth	r6, r6
                usNRegs--;
            }
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
 800170c:	4296      	cmp	r6, r2
 800170e:	f107 0702 	add.w	r7, r7, #2
 8001712:	d011      	beq.n	8001738 <eMBMasterRegHoldingCB+0x54>
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 8001714:	490c      	ldr	r1, [pc, #48]	; (8001748 <eMBMasterRegHoldingCB+0x64>)
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001716:	f817 5c02 	ldrb.w	r5, [r7, #-2]
    uint16_t          REG_HOLDING_NREGS;
    uint16_t          usRegHoldStart;
	
	xtholdingNRegs = usNRegs;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 800171a:	1e44      	subs	r4, r0, #1
 800171c:	f44f 6e96 	mov.w	lr, #1200	; 0x4b0
 8001720:	fb0e 1404 	mla	r4, lr, r4, r1
            break;
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 8001724:	022d      	lsls	r5, r5, #8
 8001726:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 800172a:	f817 1c01 	ldrb.w	r1, [r7, #-1]
 800172e:	430d      	orrs	r5, r1
 8001730:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8001734:	4633      	mov	r3, r6
 8001736:	e7e7      	b.n	8001708 <eMBMasterRegHoldingCB+0x24>
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegHoldingCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNRegs, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8001738:	2000      	movs	r0, #0
 800173a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800173c:	2001      	movs	r0, #1
    }
    return eStatus;
}
 800173e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001740:	200053b4 	.word	0x200053b4
 8001744:	200053c2 	.word	0x200053c2
 8001748:	200053c4 	.word	0x200053c4

0800174c <eMBMasterRegCoilsCB>:
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 800174c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
	xtCoilNRegs = iNReg;
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <eMBMasterRegCoilsCB+0x78>)
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
 8001752:	08d7      	lsrs	r7, r2, #3
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 8001754:	460d      	mov	r5, r1
 8001756:	4614      	mov	r4, r2
    uint8_t *         pucCoilBuf;
    uint16_t          COIL_START;
    uint16_t          COIL_NCOILS;
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
 8001758:	1c7a      	adds	r2, r7, #1
	xtCoilNRegs = iNReg;
 800175a:	801a      	strh	r2, [r3, #0]
  * @param	eMode
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
 800175c:	4606      	mov	r6, r0
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
	xtCoilNRegs = iNReg;

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 800175e:	f000 fcbd 	bl	80020dc <ucMBMasterGetDestAddress>

    /* if mode is read,the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;

    /* it already plus one in modbus function method. */
    usAddress--;
 8001762:	1e69      	subs	r1, r5, #1
 8001764:	b289      	uxth	r1, r1

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
 8001766:	190b      	adds	r3, r1, r4
 8001768:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800176c:	dc27      	bgt.n	80017be <eMBMasterRegCoilsCB+0x72>
    uint16_t          usCoilStart;
	
    iNReg =  usNCoils / 8 + 1;
	xtCoilNRegs = iNReg;

    pucCoilBuf = ucMCoilBuf[ucMBMasterGetDestAddress() - 1];
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <eMBMasterRegCoilsCB+0x7c>)
 8001770:	3801      	subs	r0, #1
 8001772:	f04f 084b 	mov.w	r8, #75	; 0x4b
 8001776:	fb08 3800 	mla	r8, r8, r0, r3

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
		xtCoilRegIndex = iRegIndex;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <eMBMasterRegCoilsCB+0x80>)
    usAddress--;

    if ((usAddress >= COIL_START)
            && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
    {
        iRegIndex = (uint16_t) (usAddress - usCoilStart) / 8;
 800177c:	08c8      	lsrs	r0, r1, #3
		xtCoilRegIndex = iRegIndex;
 800177e:	8018      	strh	r0, [r3, #0]
        iRegBitIndex = (uint16_t) (usAddress - usCoilStart) % 8;
 8001780:	f001 0507 	and.w	r5, r1, #7
 8001784:	eb07 0b00 	add.w	fp, r7, r0
 8001788:	46b2      	mov	sl, r6
            *pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
            break;

        /* write current coil values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (iNReg > 1)
 800178a:	4558      	cmp	r0, fp
 800178c:	d00c      	beq.n	80017a8 <eMBMasterRegCoilsCB+0x5c>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
 800178e:	f100 0901 	add.w	r9, r0, #1
 8001792:	fa1f f989 	uxth.w	r9, r9
 8001796:	4440      	add	r0, r8
 8001798:	4629      	mov	r1, r5
 800179a:	2208      	movs	r2, #8
 800179c:	f81a 3b01 	ldrb.w	r3, [sl], #1
 80017a0:	f000 fee2 	bl	8002568 <xMBUtilSetBits>
 80017a4:	4648      	mov	r0, r9
 80017a6:	e7f0      	b.n	800178a <eMBMasterRegCoilsCB+0x3e>
                iNReg--;
            }
            /* last coils */
            usNCoils = usNCoils % 8;
            /* xMBUtilSetBits has bug when ucNBits is zero */
            if (usNCoils != 0)
 80017a8:	f014 0207 	ands.w	r2, r4, #7
 80017ac:	d004      	beq.n	80017b8 <eMBMasterRegCoilsCB+0x6c>
            {
                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils,
 80017ae:	4440      	add	r0, r8
 80017b0:	4629      	mov	r1, r5
 80017b2:	5df3      	ldrb	r3, [r6, r7]
 80017b4:	f000 fed8 	bl	8002568 <xMBUtilSetBits>
  * @retval	eMBErrorCode
  */
eMBErrorCode
eMBMasterRegCoilsCB(uint8_t* pucRegBuffer, uint16_t usAddress, uint16_t usNCoils, eMBRegisterMode eMode)
{
    eMBErrorCode    eStatus = MB_ENOERR;
 80017b8:	2000      	movs	r0, #0
 80017ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            break;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80017be:	2001      	movs	r0, #1
 80017c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017c4:	200053bc 	.word	0x200053bc
 80017c8:	2000a19c 	.word	0x2000a19c
 80017cc:	200008b2 	.word	0x200008b2

080017d0 <eMBMasterRegDiscreteCB>:
{
    ( void )pucRegBuffer;
    ( void )usAddress;
    ( void )usNDiscrete;
    return MB_ENOREG;
}
 80017d0:	2001      	movs	r0, #1
 80017d2:	4770      	bx	lr

080017d4 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART (GNU)
  * @param  None
  * @retval None
  */
int __io_putchar(int ch){
 80017d4:	b510      	push	{r4, lr}
 80017d6:	4604      	mov	r4, r0
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */

	Debug_ITMDebugOutputChar(ch); // SWV
 80017d8:	b2c0      	uxtb	r0, r0
 80017da:	f7ff fd5d 	bl	8001298 <Debug_ITMDebugOutputChar>

  return(ch);
}
 80017de:	4620      	mov	r0, r4
 80017e0:	bd10      	pop	{r4, pc}

080017e2 <__io_getchar>:
int __io_getchar(void){
  /* Place your implementation of fgetc here */
  /* e.g. read a character from the USART */

  return((int)-1);
}
 80017e2:	f04f 30ff 	mov.w	r0, #4294967295
 80017e6:	4770      	bx	lr

080017e8 <assert_failed>:
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line){
 80017e8:	b508      	push	{r3, lr}
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
  printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 80017ee:	4802      	ldr	r0, [pc, #8]	; (80017f8 <assert_failed+0x10>)
 80017f0:	4619      	mov	r1, r3
 80017f2:	f002 fd01 	bl	80041f8 <printf>

  while(1); /* Infinite loop */
 80017f6:	e7fe      	b.n	80017f6 <assert_failed+0xe>
 80017f8:	080094f2 	.word	0x080094f2

080017fc <HAL_TIM_Base_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017fc:	b508      	push	{r3, lr}
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_4_CLK_ENABLE();
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_TIM_Base_MspInit+0x38>)
 8001800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001802:	f042 0204 	orr.w	r2, r2, #4
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
  TIMx_5_CLK_ENABLE();
 8001808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMx_4_IRQn, 4, 0);
 8001810:	201e      	movs	r0, #30
 8001812:	2104      	movs	r1, #4
 8001814:	2200      	movs	r2, #0
 8001816:	f001 fdcf 	bl	80033b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIMx_5_IRQn, 4, 1);
 800181a:	2032      	movs	r0, #50	; 0x32
 800181c:	2104      	movs	r1, #4
 800181e:	2201      	movs	r2, #1
 8001820:	f001 fdca 	bl	80033b8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_4_IRQn);
 8001824:	201e      	movs	r0, #30
 8001826:	f001 fe09 	bl	800343c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIMx_5_IRQn);
 800182a:	2032      	movs	r0, #50	; 0x32
}
 800182c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(TIMx_4_IRQn, 4, 0);
  HAL_NVIC_SetPriority(TIMx_5_IRQn, 4, 1);
  
  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_4_IRQn);
  HAL_NVIC_EnableIRQ(TIMx_5_IRQn);
 8001830:	f001 be04 	b.w	800343c <HAL_NVIC_EnableIRQ>
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_UART_MspInit>:
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_UART_MspInit+0x60>)
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183c:	f042 0201 	orr.w	r2, r2, #1
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001840:	b570      	push	{r4, r5, r6, lr}
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
  USARTx_RX_GPIO_CLK_ENABLE();
 8001844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001846:	4d15      	ldr	r5, [pc, #84]	; (800189c <HAL_UART_MspInit+0x64>)
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Enable USART2 clock */
  USARTx_CLK_ENABLE(); 
 800184e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001850:	b086      	sub	sp, #24
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
  USARTx_RX_GPIO_CLK_ENABLE();
  /* Enable USART2 clock */
  USARTx_CLK_ENABLE(); 
 8001852:	f042 0210 	orr.w	r2, r2, #16
 8001856:	645a      	str	r2, [r3, #68]	; 0x44
  /* Enable DMA1 clock */
  //DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800185e:	2401      	movs	r4, #1
  //DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001862:	2607      	movs	r6, #7
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001864:	4628      	mov	r0, r5
 8001866:	a901      	add	r1, sp, #4
  //DMAx_CLK_ENABLE();   
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001868:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800186a:	9304      	str	r3, [sp, #16]
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800186c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800186e:	9605      	str	r6, [sp, #20]
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001870:	f002 fafa 	bl	8003e68 <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001874:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001878:	4628      	mov	r0, r5
 800187a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800187c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800187e:	9605      	str	r6, [sp, #20]
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001880:	f002 faf2 	bl	8003e68 <HAL_GPIO_Init>
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  //HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 2, 0);   
  //HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
  
  /* NVIC configuration for USART TC interrupt */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8001884:	2100      	movs	r1, #0
 8001886:	4622      	mov	r2, r4
 8001888:	2025      	movs	r0, #37	; 0x25
 800188a:	f001 fd95 	bl	80033b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800188e:	2025      	movs	r0, #37	; 0x25
 8001890:	f001 fdd4 	bl	800343c <HAL_NVIC_EnableIRQ>
}
 8001894:	b006      	add	sp, #24
 8001896:	bd70      	pop	{r4, r5, r6, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000

080018a0 <HAL_I2C_MspInit>:
  *           - DMA configuration for transmission request by peripheral 
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 80018a4:	4c26      	ldr	r4, [pc, #152]	; (8001940 <HAL_I2C_MspInit+0xa0>)
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80018a6:	4e27      	ldr	r6, [pc, #156]	; (8001944 <HAL_I2C_MspInit+0xa4>)
  
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
 80018a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	6323      	str	r3, [r4, #48]	; 0x30
  I2Cx_SDA_GPIO_CLK_ENABLE();
 80018b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	6323      	str	r3, [r4, #48]	; 0x30
  /* PORTC-Reset pin bus enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  *           - DMA configuration for transmission request by peripheral 
  *           - NVIC configuration for DMA interrupt request enable
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c){
 80018ba:	b087      	sub	sp, #28
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 80018bc:	f04f 0904 	mov.w	r9, #4
  /*##-1- Enable GPIO Clocks #################################################*/
  /* Enable GPIO TX/RX clock */
  I2Cx_SCL_GPIO_CLK_ENABLE();
  I2Cx_SDA_GPIO_CLK_ENABLE();
  /* PORTC-Reset pin bus enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	6323      	str	r3, [r4, #48]	; 0x30

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80018c6:	2501      	movs	r5, #1


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80018c8:	2312      	movs	r3, #18
  __HAL_RCC_GPIOC_CLK_ENABLE();


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 80018ca:	f04f 0840 	mov.w	r8, #64	; 0x40
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80018ce:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80018d0:	4630      	mov	r0, r6
 80018d2:	eb0d 0109 	add.w	r1, sp, r9


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80018d6:	9302      	str	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();


  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
 80018d8:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80018dc:	9704      	str	r7, [sp, #16]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* I2C TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = I2Cx_SCL_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80018de:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
 80018e0:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80018e4:	f002 fac0 	bl	8003e68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80018e8:	462a      	mov	r2, r5
 80018ea:	4630      	mov	r0, r6
 80018ec:	4641      	mov	r1, r8
 80018ee:	f002 fbed 	bl	80040cc <HAL_GPIO_WritePin>

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 80018f2:	f44f 7800 	mov.w	r8, #512	; 0x200
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80018f6:	4630      	mov	r0, r6
 80018f8:	eb0d 0109 	add.w	r1, sp, r9
  GPIO_InitStruct.Alternate = I2Cx_SCL_AF;
  HAL_GPIO_Init(I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

  /* I2C RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = I2Cx_SDA_PIN;
 80018fc:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
 8001900:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001904:	f002 fab0 	bl	8003e68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001908:	462a      	mov	r2, r5
 800190a:	4630      	mov	r0, r6
 800190c:	4641      	mov	r1, r8
 800190e:	f002 fbdd 	bl	80040cc <HAL_GPIO_WritePin>
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001912:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001914:	4f0c      	ldr	r7, [pc, #48]	; (8001948 <HAL_I2C_MspInit+0xa8>)
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001918:	2608      	movs	r6, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	4638      	mov	r0, r7
 800191c:	eb0d 0109 	add.w	r1, sp, r9
  GPIO_InitStruct.Alternate = I2Cx_SDA_AF;
  HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
  
  /* Init Reset Pin Touch */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001920:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f002 faa0 	bl	8003e68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001928:	4638      	mov	r0, r7
 800192a:	4631      	mov	r1, r6
 800192c:	462a      	mov	r2, r5
 800192e:	f002 fbcd 	bl	80040cc <HAL_GPIO_WritePin>
 
  /*##-3- Enable peripheral Clock ############################################*/
  /* Enable I2C1 clock */
  I2Cx_CLK_ENABLE();
 8001932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001938:	6423      	str	r3, [r4, #64]	; 0x40
  
}
 800193a:	b007      	add	sp, #28
 800193c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400
 8001948:	40020800 	.word	0x40020800

0800194c <HAL_SRAM_MspInit>:
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_SRAM_MspInit+0x84>)
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800194e:	4821      	ldr	r0, [pc, #132]	; (80019d4 <HAL_SRAM_MspInit+0x88>)
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 8001950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001952:	f042 0201 	orr.w	r2, r2, #1
/**
  * @brief SRAM init
  * param  handle to sram
  * retval None
  */
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 8001956:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO -> PUT RESET ON GPIO PIN SO WE CAN RESET DISPLAY
	// now reset is on NRST pin on the STM32F4 discovery
	GPIO_InitTypeDef GPIO_InitStructure;

	// Clock Enable FSMC
	__HAL_RCC_FSMC_CLK_ENABLE();
 8001958:	639a      	str	r2, [r3, #56]	; 0x38

	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195c:	f042 0208 	orr.w	r2, r2, #8
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001964:	f042 0210 	orr.w	r2, r2, #16
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
/**
  * @brief SRAM init
  * param  handle to sram
  * retval None
  */
void HAL_SRAM_MspInit(SRAM_HandleTypeDef * hsram){
 800196c:	b087      	sub	sp, #28
	__HAL_RCC_FSMC_CLK_ENABLE();

	// Clock Enable Port-D and Port-E
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	f042 0202 	orr.w	r2, r2, #2
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001974:	2402      	movs	r4, #2
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
 8001976:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800197a:	2703      	movs	r7, #3
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800197c:	2600      	movs	r6, #0
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 800197e:	250c      	movs	r5, #12
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001980:	a901      	add	r1, sp, #4
	// PD9=FSMC_D14->DB16
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
 8001982:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001984:	9603      	str	r6, [sp, #12]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8001986:	9505      	str	r5, [sp, #20]
	// PD10=FSMC_D15->DB17
	// PD11=FSMC_A16->RS
	// PD14=FSMC_D0->DB0
	// PD15=FSMC_D1->DB1
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001988:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800198a:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800198c:	f002 fa6c 	bl	8003e68 <HAL_GPIO_Init>
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001990:	9603      	str	r6, [sp, #12]
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001992:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8001996:	f64f 7380 	movw	r3, #65408	; 0xff80
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800199a:	a901      	add	r1, sp, #4
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800199c:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <HAL_SRAM_MspInit+0x8c>)
	// PE11=FSMC_D8->DB10
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80019a2:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80019a4:	9505      	str	r5, [sp, #20]
	// PE12=FSMC_D9->DB11
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80019a6:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);

	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2501      	movs	r5, #1
	// PE13=FSMC_D10->DB12
	// PE14=FSMC_D11->DB13
	// PE15=FSMC_D12->DB14
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80019aa:	9704      	str	r7, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80019ac:	f002 fa5c 	bl	8003e68 <HAL_GPIO_Init>
	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
	GPIO_InitStructure.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019b0:	4630      	mov	r0, r6
 80019b2:	a901      	add	r1, sp, #4
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);

	/* Init Reset Pin Display */
	GPIO_InitStructure.Pin = GPIO_PIN_1;
 80019b4:	9401      	str	r4, [sp, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80019b8:	9404      	str	r4, [sp, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80019ba:	9503      	str	r5, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80019bc:	f002 fa54 	bl	8003e68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80019c0:	4630      	mov	r0, r6
 80019c2:	4621      	mov	r1, r4
 80019c4:	462a      	mov	r2, r5
 80019c6:	f002 fb81 	bl	80040cc <HAL_GPIO_WritePin>
 
}
 80019ca:	b007      	add	sp, #28
 80019cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 80019dc:	4770      	bx	lr

080019de <_close>:
    }
}

int _close(int file) {
    return -1;
}
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	4770      	bx	lr

080019e4 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
    st->st_mode = S_IFCHR;
 80019e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e8:	604b      	str	r3, [r1, #4]
    return 0;
}
 80019ea:	2000      	movs	r0, #0
 80019ec:	4770      	bx	lr

080019ee <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
    return 1;
}
 80019ee:	2001      	movs	r0, #1
 80019f0:	4770      	bx	lr
	...

080019f4 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
    switch (file){
 80019f4:	2802      	cmp	r0, #2
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 80019f6:	bf81      	itttt	hi
 80019f8:	4b03      	ldrhi	r3, [pc, #12]	; (8001a08 <_isatty+0x14>)
 80019fa:	2209      	movhi	r2, #9
        return 0;
 80019fc:	2000      	movhi	r0, #0
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
    default:
        //errno = ENOTTY;
        errno = EBADF;
 80019fe:	601a      	strhi	r2, [r3, #0]
int _isatty(int file) {
    switch (file){
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
 8001a00:	bf98      	it	ls
 8001a02:	2001      	movls	r0, #1
    default:
        //errno = ENOTTY;
        errno = EBADF;
        return 0;
    }
}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2000a774 	.word	0x2000a774

08001a0c <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
    errno = EINVAL;
 8001a0c:	4b02      	ldr	r3, [pc, #8]	; (8001a18 <_kill+0xc>)
 8001a0e:	2216      	movs	r2, #22
 8001a10:	601a      	str	r2, [r3, #0]
    return (-1);
}
 8001a12:	f04f 30ff 	mov.w	r0, #4294967295
 8001a16:	4770      	bx	lr
 8001a18:	2000a774 	.word	0x2000a774

08001a1c <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
    return 0;
}
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	4770      	bx	lr

08001a20 <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	460e      	mov	r6, r1
 8001a24:	4614      	mov	r4, r2
    int n;
    int num = 0;
    switch (file) {
 8001a26:	b940      	cbnz	r0, 8001a3a <_read+0x1a>
 8001a28:	460d      	mov	r5, r1
 8001a2a:	1bab      	subs	r3, r5, r6
    case STDIN_FILENO:
        for (n = 0; n < len; n++) {
 8001a2c:	42a3      	cmp	r3, r4
 8001a2e:	da0a      	bge.n	8001a46 <_read+0x26>
            *ptr++ = __io_getchar();
 8001a30:	f7ff fed7 	bl	80017e2 <__io_getchar>
 8001a34:	f805 0b01 	strb.w	r0, [r5], #1
 8001a38:	e7f7      	b.n	8001a2a <_read+0xa>
            num++;
        }
        break;
    default:
        errno = EBADF;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <_read+0x2c>)
 8001a3c:	2209      	movs	r2, #9
 8001a3e:	601a      	str	r2, [r3, #0]
        return -1;
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    }
    return num;
}
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
 8001a4c:	2000a774 	.word	0x2000a774

08001a50 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
 8001a50:	3801      	subs	r0, #1
 8001a52:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	460e      	mov	r6, r1
 8001a58:	4614      	mov	r4, r2
    int n;
    switch (file) {
 8001a5a:	d80a      	bhi.n	8001a72 <_write+0x22>
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	1bab      	subs	r3, r5, r6
    case STDOUT_FILENO: /*stdout*/
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
 8001a60:	42a3      	cmp	r3, r4
 8001a62:	da04      	bge.n	8001a6e <_write+0x1e>
					__io_putchar(*ptr++);
 8001a64:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001a68:	f7ff feb4 	bl	80017d4 <__io_putchar>
 8001a6c:	e7f7      	b.n	8001a5e <_write+0xe>
 8001a6e:	4620      	mov	r0, r4
 8001a70:	bd70      	pop	{r4, r5, r6, pc}
        }
        break;
    default:
        errno = EBADF;
 8001a72:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <_write+0x30>)
 8001a74:	2209      	movs	r2, #9
 8001a76:	601a      	str	r2, [r3, #0]
        return -1;
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return len;
}
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000a774 	.word	0x2000a774

08001a84 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8001a84:	b508      	push	{r3, lr}
    _write(1, "exit", 4);
 8001a86:	2001      	movs	r0, #1
 8001a88:	4902      	ldr	r1, [pc, #8]	; (8001a94 <_exit+0x10>)
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	f7ff ffe0 	bl	8001a50 <_write>
    while (1) {
        ;
    }
 8001a90:	e7fe      	b.n	8001a90 <_exit+0xc>
 8001a92:	bf00      	nop
 8001a94:	0800951f 	.word	0x0800951f

08001a98 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8001a98:	b508      	push	{r3, lr}

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <_sbrk+0x38>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	b90a      	cbnz	r2, 8001aa4 <_sbrk+0xc>
        heap_end = &_ebss;
 8001aa0:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <_sbrk+0x3c>)
 8001aa2:	601a      	str	r2, [r3, #0]
    }
    prev_heap_end = heap_end;
 8001aa4:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001aa6:	f3ef 8208 	mrs	r2, MSP

char * stack = (char*) __get_MSP();

     if (heap_end + incr >  stack)
 8001aaa:	4418      	add	r0, r3
 8001aac:	4290      	cmp	r0, r2
 8001aae:	d90a      	bls.n	8001ac6 <_sbrk+0x2e>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
 8001ab0:	4909      	ldr	r1, [pc, #36]	; (8001ad8 <_sbrk+0x40>)
 8001ab2:	2219      	movs	r2, #25
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f7ff ffcb 	bl	8001a50 <_write>
         errno = ENOMEM;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x44>)
 8001abc:	220c      	movs	r2, #12
 8001abe:	601a      	str	r2, [r3, #0]
         return  (caddr_t) -1;
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	bd08      	pop	{r3, pc}
         //abort ();
     }

    heap_end += incr;
 8001ac6:	4a02      	ldr	r2, [pc, #8]	; (8001ad0 <_sbrk+0x38>)
 8001ac8:	6010      	str	r0, [r2, #0]
    return (caddr_t) prev_heap_end;
 8001aca:	4618      	mov	r0, r3

}
 8001acc:	bd08      	pop	{r3, pc}
 8001ace:	bf00      	nop
 8001ad0:	20009ec4 	.word	0x20009ec4
 8001ad4:	2000a778 	.word	0x2000a778
 8001ad8:	08009524 	.word	0x08009524
 8001adc:	2000a774 	.word	0x2000a774

08001ae0 <xMBMasterPortEventInit>:
extern bool		xtNeedPoll;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
    xEventInQueue = FALSE;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <xMBMasterPortEventInit+0xc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    return TRUE;
}
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20009ec8 	.word	0x20009ec8

08001af0 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <xMBMasterPortEventPost+0x10>)
 8001af2:	2301      	movs	r3, #1
 8001af4:	7013      	strb	r3, [r2, #0]
    eQueuedEvent = eEvent;
 8001af6:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <xMBMasterPortEventPost+0x14>)
 8001af8:	7010      	strb	r0, [r2, #0]
    return TRUE;
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20009ec8 	.word	0x20009ec8
 8001b04:	20009ec9 	.word	0x20009ec9

08001b08 <xMBMasterPortEventGet>:
BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
 8001b08:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <xMBMasterPortEventGet+0x18>)
 8001b0a:	7813      	ldrb	r3, [r2, #0]
 8001b0c:	b133      	cbz	r3, 8001b1c <xMBMasterPortEventGet+0x14>
    {
        *eEvent = eQueuedEvent;
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <xMBMasterPortEventGet+0x1c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	8003      	strh	r3, [r0, #0]
        xEventInQueue = FALSE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	7013      	strb	r3, [r2, #0]
        xEventHappened = TRUE;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	4770      	bx	lr
}

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
 8001b1c:	4618      	mov	r0, r3
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
 8001b1e:	4770      	bx	lr
 8001b20:	20009ec8 	.word	0x20009ec8
 8001b24:	20009ec9 	.word	0x20009ec9

08001b28 <xMBMasterRunResTake>:
{
    /*If waiting time is -1 .It will wait forever */
    //return rt_sem_take(&xMasterRunRes, lTimeOut) ? FALSE : TRUE ;
	
	return TRUE;
}
 8001b28:	2001      	movs	r0, #1
 8001b2a:	4770      	bx	lr

08001b2c <vMBMasterRunResRelease>:
 *
 */
void vMBMasterRunResRelease( void )
{
    /* release resource */
    xtNeedPoll = true;
 8001b2c:	4b01      	ldr	r3, [pc, #4]	; (8001b34 <vMBMasterRunResRelease+0x8>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	4770      	bx	lr
 8001b34:	20000004 	.word	0x20000004

08001b38 <vMBMasterErrorCBRespondTimeout>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <vMBMasterErrorCBRespondTimeout+0x10>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8001b3e:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <vMBMasterErrorCBRespondTimeout+0x14>)
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20009ec8 	.word	0x20009ec8
 8001b4c:	20009ec9 	.word	0x20009ec9

08001b50 <vMBMasterErrorCBReceiveData>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <vMBMasterErrorCBReceiveData+0x10>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8001b56:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <vMBMasterErrorCBReceiveData+0x14>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20009ec8 	.word	0x20009ec8
 8001b64:	20009ec9 	.word	0x20009ec9

08001b68 <vMBMasterErrorCBExecuteFunction>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <vMBMasterErrorCBExecuteFunction+0x10>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8001b6e:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <vMBMasterErrorCBExecuteFunction+0x14>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20009ec8 	.word	0x20009ec8
 8001b7c:	20009ec9 	.word	0x20009ec9

08001b80 <vMBMasterCBRequestScuuess>:
}

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
    xEventInQueue = TRUE;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <vMBMasterCBRequestScuuess+0x10>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8001b86:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <vMBMasterCBRequestScuuess+0x14>)
 8001b88:	2220      	movs	r2, #32
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20009ec8 	.word	0x20009ec8
 8001b94:	20009ec9 	.word	0x20009ec9

08001b98 <vMBMasterPortSerialEnable>:
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBMasterPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	4c15      	ldr	r4, [pc, #84]	; (8001bf0 <vMBMasterPortSerialEnable+0x58>)
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8001b9c:	6822      	ldr	r2, [r4, #0]
__IO ITStatus UartReady_Transmit = RESET;
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBMasterPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8001b9e:	460d      	mov	r5, r1
    if( xRxEnable )
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8001ba0:	68d3      	ldr	r3, [r2, #12]
__IO ITStatus UartReady_Receive = RESET;

/* ----------------------- Start implementation -----------------------------*/
void vMBMasterPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
    if( xRxEnable )
 8001ba2:	b130      	cbz	r0, 8001bb2 <vMBMasterPortSerialEnable+0x1a>
    {
		/* Enable the UART Data Register not empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_RXNE);
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	60d3      	str	r3, [r2, #12]
		printf("Receive enabled\n");
 8001baa:	4812      	ldr	r0, [pc, #72]	; (8001bf4 <vMBMasterPortSerialEnable+0x5c>)
 8001bac:	f002 fb66 	bl	800427c <puts>
 8001bb0:	e002      	b.n	8001bb8 <vMBMasterPortSerialEnable+0x20>
    }
    else
    {
		/* Disable the UART Data Register not empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_RXNE);
 8001bb2:	f023 0320 	bic.w	r3, r3, #32
 8001bb6:	60d3      	str	r3, [r2, #12]
    }
    if( xTxEnable )
 8001bb8:	b17d      	cbz	r5, 8001bda <vMBMasterPortSerialEnable+0x42>
    {
		/*	Enable DE transmit signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	480e      	ldr	r0, [pc, #56]	; (8001bf8 <vMBMasterPortSerialEnable+0x60>)
 8001bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc2:	f002 fa83 	bl	80040cc <HAL_GPIO_WritePin>
		/* Enable the UART Transmit data register empty Interrupt */
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TXE);
 8001bc6:	6822      	ldr	r2, [r4, #0]
 8001bc8:	68d3      	ldr	r3, [r2, #12]
 8001bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bce:	60d3      	str	r3, [r2, #12]
 * xMBPortSerialPutByte( ) to send the character.
 */
static void
prvvUARTTxReadyISR( void )
{
    pxMBMasterFrameCBTransmitterEmpty();
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <vMBMasterPortSerialEnable+0x64>)
		/* Disable the UART Transmit data register empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_TXE);
		/* Enable the UART Transmit Complete Interrupt */    
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TC);
    }
}
 8001bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * xMBPortSerialPutByte( ) to send the character.
 */
static void
prvvUARTTxReadyISR( void )
{
    pxMBMasterFrameCBTransmitterEmpty();
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4718      	bx	r3
        prvvUARTTxReadyISR();
    }
    else
    {
		/* Disable the UART Transmit data register empty Interrupt */
		__HAL_UART_DISABLE_IT(&UartHandle, UART_IT_TXE);
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be2:	60da      	str	r2, [r3, #12]
		/* Enable the UART Transmit Complete Interrupt */    
		__HAL_UART_ENABLE_IT(&UartHandle, UART_IT_TC);
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000a15c 	.word	0x2000a15c
 8001bf4:	0800953e 	.word	0x0800953e
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	2000a768 	.word	0x2000a768

08001c00 <xMBMasterPortSerialInit>:
	
	//Uart_Error = HAL_UART_GetError(&UartHandle);
	//printf("Uart_Error: %d\n", Uart_Error);

    return bInitialized;
}
 8001c00:	2001      	movs	r0, #1
 8001c02:	4770      	bx	lr

08001c04 <xMBMasterPortSerialPutByte>:
{
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	huart->Instance->DR = (uint8_t)ucByte;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <xMBMasterPortSerialPutByte+0xc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6058      	str	r0, [r3, #4]
    return TRUE;
}
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	2000a15c 	.word	0x2000a15c

08001c14 <xMBMasterPortSerialGetByte>:
{
	UART_HandleTypeDef *huart;
	
	huart = &UartHandle;
	
	*pucByte = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <xMBMasterPortSerialGetByte+0xc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	7003      	strb	r3, [r0, #0]
	
    return TRUE;
}
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	4770      	bx	lr
 8001c20:	2000a15c 	.word	0x2000a15c

08001c24 <HAL_UART_ErrorCallback>:
  * @param  UartHandle: UART handle
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
 8001c24:	b510      	push	{r4, lr}
 8001c26:	4604      	mov	r4, r0
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <HAL_UART_ErrorCallback+0x18>)
 8001c2a:	f002 fb27 	bl	800427c <puts>
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 8001c2e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <HAL_UART_ErrorCallback+0x1c>)
}
 8001c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle){
  /* Transfer error in reception/transmission process */
	printf("USART bus Error\n"); 
	printf("Uart Error Code: %d\n", UartHandle->ErrorCode);
 8001c36:	f002 badf 	b.w	80041f8 <printf>
 8001c3a:	bf00      	nop
 8001c3c:	08009569 	.word	0x08009569
 8001c40:	08009579 	.word	0x08009579

08001c44 <USART1_IRQHandler>:
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8001c44:	b530      	push	{r4, r5, lr}
	bool            xtNeedPoll;
	UART_HandleTypeDef *huart;

	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001c46:	4c38      	ldr	r4, [pc, #224]	; (8001d28 <USART1_IRQHandler+0xe4>)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8001c4c:	68da      	ldr	r2, [r3, #12]
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001c4e:	07c9      	lsls	r1, r1, #31
  * @brief  This function handles USARTx interrupt request.
  * @param  None
  * @retval None
  */
void USARTx_IRQHandler(void)
{
 8001c50:	b085      	sub	sp, #20
	huart = &UartHandle;
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
	/* UART parity error interrupt occurred ------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001c52:	d50a      	bpl.n	8001c6a <USART1_IRQHandler+0x26>
 8001c54:	05d2      	lsls	r2, r2, #23
 8001c56:	d508      	bpl.n	8001c6a <USART1_IRQHandler+0x26>
	{
		__HAL_UART_CLEAR_PEFLAG(huart);
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	9200      	str	r2, [sp, #0]
 8001c60:	9a00      	ldr	r2, [sp, #0]
		
		huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c62:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c64:	f042 0201 	orr.w	r2, r2, #1
 8001c68:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001c6a:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001c6c:	695a      	ldr	r2, [r3, #20]
	/* UART frame error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001c6e:	078d      	lsls	r5, r1, #30
 8001c70:	d50a      	bpl.n	8001c88 <USART1_IRQHandler+0x44>
 8001c72:	07d0      	lsls	r0, r2, #31
 8001c74:	d508      	bpl.n	8001c88 <USART1_IRQHandler+0x44>
	{
		__HAL_UART_CLEAR_FEFLAG(huart);
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	9201      	str	r2, [sp, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	9201      	str	r2, [sp, #4]
 8001c7e:	9a01      	ldr	r2, [sp, #4]

		huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001c82:	f042 0204 	orr.w	r2, r2, #4
 8001c86:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8001c88:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001c8a:	695a      	ldr	r2, [r3, #20]
	/* UART noise error interrupt occurred -------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001c8c:	0749      	lsls	r1, r1, #29
 8001c8e:	d50a      	bpl.n	8001ca6 <USART1_IRQHandler+0x62>
 8001c90:	07d5      	lsls	r5, r2, #31
 8001c92:	d508      	bpl.n	8001ca6 <USART1_IRQHandler+0x62>
	{ 
		__HAL_UART_CLEAR_NEFLAG(huart);
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	9202      	str	r2, [sp, #8]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	9202      	str	r2, [sp, #8]
 8001c9c:	9a02      	ldr	r2, [sp, #8]

		huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ca0:	f042 0202 	orr.w	r2, r2, #2
 8001ca4:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
  
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8001ca6:	6819      	ldr	r1, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001ca8:	695a      	ldr	r2, [r3, #20]
	/* UART Over-Run interrupt occurred ----------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001caa:	0708      	lsls	r0, r1, #28
 8001cac:	d50a      	bpl.n	8001cc4 <USART1_IRQHandler+0x80>
 8001cae:	07d1      	lsls	r1, r2, #31
 8001cb0:	d508      	bpl.n	8001cc4 <USART1_IRQHandler+0x80>
	{ 
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	9203      	str	r2, [sp, #12]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	9203      	str	r2, [sp, #12]
 8001cba:	9a03      	ldr	r2, [sp, #12]

		huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cbc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001cbe:	f042 0208 	orr.w	r2, r2, #8
 8001cc2:	63e2      	str	r2, [r4, #60]	; 0x3c
	}
	
	tmp1 = __HAL_UART_GET_FLAG(&UartHandle, UART_FLAG_RXNE);
 8001cc4:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(&UartHandle, UART_IT_RXNE);
 8001cc6:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Receiver ---------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001cc8:	0692      	lsls	r2, r2, #26
 8001cca:	d504      	bpl.n	8001cd6 <USART1_IRQHandler+0x92>
 8001ccc:	069d      	lsls	r5, r3, #26
 8001cce:	d502      	bpl.n	8001cd6 <USART1_IRQHandler+0x92>
	{
		pxMBMasterFrameCBByteReceived();
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <USART1_IRQHandler+0xe8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4798      	blx	r3
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001cda:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter ------------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001cdc:	0610      	lsls	r0, r2, #24
 8001cde:	d504      	bpl.n	8001cea <USART1_IRQHandler+0xa6>
 8001ce0:	0619      	lsls	r1, r3, #24
 8001ce2:	d502      	bpl.n	8001cea <USART1_IRQHandler+0xa6>
	{
		xtNeedPoll = pxMBMasterFrameCBTransmitterEmpty();
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <USART1_IRQHandler+0xec>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4798      	blx	r3
	}
	
	tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
	tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8001cee:	68db      	ldr	r3, [r3, #12]
	/* UART in mode Transmitter end --------------------------------------------*/
	if((tmp1 != RESET) && (tmp2 != RESET))
 8001cf0:	0652      	lsls	r2, r2, #25
 8001cf2:	d50d      	bpl.n	8001d10 <USART1_IRQHandler+0xcc>
 8001cf4:	065b      	lsls	r3, r3, #25
 8001cf6:	d50b      	bpl.n	8001d10 <USART1_IRQHandler+0xcc>
	{
		/*	Enable DE receive signal	*/
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	480e      	ldr	r0, [pc, #56]	; (8001d34 <USART1_IRQHandler+0xf0>)
 8001cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d00:	f002 f9e4 	bl	80040cc <HAL_GPIO_WritePin>
		/* Disable the UART Transmit Complete Interrupt */    
		__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <USART1_IRQHandler+0xe4>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68d3      	ldr	r3, [r2, #12]
 8001d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d0e:	60d3      	str	r3, [r2, #12]
	}
	
	if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d12:	4d05      	ldr	r5, [pc, #20]	; (8001d28 <USART1_IRQHandler+0xe4>)
 8001d14:	b133      	cbz	r3, 8001d24 <USART1_IRQHandler+0xe0>
	{
		HAL_UART_ErrorCallback(huart);
 8001d16:	4628      	mov	r0, r5
 8001d18:	f7ff ff84 	bl	8001c24 <HAL_UART_ErrorCallback>
		printf("Uart_ErrCode: %d\n", huart->ErrorCode);
 8001d1c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <USART1_IRQHandler+0xf4>)
 8001d20:	f002 fa6a 	bl	80041f8 <printf>
	}
}
 8001d24:	b005      	add	sp, #20
 8001d26:	bd30      	pop	{r4, r5, pc}
 8001d28:	2000a15c 	.word	0x2000a15c
 8001d2c:	2000a76c 	.word	0x2000a76c
 8001d30:	2000a768 	.word	0x2000a768
 8001d34:	40020800 	.word	0x40020800
 8001d38:	0800958e 	.word	0x0800958e

08001d3c <xMBMasterPortTimersInit>:
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortTimersInit( USHORT usTim1Timerout50us )
{
    return TRUE;
}
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	4770      	bx	lr

08001d40 <vMBMasterPortTimersT35Enable>:


void
vMBMasterPortTimersT35Enable()
{
 8001d40:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
 8001d42:	4c06      	ldr	r4, [pc, #24]	; (8001d5c <vMBMasterPortTimersT35Enable+0x1c>)
 8001d44:	4620      	mov	r0, r4
 8001d46:	f001 febd 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	2200      	movs	r2, #0
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer-5
 8001d4e:	4620      	mov	r0, r4

void
vMBMasterPortTimersT35Enable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer-5
}
 8001d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
vMBMasterPortTimersT35Enable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_5, 0);
	
	HAL_TIM_Base_Start_IT(&TimHandle_5);	// Enable Timer-5
 8001d56:	f001 be67 	b.w	8003a28 <HAL_TIM_Base_Start_IT>
 8001d5a:	bf00      	nop
 8001d5c:	2000a64c 	.word	0x2000a64c

08001d60 <vMBMasterPortTimersConvertDelayEnable>:
}

void 
vMBMasterPortTimersConvertDelayEnable()
{
 8001d60:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
 8001d62:	4c07      	ldr	r4, [pc, #28]	; (8001d80 <vMBMasterPortTimersConvertDelayEnable+0x20>)
 8001d64:	4620      	mov	r0, r4
 8001d66:	f001 fead 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	2200      	movs	r2, #0
	
	/* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8001d6e:	2002      	movs	r0, #2

void 
vMBMasterPortTimersConvertDelayEnable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
	
	/* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8001d72:	f000 fbd3 	bl	800251c <vMBMasterSetCurTimerMode>
	
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8001d76:	4620      	mov	r0, r4
}
 8001d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
	
	/* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
	
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8001d7c:	f001 be54 	b.w	8003a28 <HAL_TIM_Base_Start_IT>
 8001d80:	2000a6e8 	.word	0x2000a6e8

08001d84 <vMBMasterPortTimersRespondTimeoutEnable>:
}

void 
vMBMasterPortTimersRespondTimeoutEnable()
{
 8001d84:	b510      	push	{r4, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
 8001d86:	4c08      	ldr	r4, [pc, #32]	; (8001da8 <vMBMasterPortTimersRespondTimeoutEnable+0x24>)
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f001 fe9b 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8001d8e:	6823      	ldr	r3, [r4, #0]
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d90:	4806      	ldr	r0, [pc, #24]	; (8001dac <vMBMasterPortTimersRespondTimeoutEnable+0x28>)

void 
vMBMasterPortTimersRespondTimeoutEnable()
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9a:	f002 f997 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8001d9e:	4620      	mov	r0, r4
}
 8001da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	__HAL_TIM_SET_COUNTER(&TimHandle_4, 0);
	
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
	HAL_TIM_Base_Start_IT(&TimHandle_4);	// Enable Timer-4
 8001da4:	f001 be40 	b.w	8003a28 <HAL_TIM_Base_Start_IT>
 8001da8:	2000a6e8 	.word	0x2000a6e8
 8001dac:	40020800 	.word	0x40020800

08001db0 <vMBMasterPortTimersDisable>:
}

void
vMBMasterPortTimersDisable(  )
{
 8001db0:	b508      	push	{r3, lr}
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <vMBMasterPortTimersDisable+0x14>)
 8001db4:	f001 fe86 	bl	8003ac4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <vMBMasterPortTimersDisable+0x18>)
}
 8001dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void
vMBMasterPortTimersDisable(  )
{
	HAL_TIM_Base_Stop_IT(&TimHandle_4);		// Disable Timer-4 and Reset Counter
	HAL_TIM_Base_Stop_IT(&TimHandle_5);		// Disable Timer-5 and Reset Counter
 8001dbe:	f001 be81 	b.w	8003ac4 <HAL_TIM_Base_Stop_IT>
 8001dc2:	bf00      	nop
 8001dc4:	2000a6e8 	.word	0x2000a6e8
 8001dc8:	2000a64c 	.word	0x2000a64c

08001dcc <TIM4_IRQHandler>:
  * @param  None
  * @retval None
  */
void 
TIMx_4_IRQHandler(void)
{
 8001dcc:	b508      	push	{r3, lr}
	printf("Timer 4 elapsed...\n");
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <TIM4_IRQHandler+0x20>)
 8001dd0:	f002 fa54 	bl	800427c <puts>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001dd4:	4806      	ldr	r0, [pc, #24]	; (8001df0 <TIM4_IRQHandler+0x24>)
 8001dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f002 f976 	bl	80040cc <HAL_GPIO_WritePin>
	HAL_TIM_IRQHandler(&TimHandle_4);
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <TIM4_IRQHandler+0x28>)
}
 8001de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void 
TIMx_4_IRQHandler(void)
{
	printf("Timer 4 elapsed...\n");
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
	HAL_TIM_IRQHandler(&TimHandle_4);
 8001de6:	f001 bec9 	b.w	8003b7c <HAL_TIM_IRQHandler>
 8001dea:	bf00      	nop
 8001dec:	080095a0 	.word	0x080095a0
 8001df0:	40020800 	.word	0x40020800
 8001df4:	2000a6e8 	.word	0x2000a6e8

08001df8 <TIM5_IRQHandler>:
  * @param  None
  * @retval None
  */
void 
TIMx_5_IRQHandler(void)
{
 8001df8:	b508      	push	{r3, lr}
	printf("Timer 5 elapsed...\n");
 8001dfa:	4804      	ldr	r0, [pc, #16]	; (8001e0c <TIM5_IRQHandler+0x14>)
 8001dfc:	f002 fa3e 	bl	800427c <puts>
	HAL_TIM_IRQHandler(&TimHandle_5);
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <TIM5_IRQHandler+0x18>)
}
 8001e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void 
TIMx_5_IRQHandler(void)
{
	printf("Timer 5 elapsed...\n");
	HAL_TIM_IRQHandler(&TimHandle_5);
 8001e06:	f001 beb9 	b.w	8003b7c <HAL_TIM_IRQHandler>
 8001e0a:	bf00      	nop
 8001e0c:	080095b3 	.word	0x080095b3
 8001e10:	2000a64c 	.word	0x2000a64c

08001e14 <HAL_TIM_PeriodElapsedCallback>:
void 
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	//counter_val = __HAL_TIM_GET_COUNTER(&TimHandle_5);
	//printf("Counter at interrupt: %d\n", counter_val);
	pxMBMasterPortCBTimerExpired();
 8001e14:	4b01      	ldr	r3, [pc, #4]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4718      	bx	r3
 8001e1a:	bf00      	nop
 8001e1c:	2000a770 	.word	0x2000a770

08001e20 <EnterCriticalSection>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
 8001e22:	4770      	bx	lr

08001e24 <ExitCriticalSection>:
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001e24:	b662      	cpsie	i
 8001e26:	4770      	bx	lr

08001e28 <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8001e28:	b538      	push	{r3, r4, r5, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

	switch (eMode)
 8001e2a:	bb20      	cbnz	r0, 8001e76 <eMBMasterInit+0x4e>
	{
#if MB_MASTER_RTU_ENABLED > 0
	case MB_RTU:
		pvMBMasterFrameStartCur = eMBMasterRTUStart;
 8001e2c:	4c14      	ldr	r4, [pc, #80]	; (8001e80 <eMBMasterInit+0x58>)
 8001e2e:	4d15      	ldr	r5, [pc, #84]	; (8001e84 <eMBMasterInit+0x5c>)
 8001e30:	6025      	str	r5, [r4, #0]
		pvMBMasterFrameStopCur = eMBMasterRTUStop;
 8001e32:	4c15      	ldr	r4, [pc, #84]	; (8001e88 <eMBMasterInit+0x60>)
 8001e34:	4d15      	ldr	r5, [pc, #84]	; (8001e8c <eMBMasterInit+0x64>)
 8001e36:	6025      	str	r5, [r4, #0]
		peMBMasterFrameSendCur = eMBMasterRTUSend;
 8001e38:	4c15      	ldr	r4, [pc, #84]	; (8001e90 <eMBMasterInit+0x68>)
 8001e3a:	4d16      	ldr	r5, [pc, #88]	; (8001e94 <eMBMasterInit+0x6c>)
 8001e3c:	6025      	str	r5, [r4, #0]
		peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 8001e3e:	4c16      	ldr	r4, [pc, #88]	; (8001e98 <eMBMasterInit+0x70>)
 8001e40:	4d16      	ldr	r5, [pc, #88]	; (8001e9c <eMBMasterInit+0x74>)
 8001e42:	6025      	str	r5, [r4, #0]
		pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8001e44:	4c16      	ldr	r4, [pc, #88]	; (8001ea0 <eMBMasterInit+0x78>)
 8001e46:	6020      	str	r0, [r4, #0]
		pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8001e48:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <eMBMasterInit+0x7c>)
 8001e4a:	4c17      	ldr	r4, [pc, #92]	; (8001ea8 <eMBMasterInit+0x80>)
 8001e4c:	6004      	str	r4, [r0, #0]
		pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 8001e4e:	4817      	ldr	r0, [pc, #92]	; (8001eac <eMBMasterInit+0x84>)
 8001e50:	4c17      	ldr	r4, [pc, #92]	; (8001eb0 <eMBMasterInit+0x88>)
 8001e52:	6004      	str	r4, [r0, #0]
		pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8001e54:	4817      	ldr	r0, [pc, #92]	; (8001eb4 <eMBMasterInit+0x8c>)
 8001e56:	4c18      	ldr	r4, [pc, #96]	; (8001eb8 <eMBMasterInit+0x90>)
 8001e58:	6004      	str	r4, [r0, #0]

		eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 8001e5a:	4608      	mov	r0, r1
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	461a      	mov	r2, r3
 8001e60:	f000 f94e 	bl	8002100 <eMBMasterRTUInit>
	default:
		eStatus = MB_EINVAL;
		break;
	}

	if (eStatus == MB_ENOERR)
 8001e64:	4604      	mov	r4, r0
 8001e66:	b948      	cbnz	r0, 8001e7c <eMBMasterInit+0x54>
	{
		if (!xMBMasterPortEventInit())
 8001e68:	f7ff fe3a 	bl	8001ae0 <xMBMasterPortEventInit>
 8001e6c:	b128      	cbz	r0, 8001e7a <eMBMasterInit+0x52>
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
		}
		else
		{
			eMBState = STATE_DISABLED;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <eMBMasterInit+0x94>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	e002      	b.n	8001e7c <eMBMasterInit+0x54>

		eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
		break;
#endif
	default:
		eStatus = MB_EINVAL;
 8001e76:	2402      	movs	r4, #2
 8001e78:	e000      	b.n	8001e7c <eMBMasterInit+0x54>
	if (eStatus == MB_ENOERR)
	{
		if (!xMBMasterPortEventInit())
		{
			/* port dependent event module initalization failed. */
			eStatus = MB_EPORTERR;
 8001e7a:	2403      	movs	r4, #3
		}
		/* initialize the OS resource for modbus master. */
		//vMBMasterOsResInit();
	}
	return eStatus;
}
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	bd38      	pop	{r3, r4, r5, pc}
 8001e80:	20009edc 	.word	0x20009edc
 8001e84:	0800214d 	.word	0x0800214d
 8001e88:	20009ed4 	.word	0x20009ed4
 8001e8c:	08002171 	.word	0x08002171
 8001e90:	20009ef0 	.word	0x20009ef0
 8001e94:	08002201 	.word	0x08002201
 8001e98:	20009ee0 	.word	0x20009ee0
 8001e9c:	0800218d 	.word	0x0800218d
 8001ea0:	20009ecc 	.word	0x20009ecc
 8001ea4:	2000a76c 	.word	0x2000a76c
 8001ea8:	08002295 	.word	0x08002295
 8001eac:	2000a768 	.word	0x2000a768
 8001eb0:	08002335 	.word	0x08002335
 8001eb4:	2000a770 	.word	0x2000a770
 8001eb8:	080023e5 	.word	0x080023e5
 8001ebc:	20000005 	.word	0x20000005

08001ec0 <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 8001ec0:	b510      	push	{r4, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
 8001ec2:	4c06      	ldr	r4, [pc, #24]	; (8001edc <eMBMasterEnable+0x1c>)
 8001ec4:	7823      	ldrb	r3, [r4, #0]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d105      	bne.n	8001ed6 <eMBMasterEnable+0x16>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <eMBMasterEnable+0x20>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	7020      	strb	r0, [r4, #0]
 8001ed4:	bd10      	pop	{r4, pc}
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8001ed6:	2006      	movs	r0, #6
    }
    return eStatus;
}
 8001ed8:	bd10      	pop	{r4, pc}
 8001eda:	bf00      	nop
 8001edc:	20000005 	.word	0x20000005
 8001ee0:	20009edc 	.word	0x20009edc

08001ee4 <eMBMasterPoll>:
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8001ee4:	4b69      	ldr	r3, [pc, #420]	; (800208c <eMBMasterPoll+0x1a8>)
    return eStatus;
}

eMBErrorCode
eMBMasterPoll( void )
{
 8001ee6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8001eea:	781c      	ldrb	r4, [r3, #0]
 8001eec:	2c00      	cmp	r4, #0
 8001eee:	f040 80c7 	bne.w	8002080 <eMBMasterPoll+0x19c>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8001ef2:	f10d 0006 	add.w	r0, sp, #6
 8001ef6:	f7ff fe07 	bl	8001b08 <xMBMasterPortEventGet>
 8001efa:	2801      	cmp	r0, #1
 8001efc:	f040 80c2 	bne.w	8002084 <eMBMasterPoll+0x1a0>
    {
        switch ( eEvent )
 8001f00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f200 80bc 	bhi.w	8002084 <eMBMasterPoll+0x1a0>
 8001f0c:	e8df f003 	tbb	[pc, r3]
 8001f10:	20ba0c08 	.word	0x20ba0c08
 8001f14:	6bbababa 	.word	0x6bbababa
 8001f18:	babababa 	.word	0xbabababa
 8001f1c:	7ebababa 	.word	0x7ebababa
        {
        case EV_MASTER_READY:
			printf("EV_MASTER_READY\n");
 8001f20:	485b      	ldr	r0, [pc, #364]	; (8002090 <eMBMasterPoll+0x1ac>)
 8001f22:	f002 f9ab 	bl	800427c <puts>
 8001f26:	e0ad      	b.n	8002084 <eMBMasterPoll+0x1a0>
            break;

        case EV_MASTER_FRAME_RECEIVED:
			printf("EV_MASTER_FRAME_RECEIVED\n");
 8001f28:	485a      	ldr	r0, [pc, #360]	; (8002094 <eMBMasterPoll+0x1b0>)
			eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8001f2a:	4d5b      	ldr	r5, [pc, #364]	; (8002098 <eMBMasterPoll+0x1b4>)
        case EV_MASTER_READY:
			printf("EV_MASTER_READY\n");
            break;

        case EV_MASTER_FRAME_RECEIVED:
			printf("EV_MASTER_FRAME_RECEIVED\n");
 8001f2c:	f002 f9a6 	bl	800427c <puts>
			eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <eMBMasterPoll+0x1b8>)
 8001f32:	495b      	ldr	r1, [pc, #364]	; (80020a0 <eMBMasterPoll+0x1bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a5b      	ldr	r2, [pc, #364]	; (80020a4 <eMBMasterPoll+0x1c0>)
 8001f38:	4628      	mov	r0, r5
 8001f3a:	4798      	blx	r3
			/* Check if the frame is for us. If not ,send an error process event. */
			if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 8001f3c:	b930      	cbnz	r0, 8001f4c <eMBMasterPoll+0x68>
 8001f3e:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <eMBMasterPoll+0x1c4>)
 8001f40:	782a      	ldrb	r2, [r5, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d101      	bne.n	8001f4c <eMBMasterPoll+0x68>
			{
				( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 8001f48:	2004      	movs	r0, #4
 8001f4a:	e046      	b.n	8001fda <eMBMasterPoll+0xf6>
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	e041      	b.n	8001fd4 <eMBMasterPoll+0xf0>
			}
			break;

        case EV_MASTER_EXECUTE:
			printf("EV_MASTER_EXECUTE\n");
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8001f50:	4e53      	ldr	r6, [pc, #332]	; (80020a0 <eMBMasterPoll+0x1bc>)
				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
			}
			break;

        case EV_MASTER_EXECUTE:
			printf("EV_MASTER_EXECUTE\n");
 8001f52:	4856      	ldr	r0, [pc, #344]	; (80020ac <eMBMasterPoll+0x1c8>)
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
 8001f54:	4c56      	ldr	r4, [pc, #344]	; (80020b0 <eMBMasterPoll+0x1cc>)
				( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
			}
			break;

        case EV_MASTER_EXECUTE:
			printf("EV_MASTER_EXECUTE\n");
 8001f56:	f002 f991 	bl	800427c <puts>
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8001f5a:	6833      	ldr	r3, [r6, #0]
 8001f5c:	4955      	ldr	r1, [pc, #340]	; (80020b4 <eMBMasterPoll+0x1d0>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	700a      	strb	r2, [r1, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8001f62:	2101      	movs	r1, #1
 8001f64:	7021      	strb	r1, [r4, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 8001f66:	0611      	lsls	r1, r2, #24
 8001f68:	d502      	bpl.n	8001f70 <eMBMasterPoll+0x8c>
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 8001f6a:	785b      	ldrb	r3, [r3, #1]
 8001f6c:	7023      	strb	r3, [r4, #0]
 8001f6e:	e02e      	b.n	8001fce <eMBMasterPoll+0xea>
 8001f70:	2300      	movs	r3, #0
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
				{
					/* No more function handlers registered. Abort. */
					if (xMasterFuncHandlers[i].ucFunctionCode == 0)	{
 8001f72:	f8df a164 	ldr.w	sl, [pc, #356]	; 80020d8 <eMBMasterPoll+0x1f4>
 8001f76:	f81a 1033 	ldrb.w	r1, [sl, r3, lsl #3]
 8001f7a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001f7e:	46d1      	mov	r9, sl
 8001f80:	b329      	cbz	r1, 8001fce <eMBMasterPoll+0xea>
						break;
					}
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 8001f82:	4291      	cmp	r1, r2
 8001f84:	d120      	bne.n	8001fc8 <eMBMasterPoll+0xe4>
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 8001f86:	4f4c      	ldr	r7, [pc, #304]	; (80020b8 <eMBMasterPoll+0x1d4>)
 8001f88:	2501      	movs	r5, #1
 8001f8a:	703d      	strb	r5, [r7, #0]
					else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
						vMBMasterSetCBRunInMasterMode(TRUE);
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
 8001f8c:	f000 facc 	bl	8002528 <xMBMasterRequestIsBroadcast>
 8001f90:	b180      	cbz	r0, 8001fb4 <eMBMasterPoll+0xd0>
							usLength = usMBMasterGetPDUSndLength();
 8001f92:	f000 fabd 	bl	8002510 <usMBMasterGetPDUSndLength>
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <eMBMasterPoll+0x1c0>)
 8001f98:	8018      	strh	r0, [r3, #0]
	return ucMBMasterDestAddress;
}
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
	ucMBMasterDestAddress = Address;
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <eMBMasterPoll+0x1c4>)
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8001f9c:	6830      	ldr	r0, [r6, #0]
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
								vMBMasterSetDestAddress(j);
 8001f9e:	701d      	strb	r5, [r3, #0]
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8001fa0:	eb09 0308 	add.w	r3, r9, r8
 8001fa4:	493f      	ldr	r1, [pc, #252]	; (80020a4 <eMBMasterPoll+0x1c0>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4798      	blx	r3
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8001faa:	3501      	adds	r5, #1
 8001fac:	2d11      	cmp	r5, #17
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8001fae:	7020      	strb	r0, [r4, #0]
						/* If master request is broadcast,
						 * the master need execute function for all slave.
						 */
						if ( xMBMasterRequestIsBroadcast() ) {
							usLength = usMBMasterGetPDUSndLength();
							for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8001fb0:	d1f3      	bne.n	8001f9a <eMBMasterPoll+0xb6>
 8001fb2:	e006      	b.n	8001fc2 <eMBMasterPoll+0xde>
								vMBMasterSetDestAddress(j);
								eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
							}
						}
						else {
							eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8001fb4:	44d0      	add	r8, sl
 8001fb6:	6830      	ldr	r0, [r6, #0]
 8001fb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001fbc:	4939      	ldr	r1, [pc, #228]	; (80020a4 <eMBMasterPoll+0x1c0>)
 8001fbe:	4798      	blx	r3
 8001fc0:	7020      	strb	r0, [r4, #0]
	return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
	xMBRunInMasterMode = IsMasterMode;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	703b      	strb	r3, [r7, #0]
 8001fc6:	e002      	b.n	8001fce <eMBMasterPoll+0xea>
            if(ucFunctionCode >> 7) {
            	eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
            }
			else
			{
				for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 8001fc8:	3301      	adds	r3, #1
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d1d1      	bne.n	8001f72 <eMBMasterPoll+0x8e>
						break;
					}
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 8001fce:	7824      	ldrb	r4, [r4, #0]
 8001fd0:	b134      	cbz	r4, 8001fe0 <eMBMasterPoll+0xfc>
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4b39      	ldr	r3, [pc, #228]	; (80020bc <eMBMasterPoll+0x1d8>)
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8001fd6:	2010      	movs	r0, #16
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 8001fd8:	701a      	strb	r2, [r3, #0]
				}
			}
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
            	vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
            	( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8001fda:	f7ff fd89 	bl	8001af0 <xMBMasterPortEventPost>
 8001fde:	e051      	b.n	8002084 <eMBMasterPoll+0x1a0>
            }
            else {
            	vMBMasterCBRequestScuuess( );
 8001fe0:	f7ff fdce 	bl	8001b80 <vMBMasterCBRequestScuuess>
 8001fe4:	e049      	b.n	800207a <eMBMasterPoll+0x196>
            break;

        case EV_MASTER_FRAME_SENT:
			printf("EV_MASTER_FRAME_SENT\n");
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 8001fe6:	4c2e      	ldr	r4, [pc, #184]	; (80020a0 <eMBMasterPoll+0x1bc>)
            	vMBMasterRunResRelease( );
            }
            break;

        case EV_MASTER_FRAME_SENT:
			printf("EV_MASTER_FRAME_SENT\n");
 8001fe8:	4835      	ldr	r0, [pc, #212]	; (80020c0 <eMBMasterPoll+0x1dc>)
 8001fea:	f002 f947 	bl	800427c <puts>
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f000 fa82 	bl	80024f8 <vMBMasterGetPDUSndBuf>
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <eMBMasterPoll+0x1e0>)
 8001ff6:	6824      	ldr	r4, [r4, #0]
 8001ff8:	681d      	ldr	r5, [r3, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <eMBMasterPoll+0x1c4>)
 8001ffc:	781e      	ldrb	r6, [r3, #0]

        case EV_MASTER_FRAME_SENT:
			printf("EV_MASTER_FRAME_SENT\n");
        	/* Master is busy now. */
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 8001ffe:	f000 fa87 	bl	8002510 <usMBMasterGetPDUSndLength>
 8002002:	4621      	mov	r1, r4
 8002004:	4602      	mov	r2, r0
 8002006:	4630      	mov	r0, r6
 8002008:	47a8      	blx	r5
 800200a:	e03b      	b.n	8002084 <eMBMasterPoll+0x1a0>
            break;

        case EV_MASTER_ERROR_PROCESS:
			printf("EV_MASTER_ERROR_PROCESS\n");
 800200c:	482e      	ldr	r0, [pc, #184]	; (80020c8 <eMBMasterPoll+0x1e4>)
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 800200e:	4c24      	ldr	r4, [pc, #144]	; (80020a0 <eMBMasterPoll+0x1bc>)
        	vMBMasterGetPDUSndBuf( &ucMBFrame );
			eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
            break;

        case EV_MASTER_ERROR_PROCESS:
			printf("EV_MASTER_ERROR_PROCESS\n");
 8002010:	f002 f934 	bl	800427c <puts>
	ucMBMasterDestAddress = Address;
}
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
	return eMBMasterCurErrorType;
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <eMBMasterPoll+0x1d8>)
 8002016:	781d      	ldrb	r5, [r3, #0]

        case EV_MASTER_ERROR_PROCESS:
			printf("EV_MASTER_ERROR_PROCESS\n");
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
 8002018:	4620      	mov	r0, r4
 800201a:	f000 fa6d 	bl	80024f8 <vMBMasterGetPDUSndBuf>
			switch (errorType) {
 800201e:	2d01      	cmp	r5, #1
 8002020:	d01e      	beq.n	8002060 <eMBMasterPoll+0x17c>
 8002022:	d30f      	bcc.n	8002044 <eMBMasterPoll+0x160>
 8002024:	2d02      	cmp	r5, #2
 8002026:	d128      	bne.n	800207a <eMBMasterPoll+0x196>
				printf("EV_ERROR_RECEIVE_DATA\n");
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_EXECUTE_FUNCTION:
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
 8002028:	4828      	ldr	r0, [pc, #160]	; (80020cc <eMBMasterPoll+0x1e8>)
 800202a:	f002 f927 	bl	800427c <puts>
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <eMBMasterPoll+0x1c4>)
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_EXECUTE_FUNCTION:
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8002030:	6824      	ldr	r4, [r4, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 8002032:	781d      	ldrb	r5, [r3, #0]
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_EXECUTE_FUNCTION:
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8002034:	f000 fa6c 	bl	8002510 <usMBMasterGetPDUSndLength>
 8002038:	4621      	mov	r1, r4
 800203a:	4602      	mov	r2, r0
 800203c:	4628      	mov	r0, r5
 800203e:	f7ff fd93 	bl	8001b68 <vMBMasterErrorCBExecuteFunction>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 8002042:	e01a      	b.n	800207a <eMBMasterPoll+0x196>
        	/* Execute specified error process callback function. */
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
			switch (errorType) {
			case EV_ERROR_RESPOND_TIMEOUT:
				printf("EV_ERROR_RESPOND_TIMEOUT\n");
 8002044:	4822      	ldr	r0, [pc, #136]	; (80020d0 <eMBMasterPoll+0x1ec>)
 8002046:	f002 f919 	bl	800427c <puts>
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <eMBMasterPoll+0x1c4>)
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
			switch (errorType) {
			case EV_ERROR_RESPOND_TIMEOUT:
				printf("EV_ERROR_RESPOND_TIMEOUT\n");
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 800204c:	6824      	ldr	r4, [r4, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 800204e:	781d      	ldrb	r5, [r3, #0]
			errorType = eMBMasterGetErrorType();
			vMBMasterGetPDUSndBuf( &ucMBFrame );
			switch (errorType) {
			case EV_ERROR_RESPOND_TIMEOUT:
				printf("EV_ERROR_RESPOND_TIMEOUT\n");
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 8002050:	f000 fa5e 	bl	8002510 <usMBMasterGetPDUSndLength>
 8002054:	4621      	mov	r1, r4
 8002056:	4602      	mov	r2, r0
 8002058:	4628      	mov	r0, r5
 800205a:	f7ff fd6d 	bl	8001b38 <vMBMasterErrorCBRespondTimeout>
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
 800205e:	e00c      	b.n	800207a <eMBMasterPoll+0x196>
			case EV_ERROR_RECEIVE_DATA:
				printf("EV_ERROR_RECEIVE_DATA\n");
 8002060:	481c      	ldr	r0, [pc, #112]	; (80020d4 <eMBMasterPoll+0x1f0>)
 8002062:	f002 f90b 	bl	800427c <puts>
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <eMBMasterPoll+0x1c4>)
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_RECEIVE_DATA:
				printf("EV_ERROR_RECEIVE_DATA\n");
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8002068:	6824      	ldr	r4, [r4, #0]
	xMBRunInMasterMode = IsMasterMode;
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
 800206a:	781d      	ldrb	r5, [r3, #0]
				vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			case EV_ERROR_RECEIVE_DATA:
				printf("EV_ERROR_RECEIVE_DATA\n");
				vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 800206c:	f000 fa50 	bl	8002510 <usMBMasterGetPDUSndLength>
 8002070:	4621      	mov	r1, r4
 8002072:	4602      	mov	r2, r0
 8002074:	4628      	mov	r0, r5
 8002076:	f7ff fd6b 	bl	8001b50 <vMBMasterErrorCBReceiveData>
				printf("EV_ERROR_EXECUTE_FUNCTION\n");
				vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
						ucMBFrame, usMBMasterGetPDUSndLength());
				break;
			}
			vMBMasterRunResRelease();
 800207a:	f7ff fd57 	bl	8001b2c <vMBMasterRunResRelease>
 800207e:	e001      	b.n	8002084 <eMBMasterPoll+0x1a0>
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
 8002080:	2006      	movs	r0, #6
 8002082:	e000      	b.n	8002086 <eMBMasterPoll+0x1a2>
			}
			vMBMasterRunResRelease();
        	break;
        }
    }
    return MB_ENOERR;
 8002084:	2000      	movs	r0, #0
}
 8002086:	b002      	add	sp, #8
 8002088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800208c:	20000005 	.word	0x20000005
 8002090:	080095c6 	.word	0x080095c6
 8002094:	080095d6 	.word	0x080095d6
 8002098:	20009ee4 	.word	0x20009ee4
 800209c:	20009ee0 	.word	0x20009ee0
 80020a0:	20009ee8 	.word	0x20009ee8
 80020a4:	20009eec 	.word	0x20009eec
 80020a8:	20009ed8 	.word	0x20009ed8
 80020ac:	080095ef 	.word	0x080095ef
 80020b0:	20009eef 	.word	0x20009eef
 80020b4:	20009ed0 	.word	0x20009ed0
 80020b8:	20009ee5 	.word	0x20009ee5
 80020bc:	20009eee 	.word	0x20009eee
 80020c0:	08009601 	.word	0x08009601
 80020c4:	20009ef0 	.word	0x20009ef0
 80020c8:	08009616 	.word	0x08009616
 80020cc:	0800965d 	.word	0x0800965d
 80020d0:	0800962e 	.word	0x0800962e
 80020d4:	08009647 	.word	0x08009647
 80020d8:	08009678 	.word	0x08009678

080020dc <ucMBMasterGetDestAddress>:
}
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
	return ucMBMasterDestAddress;
}
 80020dc:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <ucMBMasterGetDestAddress+0x8>)
 80020de:	7818      	ldrb	r0, [r3, #0]
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20009ed8 	.word	0x20009ed8

080020e8 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
	ucMBMasterDestAddress = Address;
 80020e8:	4b01      	ldr	r3, [pc, #4]	; (80020f0 <vMBMasterSetDestAddress+0x8>)
 80020ea:	7018      	strb	r0, [r3, #0]
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20009ed8 	.word	0x20009ed8

080020f4 <vMBMasterSetErrorType>:
	return eMBMasterCurErrorType;
}
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
	eMBMasterCurErrorType = errorType;
 80020f4:	4b01      	ldr	r3, [pc, #4]	; (80020fc <vMBMasterSetErrorType+0x8>)
 80020f6:	7018      	strb	r0, [r3, #0]
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20009eee 	.word	0x20009eee

08002100 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/*  Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8002100:	b570      	push	{r4, r5, r6, lr}
 8002102:	4615      	mov	r5, r2
 8002104:	4606      	mov	r6, r0
 8002106:	460c      	mov	r4, r1
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 8002108:	f7ff fe8a 	bl	8001e20 <EnterCriticalSection>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800210c:	4630      	mov	r0, r6
 800210e:	4621      	mov	r1, r4
 8002110:	2208      	movs	r2, #8
 8002112:	462b      	mov	r3, r5
 8002114:	f7ff fd74 	bl	8001c00 <xMBMasterPortSerialInit>
 8002118:	2801      	cmp	r0, #1
 800211a:	d10f      	bne.n	800213c <eMBMasterRTUInit+0x3c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 800211c:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8002120:	bf97      	itett	ls
 8002122:	4809      	ldrls	r0, [pc, #36]	; (8002148 <eMBMasterRTUInit+0x48>)
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8002124:	2023      	movhi	r0, #35	; 0x23
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8002126:	0064      	lslls	r4, r4, #1
 8002128:	fbb0 f0f4 	udivls	r0, r0, r4
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 800212c:	b280      	uxth	r0, r0
 800212e:	f7ff fe05 	bl	8001d3c <xMBMasterPortTimersInit>
 8002132:	2801      	cmp	r0, #1
        {
            eStatus = MB_EPORTERR;
 8002134:	bf0c      	ite	eq
 8002136:	2400      	moveq	r4, #0
 8002138:	2403      	movne	r4, #3
 800213a:	e000      	b.n	800213e <eMBMasterRTUInit+0x3e>
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
 800213c:	2403      	movs	r4, #3
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
 800213e:	f7ff fe71 	bl	8001e24 <ExitCriticalSection>

    return eStatus;
}
 8002142:	4620      	mov	r0, r4
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	bf00      	nop
 8002148:	00177fa0 	.word	0x00177fa0

0800214c <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 800214c:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 800214e:	f7ff fe67 	bl	8001e20 <EnterCriticalSection>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <eMBMasterRTUStart+0x20>)
 8002154:	2100      	movs	r1, #0
    vMBMasterPortSerialEnable( TRUE, FALSE );
 8002156:	2001      	movs	r0, #1
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8002158:	7019      	strb	r1, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 800215a:	f7ff fd1d 	bl	8001b98 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 800215e:	f7ff fdef 	bl	8001d40 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
}
 8002162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     */
    eRcvState = STATE_M_RX_INIT;
    vMBMasterPortSerialEnable( TRUE, FALSE );
    vMBMasterPortTimersT35Enable(  );

    EXIT_CRITICAL_SECTION(  );
 8002166:	f7ff be5d 	b.w	8001e24 <ExitCriticalSection>
 800216a:	bf00      	nop
 800216c:	20009ffe 	.word	0x20009ffe

08002170 <eMBMasterRTUStop>:
}

void
eMBMasterRTUStop( void )
{
 8002170:	b508      	push	{r3, lr}
    ENTER_CRITICAL_SECTION(  );
 8002172:	f7ff fe55 	bl	8001e20 <EnterCriticalSection>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 8002176:	2000      	movs	r0, #0
 8002178:	4601      	mov	r1, r0
 800217a:	f7ff fd0d 	bl	8001b98 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 800217e:	f7ff fe17 	bl	8001db0 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
}
 8002182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
eMBMasterRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
    vMBMasterPortSerialEnable( FALSE, FALSE );
    vMBMasterPortTimersDisable(  );
    EXIT_CRITICAL_SECTION(  );
 8002186:	f7ff be4d 	b.w	8001e24 <ExitCriticalSection>
	...

0800218c <eMBMasterRTUReceive>:
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 800218c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8002190:	4d16      	ldr	r5, [pc, #88]	; (80021ec <eMBMasterRTUReceive+0x60>)
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8002192:	4680      	mov	r8, r0
 8002194:	460e      	mov	r6, r1
 8002196:	4617      	mov	r7, r2
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
 8002198:	f7ff fe42 	bl	8001e20 <EnterCriticalSection>
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 800219c:	882b      	ldrh	r3, [r5, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2bff      	cmp	r3, #255	; 0xff
 80021a2:	d905      	bls.n	80021b0 <eMBMasterRTUReceive+0x24>
 80021a4:	4812      	ldr	r0, [pc, #72]	; (80021f0 <eMBMasterRTUReceive+0x64>)
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <eMBMasterRTUReceive+0x68>)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <eMBMasterRTUReceive+0x6c>)
 80021aa:	21a3      	movs	r1, #163	; 0xa3
 80021ac:	f001 fff2 	bl	8004194 <__assert_func>

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 80021b0:	882b      	ldrh	r3, [r5, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d801      	bhi.n	80021bc <eMBMasterRTUReceive+0x30>
        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
    }
    else
    {
        eStatus = MB_EIO;
 80021b8:	2405      	movs	r4, #5
 80021ba:	e011      	b.n	80021e0 <eMBMasterRTUReceive+0x54>
    ENTER_CRITICAL_SECTION(  );
    assert( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 80021bc:	8829      	ldrh	r1, [r5, #0]
 80021be:	4c0f      	ldr	r4, [pc, #60]	; (80021fc <eMBMasterRTUReceive+0x70>)
 80021c0:	b289      	uxth	r1, r1
 80021c2:	4620      	mov	r0, r4
 80021c4:	f000 f9b6 	bl	8002534 <usMBCRC16>
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d1f5      	bne.n	80021b8 <eMBMasterRTUReceive+0x2c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 80021cc:	4623      	mov	r3, r4
}

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 80021ce:	4604      	mov	r4, r0
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 80021d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021d4:	f888 2000 	strb.w	r2, [r8]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 80021d8:	882a      	ldrh	r2, [r5, #0]
 80021da:	3a03      	subs	r2, #3
 80021dc:	803a      	strh	r2, [r7, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 80021de:	6033      	str	r3, [r6, #0]
    else
    {
        eStatus = MB_EIO;
    }

    EXIT_CRITICAL_SECTION(  );
 80021e0:	f7ff fe20 	bl	8001e24 <ExitCriticalSection>
    return eStatus;
}
 80021e4:	4620      	mov	r0, r4
 80021e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021ea:	bf00      	nop
 80021ec:	20009ff6 	.word	0x20009ff6
 80021f0:	0800973b 	.word	0x0800973b
 80021f4:	08009710 	.word	0x08009710
 80021f8:	08009762 	.word	0x08009762
 80021fc:	20009ef4 	.word	0x20009ef4

08002200 <eMBMasterRTUSend>:
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8002200:	2810      	cmp	r0, #16
    return eStatus;
}

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8002202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002206:	4607      	mov	r7, r0
 8002208:	460e      	mov	r6, r1
 800220a:	4690      	mov	r8, r2
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 800220c:	d834      	bhi.n	8002278 <eMBMasterRTUSend+0x78>

    ENTER_CRITICAL_SECTION(  );
 800220e:	f7ff fe07 	bl	8001e20 <EnterCriticalSection>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 8002212:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <eMBMasterRTUSend+0x80>)
 8002214:	781d      	ldrb	r5, [r3, #0]
 8002216:	b2ed      	uxtb	r5, r5
 8002218:	2d01      	cmp	r5, #1
 800221a:	d127      	bne.n	800226c <eMBMasterRTUSend+0x6c>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
        usMasterSndBufferCount = 1;
 800221c:	4c19      	ldr	r4, [pc, #100]	; (8002284 <eMBMasterRTUSend+0x84>)
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <eMBMasterRTUSend+0x88>)
        usMasterSndBufferCount = 1;
 8002220:	8025      	strh	r5, [r4, #0]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8002222:	1e70      	subs	r0, r6, #1
        usMasterSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8002224:	f806 7c01 	strb.w	r7, [r6, #-1]
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8002228:	6018      	str	r0, [r3, #0]
        usMasterSndBufferCount = 1;

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usMasterSndBufferCount += usLength;
 800222a:	8823      	ldrh	r3, [r4, #0]
 800222c:	fa18 f283 	uxtah	r2, r8, r3
 8002230:	b292      	uxth	r2, r2
 8002232:	8022      	strh	r2, [r4, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 8002234:	8821      	ldrh	r1, [r4, #0]
 8002236:	b289      	uxth	r1, r1
 8002238:	f000 f97c 	bl	8002534 <usMBCRC16>
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 800223c:	8823      	ldrh	r3, [r4, #0]
 800223e:	4913      	ldr	r1, [pc, #76]	; (800228c <eMBMasterRTUSend+0x8c>)
 8002240:	b29b      	uxth	r3, r3
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	b292      	uxth	r2, r2
 8002246:	8022      	strh	r2, [r4, #0]
 8002248:	b2c2      	uxtb	r2, r0
 800224a:	54ca      	strb	r2, [r1, r3]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 800224c:	8823      	ldrh	r3, [r4, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	b292      	uxth	r2, r2
 8002254:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002258:	8022      	strh	r2, [r4, #0]
 800225a:	54c8      	strb	r0, [r1, r3]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <eMBMasterRTUSend+0x90>)
        vMBMasterPortSerialEnable( FALSE, TRUE );
 800225e:	2000      	movs	r0, #0
 8002260:	4629      	mov	r1, r5
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8002262:	701d      	strb	r5, [r3, #0]
}

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
 8002264:	2400      	movs	r4, #0
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8002266:	f7ff fc97 	bl	8001b98 <vMBMasterPortSerialEnable>
 800226a:	e000      	b.n	800226e <eMBMasterRTUSend+0x6e>
    }
    else
    {
        eStatus = MB_EIO;
 800226c:	2405      	movs	r4, #5
    }
    EXIT_CRITICAL_SECTION(  );
 800226e:	f7ff fdd9 	bl	8001e24 <ExitCriticalSection>
    return eStatus;
 8002272:	4620      	mov	r0, r4
 8002274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8002278:	2002      	movs	r0, #2
    {
        eStatus = MB_EIO;
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
}
 800227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800227e:	bf00      	nop
 8002280:	20009ffe 	.word	0x20009ffe
 8002284:	20009ff8 	.word	0x20009ff8
 8002288:	2000a000 	.word	0x2000a000
 800228c:	2000a004 	.word	0x2000a004
 8002290:	20009ffa 	.word	0x20009ffa

08002294 <xMBMasterRTUReceiveFSM>:
xMBMasterRTUReceiveFSM( void )
{
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <xMBMasterRTUReceiveFSM+0x84>)
    return eStatus;
}

BOOL
xMBMasterRTUReceiveFSM( void )
{
 8002296:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BOOL            xTaskNeedSwitch = FALSE;
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	461d      	mov	r5, r3
 800229c:	b142      	cbz	r2, 80022b0 <xMBMasterRTUReceiveFSM+0x1c>
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d005      	beq.n	80022b0 <xMBMasterRTUReceiveFSM+0x1c>
 80022a4:	481d      	ldr	r0, [pc, #116]	; (800231c <xMBMasterRTUReceiveFSM+0x88>)
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <xMBMasterRTUReceiveFSM+0x8c>)
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <xMBMasterRTUReceiveFSM+0x90>)
 80022aa:	21ee      	movs	r1, #238	; 0xee
 80022ac:	f001 ff72 	bl	8004194 <__assert_func>

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );

    switch ( eRcvState )
 80022b0:	4c1d      	ldr	r4, [pc, #116]	; (8002328 <xMBMasterRTUReceiveFSM+0x94>)
    UCHAR           ucByte;

    assert(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 80022b2:	f10d 0007 	add.w	r0, sp, #7
 80022b6:	f7ff fcad 	bl	8001c14 <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 80022ba:	7823      	ldrb	r3, [r4, #0]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d827      	bhi.n	8002310 <xMBMasterRTUReceiveFSM+0x7c>
 80022c0:	e8df f003 	tbb	[pc, r3]
 80022c4:	24130224 	.word	0x24130224
         */
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
 80022c8:	f7ff fd72 	bl	8001db0 <vMBMasterPortTimersDisable>
    	eSndState = STATE_M_TX_IDLE;

        usMasterRcvBufferPos = 0;
 80022cc:	4a17      	ldr	r2, [pc, #92]	; (800232c <xMBMasterRTUReceiveFSM+0x98>)
    case STATE_M_RX_IDLE:
    	/* In time of respond timeout,the receiver receive a frame.
    	 * Disable timer of respond timeout and change the transmiter state to idle.
    	 */
    	vMBMasterPortTimersDisable( );
    	eSndState = STATE_M_TX_IDLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	702b      	strb	r3, [r5, #0]

        usMasterRcvBufferPos = 0;
 80022d2:	8013      	strh	r3, [r2, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 80022d4:	8813      	ldrh	r3, [r2, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	1c59      	adds	r1, r3, #1
 80022da:	b289      	uxth	r1, r1
 80022dc:	8011      	strh	r1, [r2, #0]
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <xMBMasterRTUReceiveFSM+0x9c>)
 80022e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80022e4:	54d1      	strb	r1, [r2, r3]
        eRcvState = STATE_M_RX_RCV;
 80022e6:	2302      	movs	r3, #2
 80022e8:	e00f      	b.n	800230a <xMBMasterRTUReceiveFSM+0x76>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <xMBMasterRTUReceiveFSM+0x98>)
 80022ec:	8813      	ldrh	r3, [r2, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	2bff      	cmp	r3, #255	; 0xff
 80022f2:	d809      	bhi.n	8002308 <xMBMasterRTUReceiveFSM+0x74>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 80022f4:	8813      	ldrh	r3, [r2, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	1c59      	adds	r1, r3, #1
 80022fa:	b289      	uxth	r1, r1
 80022fc:	8011      	strh	r1, [r2, #0]
 80022fe:	4a0c      	ldr	r2, [pc, #48]	; (8002330 <xMBMasterRTUReceiveFSM+0x9c>)
 8002300:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002304:	54d1      	strb	r1, [r2, r3]
 8002306:	e001      	b.n	800230c <xMBMasterRTUReceiveFSM+0x78>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 8002308:	2303      	movs	r3, #3
 800230a:	7023      	strb	r3, [r4, #0]
        }
        vMBMasterPortTimersT35Enable();
 800230c:	f7ff fd18 	bl	8001d40 <vMBMasterPortTimersT35Enable>
        break;
    }
    return xTaskNeedSwitch;
}
 8002310:	2000      	movs	r0, #0
 8002312:	b003      	add	sp, #12
 8002314:	bd30      	pop	{r4, r5, pc}
 8002316:	bf00      	nop
 8002318:	20009ffa 	.word	0x20009ffa
 800231c:	0800973b 	.word	0x0800973b
 8002320:	08009724 	.word	0x08009724
 8002324:	0800978d 	.word	0x0800978d
 8002328:	20009ffe 	.word	0x20009ffe
 800232c:	20009ff6 	.word	0x20009ff6
 8002330:	20009ef4 	.word	0x20009ef4

08002334 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 8002334:	b538      	push	{r3, r4, r5, lr}
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_M_RX_IDLE );
 8002336:	4b21      	ldr	r3, [pc, #132]	; (80023bc <xMBMasterRTUTransmitFSM+0x88>)
 8002338:	7818      	ldrb	r0, [r3, #0]
 800233a:	b2c0      	uxtb	r0, r0
 800233c:	2801      	cmp	r0, #1
 800233e:	d006      	beq.n	800234e <xMBMasterRTUTransmitFSM+0x1a>
 8002340:	481f      	ldr	r0, [pc, #124]	; (80023c0 <xMBMasterRTUTransmitFSM+0x8c>)
 8002342:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <xMBMasterRTUTransmitFSM+0x90>)
 8002344:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <xMBMasterRTUTransmitFSM+0x94>)
 8002346:	f44f 7198 	mov.w	r1, #304	; 0x130
 800234a:	f001 ff23 	bl	8004194 <__assert_func>

    switch ( eSndState )
 800234e:	4d1f      	ldr	r5, [pc, #124]	; (80023cc <xMBMasterRTUTransmitFSM+0x98>)
 8002350:	782b      	ldrb	r3, [r5, #0]
 8002352:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002356:	b113      	cbz	r3, 800235e <xMBMasterRTUTransmitFSM+0x2a>
 8002358:	2901      	cmp	r1, #1
 800235a:	d003      	beq.n	8002364 <xMBMasterRTUTransmitFSM+0x30>
 800235c:	e02b      	b.n	80023b6 <xMBMasterRTUTransmitFSM+0x82>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_M_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBMasterPortSerialEnable( TRUE, FALSE );
 800235e:	f7ff fc1b 	bl	8001b98 <vMBMasterPortSerialEnable>
        break;
 8002362:	e028      	b.n	80023b6 <xMBMasterRTUTransmitFSM+0x82>

    case STATE_M_TX_XMIT:
        /* check if we are finished. */
        if( usMasterSndBufferCount != 0 )
 8002364:	4c1a      	ldr	r4, [pc, #104]	; (80023d0 <xMBMasterRTUTransmitFSM+0x9c>)
 8002366:	8822      	ldrh	r2, [r4, #0]
 8002368:	b292      	uxth	r2, r2
 800236a:	b162      	cbz	r2, 8002386 <xMBMasterRTUTransmitFSM+0x52>
        {
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 800236c:	4d19      	ldr	r5, [pc, #100]	; (80023d4 <xMBMasterRTUTransmitFSM+0xa0>)
 800236e:	682b      	ldr	r3, [r5, #0]
 8002370:	7818      	ldrb	r0, [r3, #0]
 8002372:	f7ff fc47 	bl	8001c04 <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	602b      	str	r3, [r5, #0]
            usMasterSndBufferCount--;
 800237c:	8823      	ldrh	r3, [r4, #0]
 800237e:	3b01      	subs	r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	8023      	strh	r3, [r4, #0]
 8002384:	e017      	b.n	80023b6 <xMBMasterRTUTransmitFSM+0x82>
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8002386:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <xMBMasterRTUTransmitFSM+0xa4>)
 8002388:	4c14      	ldr	r4, [pc, #80]	; (80023dc <xMBMasterRTUTransmitFSM+0xa8>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	fab3 f383 	clz	r3, r3
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8002390:	4608      	mov	r0, r1
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8002392:	095b      	lsrs	r3, r3, #5
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8002394:	4611      	mov	r1, r2
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
            usMasterSndBufferCount--;
        }
        else
        {
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8002396:	7023      	strb	r3, [r4, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8002398:	f7ff fbfe 	bl	8001b98 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 800239c:	2302      	movs	r3, #2
 800239e:	702b      	strb	r3, [r5, #0]
            /* If the frame is broadcast ,master will enable timer of convert delay,
             * else master will enable timer of respond timeout. */
            if ( xFrameIsBroadcast == TRUE )
 80023a0:	7823      	ldrb	r3, [r4, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <xMBMasterRTUTransmitFSM+0x78>
            {
            	vMBMasterPortTimersConvertDelayEnable( );
 80023a6:	f7ff fcdb 	bl	8001d60 <vMBMasterPortTimersConvertDelayEnable>
 80023aa:	e004      	b.n	80023b6 <xMBMasterRTUTransmitFSM+0x82>
            }
            else
            {
				printf("Start TimeOut Timer 4...\n");
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <xMBMasterRTUTransmitFSM+0xac>)
 80023ae:	f001 ff65 	bl	800427c <puts>
            	vMBMasterPortTimersRespondTimeoutEnable( );
 80023b2:	f7ff fce7 	bl	8001d84 <vMBMasterPortTimersRespondTimeoutEnable>
        }
        break;
    }

    return xNeedPoll;
}
 80023b6:	2000      	movs	r0, #0
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	bf00      	nop
 80023bc:	20009ffe 	.word	0x20009ffe
 80023c0:	0800973b 	.word	0x0800973b
 80023c4:	080096f8 	.word	0x080096f8
 80023c8:	080097d2 	.word	0x080097d2
 80023cc:	20009ffa 	.word	0x20009ffa
 80023d0:	20009ff8 	.word	0x20009ff8
 80023d4:	2000a000 	.word	0x2000a000
 80023d8:	2000a004 	.word	0x2000a004
 80023dc:	20009ff4 	.word	0x20009ff4
 80023e0:	080097ef 	.word	0x080097ef

080023e4 <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 80023e4:	b570      	push	{r4, r5, r6, lr}
	BOOL xNeedPoll = FALSE;

	switch (eRcvState)
 80023e6:	4d36      	ldr	r5, [pc, #216]	; (80024c0 <xMBMasterRTUTimerExpired+0xdc>)
 80023e8:	782c      	ldrb	r4, [r5, #0]
 80023ea:	b2e4      	uxtb	r4, r4
 80023ec:	2c02      	cmp	r4, #2
 80023ee:	462e      	mov	r6, r5
 80023f0:	d007      	beq.n	8002402 <xMBMasterRTUTimerExpired+0x1e>
 80023f2:	2c03      	cmp	r4, #3
 80023f4:	d00d      	beq.n	8002412 <xMBMasterRTUTimerExpired+0x2e>
 80023f6:	b9a4      	cbnz	r4, 8002422 <xMBMasterRTUTimerExpired+0x3e>
	{
		/* Timer t35 expired. Startup phase is finished. */
	case STATE_M_RX_INIT:
		printf("STATE_M_RX_INIT\n");
 80023f8:	4832      	ldr	r0, [pc, #200]	; (80024c4 <xMBMasterRTUTimerExpired+0xe0>)
 80023fa:	f001 ff3f 	bl	800427c <puts>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 80023fe:	2001      	movs	r0, #1
 8002400:	e003      	b.n	800240a <xMBMasterRTUTimerExpired+0x26>
		break;

		/* A frame was received and t35 expired. Notify the listener that
		 * a new frame was received. */
	case STATE_M_RX_RCV:
		printf("STATE_M_RX_RCV\n");
 8002402:	4831      	ldr	r0, [pc, #196]	; (80024c8 <xMBMasterRTUTimerExpired+0xe4>)
 8002404:	f001 ff3a 	bl	800427c <puts>
		xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 8002408:	4620      	mov	r0, r4
 800240a:	f7ff fb71 	bl	8001af0 <xMBMasterPortEventPost>
 800240e:	4604      	mov	r4, r0
		break;
 8002410:	e01e      	b.n	8002450 <xMBMasterRTUTimerExpired+0x6c>

		/* An error occured while receiving the frame. */
	case STATE_M_RX_ERROR:
		printf("STATE_M_RX_ERROR\n");
 8002412:	482e      	ldr	r0, [pc, #184]	; (80024cc <xMBMasterRTUTimerExpired+0xe8>)
 8002414:	f001 ff32 	bl	800427c <puts>
		vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff fe6b 	bl	80020f4 <vMBMasterSetErrorType>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 800241e:	2010      	movs	r0, #16
 8002420:	e7f3      	b.n	800240a <xMBMasterRTUTimerExpired+0x26>
		break;

		/* Function called in an illegal state. */
	default:
		printf("assert\n");
 8002422:	482b      	ldr	r0, [pc, #172]	; (80024d0 <xMBMasterRTUTimerExpired+0xec>)
 8002424:	f001 ff2a 	bl	800427c <puts>
		assert(
 8002428:	782b      	ldrb	r3, [r5, #0]
 800242a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 800242e:	b17b      	cbz	r3, 8002450 <xMBMasterRTUTimerExpired+0x6c>
 8002430:	782b      	ldrb	r3, [r5, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d00b      	beq.n	800244e <xMBMasterRTUTimerExpired+0x6a>
 8002436:	782b      	ldrb	r3, [r5, #0]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d008      	beq.n	800244e <xMBMasterRTUTimerExpired+0x6a>
 800243c:	782b      	ldrb	r3, [r5, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d005      	beq.n	800244e <xMBMasterRTUTimerExpired+0x6a>
 8002442:	4824      	ldr	r0, [pc, #144]	; (80024d4 <xMBMasterRTUTimerExpired+0xf0>)
 8002444:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <xMBMasterRTUTimerExpired+0xf4>)
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <xMBMasterRTUTimerExpired+0xf8>)
 8002448:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800244c:	e023      	b.n	8002496 <xMBMasterRTUTimerExpired+0xb2>
}

BOOL
xMBMasterRTUTimerExpired(void)
{
	BOOL xNeedPoll = FALSE;
 800244e:	2400      	movs	r4, #0
		assert(
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
	}
	eRcvState = STATE_M_RX_IDLE;
 8002450:	2301      	movs	r3, #1

	switch (eSndState)
 8002452:	4d23      	ldr	r5, [pc, #140]	; (80024e0 <xMBMasterRTUTimerExpired+0xfc>)
		assert(
				( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
				( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
		break;
	}
	eRcvState = STATE_M_RX_IDLE;
 8002454:	7033      	strb	r3, [r6, #0]

	switch (eSndState)
 8002456:	782b      	ldrb	r3, [r5, #0]
 8002458:	2b02      	cmp	r3, #2
 800245a:	462e      	mov	r6, r5
 800245c:	d10e      	bne.n	800247c <xMBMasterRTUTimerExpired+0x98>
	{
		/* A frame was send finish and convert delay or respond timeout expired.
		 * If the frame is broadcast,The master will idle,and if the frame is not
		 * broadcast.Notify the listener process error.*/
	case STATE_M_TX_XFWR:
		printf("STATE_M_TX_XFWR\n");
 800245e:	4821      	ldr	r0, [pc, #132]	; (80024e4 <xMBMasterRTUTimerExpired+0x100>)
 8002460:	f001 ff0c 	bl	800427c <puts>
		if ( xFrameIsBroadcast == FALSE ) {
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <xMBMasterRTUTimerExpired+0x104>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800246c:	b9ab      	cbnz	r3, 800249a <xMBMasterRTUTimerExpired+0xb6>
			vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 800246e:	f7ff fe41 	bl	80020f4 <vMBMasterSetErrorType>
			xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 8002472:	2010      	movs	r0, #16
 8002474:	f7ff fb3c 	bl	8001af0 <xMBMasterPortEventPost>
 8002478:	4604      	mov	r4, r0
 800247a:	e00e      	b.n	800249a <xMBMasterRTUTimerExpired+0xb6>
		}
		break;
		/* Function called in an illegal state. */
	default:
		printf("assert\n");
 800247c:	4814      	ldr	r0, [pc, #80]	; (80024d0 <xMBMasterRTUTimerExpired+0xec>)
 800247e:	f001 fefd 	bl	800427c <puts>
		assert(
 8002482:	782b      	ldrb	r3, [r5, #0]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d008      	beq.n	800249a <xMBMasterRTUTimerExpired+0xb6>
 8002488:	782b      	ldrb	r3, [r5, #0]
 800248a:	b133      	cbz	r3, 800249a <xMBMasterRTUTimerExpired+0xb6>
 800248c:	4811      	ldr	r0, [pc, #68]	; (80024d4 <xMBMasterRTUTimerExpired+0xf0>)
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <xMBMasterRTUTimerExpired+0xf4>)
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <xMBMasterRTUTimerExpired+0x108>)
 8002492:	f240 1191 	movw	r1, #401	; 0x191
 8002496:	f001 fe7d 	bl	8004194 <__assert_func>
				( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
	}
	eSndState = STATE_M_TX_IDLE;
 800249a:	2300      	movs	r3, #0
	
	printf("Timers get disabled...\n");
 800249c:	4814      	ldr	r0, [pc, #80]	; (80024f0 <xMBMasterRTUTimerExpired+0x10c>)
		printf("assert\n");
		assert(
				( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
		break;
	}
	eSndState = STATE_M_TX_IDLE;
 800249e:	7033      	strb	r3, [r6, #0]
	
	printf("Timers get disabled...\n");
 80024a0:	f001 feec 	bl	800427c <puts>
	vMBMasterPortTimersDisable( );
 80024a4:	f7ff fc84 	bl	8001db0 <vMBMasterPortTimersDisable>
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <xMBMasterRTUTimerExpired+0x110>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d104      	bne.n	80024ba <xMBMasterRTUTimerExpired+0xd6>
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 80024b0:	2004      	movs	r0, #4
	}

	return xNeedPoll;
}
 80024b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	
	printf("Timers get disabled...\n");
	vMBMasterPortTimersDisable( );
	/* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
	if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
		xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 80024b6:	f7ff bb1b 	b.w	8001af0 <xMBMasterPortEventPost>
	}

	return xNeedPoll;
}
 80024ba:	4620      	mov	r0, r4
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	bf00      	nop
 80024c0:	20009ffe 	.word	0x20009ffe
 80024c4:	08009808 	.word	0x08009808
 80024c8:	08009818 	.word	0x08009818
 80024cc:	08009827 	.word	0x08009827
 80024d0:	08009838 	.word	0x08009838
 80024d4:	0800973b 	.word	0x0800973b
 80024d8:	08009938 	.word	0x08009938
 80024dc:	0800983f 	.word	0x0800983f
 80024e0:	20009ffa 	.word	0x20009ffa
 80024e4:	080098cc 	.word	0x080098cc
 80024e8:	20009ff4 	.word	0x20009ff4
 80024ec:	080098dc 	.word	0x080098dc
 80024f0:	08009921 	.word	0x08009921
 80024f4:	20009ffb 	.word	0x20009ffb

080024f8 <vMBMasterGetPDUSndBuf>:
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
	*pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <vMBMasterGetPDUSndBuf+0x8>)
 80024fa:	6003      	str	r3, [r0, #0]
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	2000a005 	.word	0x2000a005

08002504 <vMBMasterSetPDUSndLength>:
}

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
	usMasterSendPDULength = SendPDULength;
 8002504:	4b01      	ldr	r3, [pc, #4]	; (800250c <vMBMasterSetPDUSndLength+0x8>)
 8002506:	8018      	strh	r0, [r3, #0]
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20009ffc 	.word	0x20009ffc

08002510 <usMBMasterGetPDUSndLength>:
}

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
	return usMasterSendPDULength;
 8002510:	4b01      	ldr	r3, [pc, #4]	; (8002518 <usMBMasterGetPDUSndLength+0x8>)
 8002512:	8818      	ldrh	r0, [r3, #0]
}
 8002514:	b280      	uxth	r0, r0
 8002516:	4770      	bx	lr
 8002518:	20009ffc 	.word	0x20009ffc

0800251c <vMBMasterSetCurTimerMode>:

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
	eMasterCurTimerMode = eMBTimerMode;
 800251c:	4b01      	ldr	r3, [pc, #4]	; (8002524 <vMBMasterSetCurTimerMode+0x8>)
 800251e:	7018      	strb	r0, [r3, #0]
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20009ffb 	.word	0x20009ffb

08002528 <xMBMasterRequestIsBroadcast>:
}

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
	return xFrameIsBroadcast;
 8002528:	4b01      	ldr	r3, [pc, #4]	; (8002530 <xMBMasterRequestIsBroadcast+0x8>)
 800252a:	7818      	ldrb	r0, [r3, #0]
}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20009ff4 	.word	0x20009ff4

08002534 <usMBCRC16>:

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
 8002534:	23ff      	movs	r3, #255	; 0xff
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8002536:	b510      	push	{r4, lr}
    UCHAR           ucCRCHi = 0xFF;
 8002538:	461c      	mov	r4, r3
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
 800253a:	3901      	subs	r1, #1
 800253c:	b289      	uxth	r1, r1
 800253e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002542:	4291      	cmp	r1, r2
 8002544:	d008      	beq.n	8002558 <usMBCRC16+0x24>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8002546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800254a:	405a      	eors	r2, r3
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <usMBCRC16+0x2c>)
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	4063      	eors	r3, r4
        ucCRCHi = aucCRCLo[iIndex];
 8002552:	4c04      	ldr	r4, [pc, #16]	; (8002564 <usMBCRC16+0x30>)
 8002554:	5ca4      	ldrb	r4, [r4, r2]
 8002556:	e7f0      	b.n	800253a <usMBCRC16+0x6>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
 8002558:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 800255c:	bd10      	pop	{r4, pc}
 800255e:	bf00      	nop
 8002560:	08009a51 	.word	0x08009a51
 8002564:	08009951 	.word	0x08009951

08002568 <xMBUtilSetBits>:
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 8002568:	2a08      	cmp	r2, #8

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
 800256a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256c:	4616      	mov	r6, r2
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;

    assert( ucNBits <= 8 );
 800256e:	d905      	bls.n	800257c <xMBUtilSetBits+0x14>
 8002570:	480e      	ldr	r0, [pc, #56]	; (80025ac <xMBUtilSetBits+0x44>)
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <xMBUtilSetBits+0x48>)
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <xMBUtilSetBits+0x4c>)
 8002576:	2138      	movs	r1, #56	; 0x38
 8002578:	f001 fe0c 	bl	8004194 <__assert_func>
    assert( ( size_t )BITS_UCHAR == sizeof( UCHAR ) * 8 );

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
 800257c:	08cd      	lsrs	r5, r1, #3
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 800257e:	1c6c      	adds	r4, r5, #1

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002580:	2201      	movs	r2, #1
 8002582:	40b2      	lsls	r2, r6
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002584:	5d07      	ldrb	r7, [r0, r4]
 8002586:	5d46      	ldrb	r6, [r0, r5]

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
 8002588:	3a01      	subs	r2, #1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
 800258a:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
 800258e:	b292      	uxth	r2, r2
 8002590:	408a      	lsls	r2, r1

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
 8002592:	ea46 2607 	orr.w	r6, r6, r7, lsl #8

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 8002596:	b289      	uxth	r1, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 8002598:	ea26 0202 	bic.w	r2, r6, r2

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
 800259c:	408b      	lsls	r3, r1
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
 800259e:	4313      	orrs	r3, r2
 80025a0:	b29b      	uxth	r3, r3

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
 80025a2:	5543      	strb	r3, [r0, r5]
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	5503      	strb	r3, [r0, r4]
 80025a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025aa:	bf00      	nop
 80025ac:	08009b59 	.word	0x08009b59
 80025b0:	08009b93 	.word	0x08009b93
 80025b4:	08009b86 	.word	0x08009b86

080025b8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80025b8:	2807      	cmp	r0, #7
 80025ba:	bf9a      	itte	ls
 80025bc:	4b01      	ldrls	r3, [pc, #4]	; (80025c4 <prveMBError2Exception+0xc>)
 80025be:	5c18      	ldrbls	r0, [r3, r0]
 80025c0:	2004      	movhi	r0, #4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
 80025c2:	4770      	bx	lr
 80025c4:	08009b51 	.word	0x08009b51

080025c8 <eMBMasterReqReadCoils>:
eMBMasterReqReadCoils( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usNCoils ,LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80025c8:	2810      	cmp	r0, #16
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadCoils( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usNCoils ,LONG lTimeOut )
{
 80025ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025cc:	4606      	mov	r6, r0
 80025ce:	460d      	mov	r5, r1
 80025d0:	4614      	mov	r4, r2
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80025d2:	d825      	bhi.n	8002620 <eMBMasterReqReadCoils+0x58>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff faa7 	bl	8001b28 <xMBMasterRunResTake>
 80025da:	b318      	cbz	r0, 8002624 <eMBMasterReqReadCoils+0x5c>
    else
    {
		printf("Frame to be constructed...\n");
 80025dc:	4813      	ldr	r0, [pc, #76]	; (800262c <eMBMasterReqReadCoils+0x64>)
 80025de:	f001 fe4d 	bl	800427c <puts>
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80025e2:	a801      	add	r0, sp, #4
 80025e4:	f7ff ff88 	bl	80024f8 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 80025e8:	4630      	mov	r0, r6
 80025ea:	f7ff fd7d 	bl	80020e8 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_COILS;
 80025ee:	9b01      	ldr	r3, [sp, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usCoilAddr >> 8;
 80025f4:	9b01      	ldr	r3, [sp, #4]
 80025f6:	0a2a      	lsrs	r2, r5, #8
 80025f8:	705a      	strb	r2, [r3, #1]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usCoilAddr;
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	709d      	strb	r5, [r3, #2]
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF ]    = usNCoils >> 8;
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	0a22      	lsrs	r2, r4, #8
 8002602:	70da      	strb	r2, [r3, #3]
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] = usNCoils;
 8002604:	9b01      	ldr	r3, [sp, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 8002606:	2005      	movs	r0, #5
		vMBMasterSetDestAddress(ucSndAddr);
		ucMBFrame[MB_PDU_FUNC_OFF]                 = MB_FUNC_READ_COILS;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]        = usCoilAddr >> 8;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]    = usCoilAddr;
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF ]    = usNCoils >> 8;
		ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] = usNCoils;
 8002608:	711c      	strb	r4, [r3, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 800260a:	f7ff ff7b 	bl	8002504 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 800260e:	2008      	movs	r0, #8
 8002610:	f7ff fa6e 	bl	8001af0 <xMBMasterPortEventPost>
		//eErrStatus = eMBMasterWaitRequestFinish( );
		printf("eErrStatus Request: %d\n", eErrStatus);
 8002614:	4806      	ldr	r0, [pc, #24]	; (8002630 <eMBMasterReqReadCoils+0x68>)
 8002616:	2100      	movs	r1, #0
 8002618:	f001 fdee 	bl	80041f8 <printf>
 */
eMBMasterReqErrCode
eMBMasterReqReadCoils( UCHAR ucSndAddr, USHORT usCoilAddr, USHORT usNCoils ,LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 800261c:	2000      	movs	r0, #0
 800261e:	e002      	b.n	8002626 <eMBMasterReqReadCoils+0x5e>

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8002620:	2002      	movs	r0, #2
 8002622:	e000      	b.n	8002626 <eMBMasterReqReadCoils+0x5e>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8002624:	2005      	movs	r0, #5
		//eErrStatus = eMBMasterWaitRequestFinish( );
		printf("eErrStatus Request: %d\n", eErrStatus);

    }
    return eErrStatus;
}
 8002626:	b002      	add	sp, #8
 8002628:	bd70      	pop	{r4, r5, r6, pc}
 800262a:	bf00      	nop
 800262c:	08009ba2 	.word	0x08009ba2
 8002630:	08009bbd 	.word	0x08009bbd

08002634 <eMBMasterFuncReadCoils>:

eMBException
eMBMasterFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8002634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002636:	4605      	mov	r5, r0
 8002638:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 800263a:	f7ff ff75 	bl	8002528 <xMBMasterRequestIsBroadcast>
 800263e:	b108      	cbz	r0, 8002644 <eMBMasterFuncReadCoils+0x10>
    {
    	eStatus = MB_EX_NONE;
 8002640:	2000      	movs	r0, #0
 8002642:	e02f      	b.n	80026a4 <eMBMasterFuncReadCoils+0x70>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8002644:	8823      	ldrh	r3, [r4, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d801      	bhi.n	800264e <eMBMasterFuncReadCoils+0x1a>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800264a:	2003      	movs	r0, #3
 800264c:	e02a      	b.n	80026a4 <eMBMasterFuncReadCoils+0x70>
    {
    	eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 800264e:	a801      	add	r0, sp, #4
 8002650:	f7ff ff52 	bl	80024f8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8002654:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
 8002656:	78dc      	ldrb	r4, [r3, #3]
    	eStatus = MB_EX_NONE;
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8002658:	7859      	ldrb	r1, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800265a:	789a      	ldrb	r2, [r3, #2]
        usRegAddress++;

        usCoilCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF] << 8 );
        usCoilCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_COILCNT_OFF + 1] );
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usCoilCount & 0x0007 ) != 0 )
 8002662:	0763      	lsls	r3, r4, #29
 8002664:	d003      	beq.n	800266e <eMBMasterFuncReadCoils+0x3a>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
 8002666:	08e3      	lsrs	r3, r4, #3
 8002668:	3301      	adds	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e003      	b.n	8002676 <eMBMasterFuncReadCoils+0x42>
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 800266e:	2c00      	cmp	r4, #0
 8002670:	d0eb      	beq.n	800264a <eMBMasterFuncReadCoils+0x16>
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 + 1 );
        }
        else
        {
        	ucByteCount = ( UCHAR )( usCoilCount / 8 );
 8002672:	f3c4 03c7 	ubfx	r3, r4, #3, #8
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8002676:	7868      	ldrb	r0, [r5, #1]
 8002678:	4298      	cmp	r0, r3
 800267a:	d1e6      	bne.n	800264a <eMBMasterFuncReadCoils+0x16>
    }
    else if ( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800267c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
        usRegAddress++;
 8002680:	3101      	adds	r1, #1
         */
        if( ( usCoilCount >= 1 ) &&
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 8002682:	1ca8      	adds	r0, r5, #2
 8002684:	b289      	uxth	r1, r1
 8002686:	4622      	mov	r2, r4
 8002688:	2300      	movs	r3, #0
 800268a:	f7ff f85f 	bl	800174c <eMBMasterRegCoilsCB>
			
			iNReg =  (usCoilCount / 8) + 1;
 800268e:	08e1      	lsrs	r1, r4, #3
         */
        if( ( usCoilCount >= 1 ) &&
            ( ucByteCount == pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] ) )
        {
        	/* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegCoilsCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usCoilCount, MB_REG_READ );
 8002690:	4605      	mov	r5, r0
			
			iNReg =  (usCoilCount / 8) + 1;
			
			printf("iNReg: %d\n", iNReg);
 8002692:	3101      	adds	r1, #1
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <eMBMasterFuncReadCoils+0x74>)
 8002696:	f001 fdaf 	bl	80041f8 <printf>
			{
				printf("Coil[%d]: %d\n", i, pucFrame[MB_PDU_FUNC_READ_VALUES_OFF + i]);
			}*/

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800269a:	2d00      	cmp	r5, #0
 800269c:	d0d0      	beq.n	8002640 <eMBMasterFuncReadCoils+0xc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800269e:	4628      	mov	r0, r5
 80026a0:	f7ff ff8a 	bl	80025b8 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80026a4:	b003      	add	sp, #12
 80026a6:	bd30      	pop	{r4, r5, pc}
 80026a8:	08009bd5 	.word	0x08009bd5

080026ac <eMBMasterFuncWriteCoil>:
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80026ac:	880b      	ldrh	r3, [r1, #0]
 80026ae:	2b05      	cmp	r3, #5
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80026b0:	b513      	push	{r0, r1, r4, lr}
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80026b2:	d11c      	bne.n	80026ee <eMBMasterFuncWriteCoil+0x42>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80026b4:	7902      	ldrb	r2, [r0, #4]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80026b6:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80026b8:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80026ba:	b9c2      	cbnz	r2, 80026ee <eMBMasterFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80026bc:	78c4      	ldrb	r4, [r0, #3]
 80026be:	1e60      	subs	r0, r4, #1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80026c0:	b2c0      	uxtb	r0, r0
 80026c2:	28fd      	cmp	r0, #253	; 0xfd
 80026c4:	d913      	bls.n	80026ee <eMBMasterFuncWriteCoil+0x42>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 80026c6:	2cff      	cmp	r4, #255	; 0xff

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
 80026c8:	f88d 2005 	strb.w	r2, [sp, #5]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80026cc:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
            {
                ucBuf[0] = 1;
 80026d0:	bf08      	it	eq
 80026d2:	2201      	moveq	r2, #1
            }
            else
            {
                ucBuf[0] = 0;
 80026d4:	f88d 2004 	strb.w	r2, [sp, #4]

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;
 80026d8:	3101      	adds	r1, #1
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
 80026da:	2201      	movs	r2, #1
 80026dc:	a801      	add	r0, sp, #4
 80026de:	b289      	uxth	r1, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	f7ff f833 	bl	800174c <eMBMasterRegCoilsCB>
                eMBMasterRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80026e6:	b120      	cbz	r0, 80026f2 <eMBMasterFuncWriteCoil+0x46>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80026e8:	f7ff ff66 	bl	80025b8 <prveMBError2Exception>
 80026ec:	e001      	b.n	80026f2 <eMBMasterFuncWriteCoil+0x46>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80026ee:	2003      	movs	r0, #3
 80026f0:	e7ff      	b.n	80026f2 <eMBMasterFuncWriteCoil+0x46>
    }
    return eStatus;
}
 80026f2:	b002      	add	sp, #8
 80026f4:	bd10      	pop	{r4, pc}

080026f6 <eMBMasterFuncWriteMultipleCoils>:

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80026f6:	880b      	ldrh	r3, [r1, #0]
 80026f8:	2b05      	cmp	r3, #5
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80026fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026fc:	4604      	mov	r4, r0

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 80026fe:	d110      	bne.n	8002722 <eMBMasterFuncWriteMultipleCoils+0x2c>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002700:	a801      	add	r0, sp, #4
 8002702:	f7ff fef9 	bl	80024f8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002706:	7923      	ldrb	r3, [r4, #4]
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8002708:	78e2      	ldrb	r2, [r4, #3]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 800270a:	9801      	ldr	r0, [sp, #4]

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800270c:	7865      	ldrb	r5, [r4, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800270e:	78a1      	ldrb	r1, [r4, #2]
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];
 8002710:	7944      	ldrb	r4, [r0, #5]
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8002712:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        ucByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8002716:	0753      	lsls	r3, r2, #29
 8002718:	d009      	beq.n	800272e <eMBMasterFuncWriteMultipleCoils+0x38>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 800271a:	08d3      	lsrs	r3, r2, #3
 800271c:	3301      	adds	r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e009      	b.n	8002736 <eMBMasterFuncWriteMultipleCoils+0x40>

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8002722:	f7ff ff01 	bl	8002528 <xMBMasterRequestIsBroadcast>
 8002726:	2800      	cmp	r0, #0
 8002728:	d1ea      	bne.n	8002700 <eMBMasterFuncWriteMultipleCoils+0xa>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800272a:	2003      	movs	r0, #3
 800272c:	e011      	b.n	8002752 <eMBMasterFuncWriteMultipleCoils+0x5c>
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 800272e:	2a00      	cmp	r2, #0
 8002730:	d0fb      	beq.n	800272a <eMBMasterFuncWriteMultipleCoils+0x34>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8002732:	f3c2 03c7 	ubfx	r3, r2, #3, #8
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
 8002736:	42a3      	cmp	r3, r4
 8002738:	d1f7      	bne.n	800272a <eMBMasterFuncWriteMultipleCoils+0x34>
    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 800273a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
        usRegAddress++;
 800273e:	3101      	adds	r1, #1
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) && ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
 8002740:	3006      	adds	r0, #6
 8002742:	b289      	uxth	r1, r1
 8002744:	2301      	movs	r3, #1
 8002746:	f7ff f801 	bl	800174c <eMBMasterRegCoilsCB>
                eMBMasterRegCoilsCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800274a:	b110      	cbz	r0, 8002752 <eMBMasterFuncWriteMultipleCoils+0x5c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800274c:	f7ff ff34 	bl	80025b8 <prveMBError2Exception>
 8002750:	e7ff      	b.n	8002752 <eMBMasterFuncWriteMultipleCoils+0x5c>
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002752:	b003      	add	sp, #12
 8002754:	bd30      	pop	{r4, r5, pc}
	...

08002758 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8002758:	b538      	push	{r3, r4, r5, lr}
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <eMBFuncReportSlaveID+0x1c>)
 800275c:	881c      	ldrh	r4, [r3, #0]
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800275e:	460d      	mov	r5, r1
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002760:	4622      	mov	r2, r4
 8002762:	4905      	ldr	r1, [pc, #20]	; (8002778 <eMBFuncReportSlaveID+0x20>)
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8002764:	3401      	adds	r4, #1
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8002766:	3001      	adds	r0, #1
 8002768:	f7fd fd16 	bl	8000198 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800276c:	802c      	strh	r4, [r5, #0]
    return MB_EX_NONE;
}
 800276e:	2000      	movs	r0, #0
 8002770:	bd38      	pop	{r3, r4, r5, pc}
 8002772:	bf00      	nop
 8002774:	2000a102 	.word	0x2000a102
 8002778:	2000a104 	.word	0x2000a104

0800277c <eMBMasterFuncReadDiscreteInputs>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800277c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800277e:	4604      	mov	r4, r0
 8002780:	460d      	mov	r5, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8002782:	f7ff fed1 	bl	8002528 <xMBMasterRequestIsBroadcast>
 8002786:	b108      	cbz	r0, 800278c <eMBMasterFuncReadDiscreteInputs+0x10>
    {
    	eStatus = MB_EX_NONE;
 8002788:	2000      	movs	r0, #0
 800278a:	e026      	b.n	80027da <eMBMasterFuncReadDiscreteInputs+0x5e>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800278c:	882b      	ldrh	r3, [r5, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d801      	bhi.n	8002796 <eMBMasterFuncReadDiscreteInputs+0x1a>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002792:	2003      	movs	r0, #3
 8002794:	e021      	b.n	80027da <eMBMasterFuncReadDiscreteInputs+0x5e>
    {
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002796:	a801      	add	r0, sp, #4
 8002798:	f7ff feae 	bl	80024f8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800279c:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
 800279e:	78da      	ldrb	r2, [r3, #3]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80027a0:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80027a2:	7899      	ldrb	r1, [r3, #2]
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF] << 8 );
        usDiscreteCnt |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_DISCCNT_OFF + 1] );
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

        /* Test if the quantity of coils is a multiple of 8. If not last
         * byte is only partially field with unused coils set to zero. */
        if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80027aa:	0753      	lsls	r3, r2, #29
 80027ac:	d003      	beq.n	80027b6 <eMBMasterFuncReadDiscreteInputs+0x3a>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
 80027ae:	08d3      	lsrs	r3, r2, #3
 80027b0:	3301      	adds	r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	e003      	b.n	80027be <eMBMasterFuncReadDiscreteInputs+0x42>
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 80027b6:	2a00      	cmp	r2, #0
 80027b8:	d0eb      	beq.n	8002792 <eMBMasterFuncReadDiscreteInputs+0x16>
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 + 1 );
        }
        else
        {
        	ucNBytes = ( UCHAR )( usDiscreteCnt / 8 );
 80027ba:	f3c2 03c7 	ubfx	r3, r2, #3, #8
        }

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
 80027be:	7865      	ldrb	r5, [r4, #1]
 80027c0:	429d      	cmp	r5, r3
 80027c2:	d1e6      	bne.n	8002792 <eMBMasterFuncReadDiscreteInputs+0x16>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80027c4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 80027c8:	3101      	adds	r1, #1
         * return Modbus illegal data value exception. 
         */
		if ((usDiscreteCnt >= 1) && ucNBytes == pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF])
        {
	       	/* Make callback to fill the buffer. */
			eRegStatus = eMBMasterRegDiscreteCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usDiscreteCnt );
 80027ca:	1ca0      	adds	r0, r4, #2
 80027cc:	b289      	uxth	r1, r1
 80027ce:	f7fe ffff 	bl	80017d0 <eMBMasterRegDiscreteCB>

			/* If an error occured convert it into a Modbus exception. */
			if( eRegStatus != MB_ENOERR )
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d0d8      	beq.n	8002788 <eMBMasterFuncReadDiscreteInputs+0xc>
			{
				eStatus = prveMBError2Exception( eRegStatus );
 80027d6:	f7ff feef 	bl	80025b8 <prveMBError2Exception>
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80027da:	b003      	add	sp, #12
 80027dc:	bd30      	pop	{r4, r5, pc}
	...

080027e0 <eMBMasterFuncReadInputRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80027e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027e2:	4604      	mov	r4, r0
	USHORT	 		i;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

	printf("Start Read Input...\n");
 80027e4:	4814      	ldr	r0, [pc, #80]	; (8002838 <eMBMasterFuncReadInputRegister+0x58>)
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80027e6:	460d      	mov	r5, r1
	USHORT	 		i;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

	printf("Start Read Input...\n");
 80027e8:	f001 fd48 	bl	800427c <puts>
    /* If this request is broadcast, and it's read mode. This request don't need execute. */
	if ( xMBMasterRequestIsBroadcast() )
 80027ec:	f7ff fe9c 	bl	8002528 <xMBMasterRequestIsBroadcast>
 80027f0:	b108      	cbz	r0, 80027f6 <eMBMasterFuncReadInputRegister+0x16>
	{
		eStatus = MB_EX_NONE;
 80027f2:	2000      	movs	r0, #0
 80027f4:	e01e      	b.n	8002834 <eMBMasterFuncReadInputRegister+0x54>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80027f6:	882b      	ldrh	r3, [r5, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d801      	bhi.n	8002800 <eMBMasterFuncReadInputRegister+0x20>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80027fc:	2003      	movs	r0, #3
 80027fe:	e019      	b.n	8002834 <eMBMasterFuncReadInputRegister+0x54>
	{
		eStatus = MB_EX_NONE;
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002800:	a801      	add	r0, sp, #4
 8002802:	f7ff fe79 	bl	80024f8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8002806:	9b01      	ldr	r3, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8002808:	78da      	ldrb	r2, [r3, #3]
		eStatus = MB_EX_NONE;
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800280a:	7858      	ldrb	r0, [r3, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800280c:	7899      	ldrb	r1, [r3, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 800280e:	791b      	ldrb	r3, [r3, #4]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8002810:	ea53 2202 	orrs.w	r2, r3, r2, lsl #8
 8002814:	d0f2      	beq.n	80027fc <eMBMasterFuncReadInputRegister+0x1c>
 8002816:	7863      	ldrb	r3, [r4, #1]
 8002818:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800281c:	d1ee      	bne.n	80027fc <eMBMasterFuncReadInputRegister+0x1c>
	}
	else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 800281e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
        usRegAddress++;
 8002822:	3101      	adds	r1, #1
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8002824:	1ca0      	adds	r0, r4, #2
 8002826:	b289      	uxth	r1, r1
 8002828:	f7fe ff20 	bl	800166c <eMBMasterRegInputCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800282c:	2800      	cmp	r0, #0
 800282e:	d0e0      	beq.n	80027f2 <eMBMasterFuncReadInputRegister+0x12>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8002830:	f7ff fec2 	bl	80025b8 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 8002834:	b003      	add	sp, #12
 8002836:	bd30      	pop	{r4, r5, pc}
 8002838:	08009be0 	.word	0x08009be0

0800283c <eMBMasterFuncWriteHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800283c:	b508      	push	{r3, lr}
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 800283e:	880b      	ldrh	r3, [r1, #0]
 8002840:	2b05      	cmp	r3, #5
 8002842:	d10f      	bne.n	8002864 <eMBMasterFuncWriteHoldingRegister+0x28>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002844:	7883      	ldrb	r3, [r0, #2]
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8002846:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8002848:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegAddress++;
 800284c:	3101      	adds	r1, #1

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 800284e:	2201      	movs	r2, #1
 8002850:	3003      	adds	r0, #3
 8002852:	b289      	uxth	r1, r1
 8002854:	4613      	mov	r3, r2
 8002856:	f7fe ff45 	bl	80016e4 <eMBMasterRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 800285a:	b128      	cbz	r0, 8002868 <eMBMasterFuncWriteHoldingRegister+0x2c>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800285c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
        {
            eStatus = prveMBError2Exception( eRegStatus );
 8002860:	f7ff beaa 	b.w	80025b8 <prveMBError2Exception>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002864:	2003      	movs	r0, #3
 8002866:	bd08      	pop	{r3, pc}
    }
    return eStatus;
}
 8002868:	bd08      	pop	{r3, pc}

0800286a <eMBMasterFuncWriteMultipleHoldingRegister>:

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 800286a:	880b      	ldrh	r3, [r1, #0]
 800286c:	2b05      	cmp	r3, #5
    return eErrStatus;
}

eMBException
eMBMasterFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800286e:	b513      	push	{r0, r1, r4, lr}

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8002870:	d10e      	bne.n	8002890 <eMBMasterFuncWriteMultipleHoldingRegister+0x26>
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002872:	a801      	add	r0, sp, #4
 8002874:	f7ff fe40 	bl	80024f8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 8002878:	9801      	ldr	r0, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
 800287a:	78c4      	ldrb	r4, [r0, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 800287c:	7902      	ldrb	r2, [r0, #4]

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
 800287e:	7841      	ldrb	r1, [r0, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 8002880:	7883      	ldrb	r3, [r0, #2]
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF] << 8 );
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] );
 8002882:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
 8002886:	7944      	ldrb	r4, [r0, #5]
 8002888:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
 800288c:	d104      	bne.n	8002898 <eMBMasterFuncWriteMultipleHoldingRegister+0x2e>
 800288e:	e005      	b.n	800289c <eMBMasterFuncWriteMultipleHoldingRegister+0x32>

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
 8002890:	f7ff fe4a 	bl	8002528 <xMBMasterRequestIsBroadcast>
 8002894:	2800      	cmp	r0, #0
 8002896:	d1ec      	bne.n	8002872 <eMBMasterFuncWriteMultipleHoldingRegister+0x8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002898:	2003      	movs	r0, #3
 800289a:	e00b      	b.n	80028b4 <eMBMasterFuncWriteMultipleHoldingRegister+0x4a>
    /* If this request is broadcast, the *usLen is not need check. */
    if( ( *usLen == MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_MUL_SIZE ) || xMBMasterRequestIsBroadcast() )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1] );
 800289c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegAddress++;
 80028a0:	3101      	adds	r1, #1
        ucRegByteCount = ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF];

        if( ucRegByteCount == 2 * usRegCount )
        {
            /* Make callback to update the register values. */
            eRegStatus =
 80028a2:	3006      	adds	r0, #6
 80028a4:	b289      	uxth	r1, r1
 80028a6:	2301      	movs	r3, #1
 80028a8:	f7fe ff1c 	bl	80016e4 <eMBMasterRegHoldingCB>
                eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80028ac:	b110      	cbz	r0, 80028b4 <eMBMasterFuncWriteMultipleHoldingRegister+0x4a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80028ae:	f7ff fe83 	bl	80025b8 <prveMBError2Exception>
 80028b2:	e7ff      	b.n	80028b4 <eMBMasterFuncWriteMultipleHoldingRegister+0x4a>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 80028b4:	b002      	add	sp, #8
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <eMBMasterReqReadHoldingRegister>:
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80028b8:	2810      	cmp	r0, #16
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
 80028ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80028bc:	4606      	mov	r6, r0
 80028be:	460d      	mov	r5, r1
 80028c0:	4614      	mov	r4, r2
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 80028c2:	d81e      	bhi.n	8002902 <eMBMasterReqReadHoldingRegister+0x4a>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f92f 	bl	8001b28 <xMBMasterRunResTake>
 80028ca:	b1e0      	cbz	r0, 8002906 <eMBMasterReqReadHoldingRegister+0x4e>
    else
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 80028cc:	a801      	add	r0, sp, #4
 80028ce:	f7ff fe13 	bl	80024f8 <vMBMasterGetPDUSndBuf>
		vMBMasterSetDestAddress(ucSndAddr);
 80028d2:	4630      	mov	r0, r6
 80028d4:	f7ff fc08 	bl	80020e8 <vMBMasterSetDestAddress>
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
 80028d8:	9b01      	ldr	r3, [sp, #4]
 80028da:	2203      	movs	r2, #3
 80028dc:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	0a2a      	lsrs	r2, r5, #8
 80028e2:	705a      	strb	r2, [r3, #1]
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	709d      	strb	r5, [r3, #2]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
 80028e8:	9b01      	ldr	r3, [sp, #4]
 80028ea:	0a22      	lsrs	r2, r4, #8
 80028ec:	70da      	strb	r2, [r3, #3]
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 80028ee:	9b01      	ldr	r3, [sp, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 80028f0:	2005      	movs	r0, #5
		vMBMasterSetDestAddress(ucSndAddr);
		ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_READ_HOLDING_REGISTER;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF]       = usRegAddr >> 8;
		ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1]   = usRegAddr;
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF]     = usNRegs >> 8;
		ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] = usNRegs;
 80028f2:	711c      	strb	r4, [r3, #4]
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
 80028f4:	f7ff fe06 	bl	8002504 <vMBMasterSetPDUSndLength>
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 80028f8:	2008      	movs	r0, #8
 80028fa:	f7ff f8f9 	bl	8001af0 <xMBMasterPortEventPost>
 */
eMBMasterReqErrCode
eMBMasterReqReadHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usNRegs, LONG lTimeOut )
{
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80028fe:	2000      	movs	r0, #0
 8002900:	e002      	b.n	8002908 <eMBMasterReqReadHoldingRegister+0x50>

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8002902:	2002      	movs	r0, #2
 8002904:	e000      	b.n	8002908 <eMBMasterReqReadHoldingRegister+0x50>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8002906:	2005      	movs	r0, #5
		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_READ_SIZE );
		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
		//eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
}
 8002908:	b002      	add	sp, #8
 800290a:	bd70      	pop	{r4, r5, r6, pc}

0800290c <eMBMasterFuncReadHoldingRegister>:

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800290c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800290e:	4605      	mov	r5, r0
 8002910:	460e      	mov	r6, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8002912:	f7ff fe09 	bl	8002528 <xMBMasterRequestIsBroadcast>
 8002916:	4604      	mov	r4, r0
 8002918:	b108      	cbz	r0, 800291e <eMBMasterFuncReadHoldingRegister+0x12>
    {
    	eStatus = MB_EX_NONE;
 800291a:	2000      	movs	r0, #0
 800291c:	e01f      	b.n	800295e <eMBMasterFuncReadHoldingRegister+0x52>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 800291e:	8833      	ldrh	r3, [r6, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d801      	bhi.n	8002928 <eMBMasterFuncReadHoldingRegister+0x1c>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8002924:	2003      	movs	r0, #3
 8002926:	e01a      	b.n	800295e <eMBMasterFuncReadHoldingRegister+0x52>
    {
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002928:	a801      	add	r0, sp, #4
 800292a:	f7ff fde5 	bl	80024f8 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800292e:	9801      	ldr	r0, [sp, #4]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
        usRegAddress++;

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8002930:	78c3      	ldrb	r3, [r0, #3]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8002932:	7902      	ldrb	r2, [r0, #4]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 8002934:	7846      	ldrb	r6, [r0, #1]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8002936:	7881      	ldrb	r1, [r0, #2]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8002938:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 800293c:	d0f2      	beq.n	8002924 <eMBMasterFuncReadHoldingRegister+0x18>
 800293e:	786b      	ldrb	r3, [r5, #1]
 8002940:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8002944:	d1ee      	bne.n	8002924 <eMBMasterFuncReadHoldingRegister+0x18>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
    {
		vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8002946:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
        usRegAddress++;
 800294a:	3101      	adds	r1, #1
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 800294c:	1ca8      	adds	r0, r5, #2
 800294e:	b289      	uxth	r1, r1
 8002950:	4623      	mov	r3, r4
 8002952:	f7fe fec7 	bl	80016e4 <eMBMasterRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8002956:	2800      	cmp	r0, #0
 8002958:	d0df      	beq.n	800291a <eMBMasterFuncReadHoldingRegister+0xe>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800295a:	f7ff fe2d 	bl	80025b8 <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
 800295e:	b002      	add	sp, #8
 8002960:	bd70      	pop	{r4, r5, r6, pc}

08002962 <eMBMasterFuncReadWriteMultipleHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8002962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002964:	4605      	mov	r5, r0
 8002966:	460c      	mov	r4, r1

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8002968:	f7ff fdde 	bl	8002528 <xMBMasterRequestIsBroadcast>
 800296c:	b108      	cbz	r0, 8002972 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x10>
    {
    	eStatus = MB_EX_NONE;
 800296e:	2000      	movs	r0, #0
 8002970:	e032      	b.n	80029d8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x76>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
 8002972:	8823      	ldrh	r3, [r4, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d9fa      	bls.n	800296e <eMBMasterFuncReadWriteMultipleHoldingRegister+0xc>
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
 8002978:	a801      	add	r0, sp, #4
 800297a:	f7ff fdbd 	bl	80024f8 <vMBMasterGetPDUSndBuf>
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 800297e:	9801      	ldr	r0, [sp, #4]
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8002980:	f895 c001 	ldrb.w	ip, [r5, #1]
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8002984:	7903      	ldrb	r3, [r0, #4]
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
 8002986:	78c6      	ldrb	r6, [r0, #3]
    	eStatus = MB_EX_NONE;
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
 8002988:	7847      	ldrb	r7, [r0, #1]
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 800298a:	7884      	ldrb	r4, [r0, #2]
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
 800298c:	7941      	ldrb	r1, [r0, #5]
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800298e:	f890 e007 	ldrb.w	lr, [r0, #7]
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );
 8002992:	7a02      	ldrb	r2, [r0, #8]
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );
 8002994:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 8002998:	ebbc 0f46 	cmp.w	ip, r6, lsl #1

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 800299c:	7983      	ldrb	r3, [r0, #6]
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF] << 8U );
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
 800299e:	d11a      	bne.n	80029d6 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x74>

        usRegReadCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_ADDR_OFF + 1] );
 80029a0:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        usRegWriteAddress++;
 80029a4:	3101      	adds	r1, #1
        usRegWriteCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_REGCNT_OFF + 1] );

        if( ( 2 * usRegReadCount ) == pucFrame[MB_PDU_FUNC_READWRITE_READ_BYTECNT_OFF] )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBMasterRegHoldingCB( &ucMBFrame[MB_PDU_REQ_READWRITE_WRITE_VALUES_OFF],
 80029a6:	2301      	movs	r3, #1
 80029a8:	300a      	adds	r0, #10
 80029aa:	b289      	uxth	r1, r1
 80029ac:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 80029b0:	f7fe fe98 	bl	80016e4 <eMBMasterRegHoldingCB>
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80029b4:	4603      	mov	r3, r0
 80029b6:	b950      	cbnz	r0, 80029ce <eMBMasterFuncReadWriteMultipleHoldingRegister+0x6c>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READWRITE_SIZE_MIN )
    {
    	vMBMasterGetPDUSndBuf(&ucMBFrame);
        usRegReadAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF] << 8U );
        usRegReadAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READWRITE_READ_ADDR_OFF + 1] );
 80029b8:	ea44 2107 	orr.w	r1, r4, r7, lsl #8
        usRegReadAddress++;
 80029bc:	3101      	adds	r1, #1
                                           usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
            {
                /* Make the read callback. */
				eRegStatus = eMBMasterRegHoldingCB(&pucFrame[MB_PDU_FUNC_READWRITE_READ_VALUES_OFF],
 80029be:	1ca8      	adds	r0, r5, #2
 80029c0:	b289      	uxth	r1, r1
 80029c2:	4632      	mov	r2, r6
 80029c4:	f7fe fe8e 	bl	80016e4 <eMBMasterRegHoldingCB>
						                      usRegReadAddress, usRegReadCount, MB_REG_READ);
            }
            if( eRegStatus != MB_ENOERR )
 80029c8:	4603      	mov	r3, r0
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d0cf      	beq.n	800296e <eMBMasterFuncReadWriteMultipleHoldingRegister+0xc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fdf2 	bl	80025b8 <prveMBError2Exception>
 80029d4:	e000      	b.n	80029d8 <eMBMasterFuncReadWriteMultipleHoldingRegister+0x76>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80029d6:	2003      	movs	r0, #3
        }
    }
    return eStatus;
}
 80029d8:	b003      	add	sp, #12
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029dc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	2b0f      	cmp	r3, #15
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e2:	4604      	mov	r4, r0
  uint32_t tickstart = 0;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80029e4:	d904      	bls.n	80029f0 <HAL_RCC_OscConfig+0x14>
 80029e6:	48a2      	ldr	r0, [pc, #648]	; (8002c70 <HAL_RCC_OscConfig+0x294>)
 80029e8:	f240 1115 	movw	r1, #277	; 0x115
 80029ec:	f7fe fefc 	bl	80017e8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	07d8      	lsls	r0, r3, #31
 80029f4:	d403      	bmi.n	80029fe <HAL_RCC_OscConfig+0x22>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	0799      	lsls	r1, r3, #30
 80029fa:	d456      	bmi.n	8002aaa <HAL_RCC_OscConfig+0xce>
 80029fc:	e0b7      	b.n	8002b6e <HAL_RCC_OscConfig+0x192>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80029fe:	6863      	ldr	r3, [r4, #4]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d906      	bls.n	8002a12 <HAL_RCC_OscConfig+0x36>
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d004      	beq.n	8002a12 <HAL_RCC_OscConfig+0x36>
 8002a08:	4899      	ldr	r0, [pc, #612]	; (8002c70 <HAL_RCC_OscConfig+0x294>)
 8002a0a:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8002a0e:	f7fe feeb 	bl	80017e8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a12:	4b98      	ldr	r3, [pc, #608]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	f002 020c 	and.w	r2, r2, #12
 8002a1a:	2a04      	cmp	r2, #4
 8002a1c:	d007      	beq.n	8002a2e <HAL_RCC_OscConfig+0x52>
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	f002 020c 	and.w	r2, r2, #12
 8002a24:	2a08      	cmp	r2, #8
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x64>
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	025a      	lsls	r2, r3, #9
 8002a2c:	d508      	bpl.n	8002a40 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2e:	4b91      	ldr	r3, [pc, #580]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	039b      	lsls	r3, r3, #14
 8002a34:	d5df      	bpl.n	80029f6 <HAL_RCC_OscConfig+0x1a>
 8002a36:	6863      	ldr	r3, [r4, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1dc      	bne.n	80029f6 <HAL_RCC_OscConfig+0x1a>
      {
        return HAL_ERROR;
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002a40:	4d8d      	ldr	r5, [pc, #564]	; (8002c78 <HAL_RCC_OscConfig+0x29c>)
 8002a42:	2300      	movs	r3, #0
 8002a44:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f001 fb99 	bl	800417c <HAL_GetTick>
 8002a4a:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4c:	4b89      	ldr	r3, [pc, #548]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	039f      	lsls	r7, r3, #14
 8002a52:	d508      	bpl.n	8002a66 <HAL_RCC_OscConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f001 fb92 	bl	800417c <HAL_GetTick>
 8002a58:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a5c:	1b80      	subs	r0, r0, r6
 8002a5e:	4298      	cmp	r0, r3
 8002a60:	d9f4      	bls.n	8002a4c <HAL_RCC_OscConfig+0x70>
        {
          return HAL_TIMEOUT;
 8002a62:	2003      	movs	r0, #3
 8002a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	7923      	ldrb	r3, [r4, #4]
 8002a68:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a6a:	6863      	ldr	r3, [r4, #4]
 8002a6c:	b173      	cbz	r3, 8002a8c <HAL_RCC_OscConfig+0xb0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f001 fb85 	bl	800417c <HAL_GetTick>
 8002a72:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a74:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0398      	lsls	r0, r3, #14
 8002a7a:	d4bc      	bmi.n	80029f6 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f001 fb7e 	bl	800417c <HAL_GetTick>
 8002a80:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a84:	1b40      	subs	r0, r0, r5
 8002a86:	4298      	cmp	r0, r3
 8002a88:	d9f4      	bls.n	8002a74 <HAL_RCC_OscConfig+0x98>
 8002a8a:	e7ea      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f001 fb76 	bl	800417c <HAL_GetTick>
 8002a90:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	0399      	lsls	r1, r3, #14
 8002a98:	d5ad      	bpl.n	80029f6 <HAL_RCC_OscConfig+0x1a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9a:	f001 fb6f 	bl	800417c <HAL_GetTick>
 8002a9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aa2:	1b40      	subs	r0, r0, r5
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	d9f4      	bls.n	8002a92 <HAL_RCC_OscConfig+0xb6>
 8002aa8:	e7db      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002aaa:	68e3      	ldr	r3, [r4, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d904      	bls.n	8002aba <HAL_RCC_OscConfig+0xde>
 8002ab0:	486f      	ldr	r0, [pc, #444]	; (8002c70 <HAL_RCC_OscConfig+0x294>)
 8002ab2:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8002ab6:	f7fe fe97 	bl	80017e8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002aba:	6923      	ldr	r3, [r4, #16]
 8002abc:	2b1f      	cmp	r3, #31
 8002abe:	d904      	bls.n	8002aca <HAL_RCC_OscConfig+0xee>
 8002ac0:	486b      	ldr	r0, [pc, #428]	; (8002c70 <HAL_RCC_OscConfig+0x294>)
 8002ac2:	f240 115b 	movw	r1, #347	; 0x15b
 8002ac6:	f7fe fe8f 	bl	80017e8 <assert_failed>
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	f012 0f0c 	tst.w	r2, #12
 8002ad2:	d007      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x108>
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	f002 020c 	and.w	r2, r2, #12
 8002ada:	2a08      	cmp	r2, #8
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x134>
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	025a      	lsls	r2, r3, #9
 8002ae2:	d415      	bmi.n	8002b10 <HAL_RCC_OscConfig+0x134>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae4:	4a63      	ldr	r2, [pc, #396]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	079b      	lsls	r3, r3, #30
 8002aea:	d502      	bpl.n	8002af2 <HAL_RCC_OscConfig+0x116>
 8002aec:	68e3      	ldr	r3, [r4, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d1a4      	bne.n	8002a3c <HAL_RCC_OscConfig+0x60>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af2:	6811      	ldr	r1, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	23f8      	movs	r3, #248	; 0xf8
 8002af6:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	6920      	ldr	r0, [r4, #16]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4098      	lsls	r0, r3
 8002b04:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002b08:	ea40 0301 	orr.w	r3, r0, r1
 8002b0c:	6013      	str	r3, [r2, #0]
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e02e      	b.n	8002b6e <HAL_RCC_OscConfig+0x192>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b10:	68e2      	ldr	r2, [r4, #12]
 8002b12:	4b5a      	ldr	r3, [pc, #360]	; (8002c7c <HAL_RCC_OscConfig+0x2a0>)
 8002b14:	b1ea      	cbz	r2, 8002b52 <HAL_RCC_OscConfig+0x176>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f001 fb2f 	bl	800417c <HAL_GetTick>
 8002b1e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b20:	4954      	ldr	r1, [pc, #336]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002b22:	680b      	ldr	r3, [r1, #0]
 8002b24:	079f      	lsls	r7, r3, #30
 8002b26:	d405      	bmi.n	8002b34 <HAL_RCC_OscConfig+0x158>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f001 fb28 	bl	800417c <HAL_GetTick>
 8002b2c:	1b40      	subs	r0, r0, r5
 8002b2e:	2864      	cmp	r0, #100	; 0x64
 8002b30:	d9f6      	bls.n	8002b20 <HAL_RCC_OscConfig+0x144>
 8002b32:	e796      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b34:	680a      	ldr	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	23f8      	movs	r3, #248	; 0xf8
 8002b38:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	fab3 f383 	clz	r3, r3
 8002b40:	6920      	ldr	r0, [r4, #16]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	4098      	lsls	r0, r3
 8002b46:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002b4a:	ea40 0302 	orr.w	r3, r0, r2
 8002b4e:	600b      	str	r3, [r1, #0]
 8002b50:	e00d      	b.n	8002b6e <HAL_RCC_OscConfig+0x192>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f001 fb12 	bl	800417c <HAL_GetTick>
 8002b58:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	079e      	lsls	r6, r3, #30
 8002b60:	d505      	bpl.n	8002b6e <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b62:	f001 fb0b 	bl	800417c <HAL_GetTick>
 8002b66:	1b40      	subs	r0, r0, r5
 8002b68:	2864      	cmp	r0, #100	; 0x64
 8002b6a:	d9f6      	bls.n	8002b5a <HAL_RCC_OscConfig+0x17e>
 8002b6c:	e779      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	071d      	lsls	r5, r3, #28
 8002b72:	d403      	bmi.n	8002b7c <HAL_RCC_OscConfig+0x1a0>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	0758      	lsls	r0, r3, #29
 8002b78:	d428      	bmi.n	8002bcc <HAL_RCC_OscConfig+0x1f0>
 8002b7a:	e052      	b.n	8002c22 <HAL_RCC_OscConfig+0x246>
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002b7c:	6963      	ldr	r3, [r4, #20]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d904      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1b0>
 8002b82:	483b      	ldr	r0, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x294>)
 8002b84:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8002b88:	f7fe fe2e 	bl	80017e8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b8c:	6962      	ldr	r2, [r4, #20]
 8002b8e:	4b3c      	ldr	r3, [pc, #240]	; (8002c80 <HAL_RCC_OscConfig+0x2a4>)
 8002b90:	b172      	cbz	r2, 8002bb0 <HAL_RCC_OscConfig+0x1d4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f001 faf1 	bl	800417c <HAL_GetTick>
 8002b9a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9c:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba0:	0799      	lsls	r1, r3, #30
 8002ba2:	d4e7      	bmi.n	8002b74 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba4:	f001 faea 	bl	800417c <HAL_GetTick>
 8002ba8:	1b40      	subs	r0, r0, r5
 8002baa:	2864      	cmp	r0, #100	; 0x64
 8002bac:	d9f6      	bls.n	8002b9c <HAL_RCC_OscConfig+0x1c0>
 8002bae:	e758      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb0:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f001 fae3 	bl	800417c <HAL_GetTick>
 8002bb6:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	079a      	lsls	r2, r3, #30
 8002bbe:	d5d9      	bpl.n	8002b74 <HAL_RCC_OscConfig+0x198>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc0:	f001 fadc 	bl	800417c <HAL_GetTick>
 8002bc4:	1b40      	subs	r0, r0, r5
 8002bc6:	2864      	cmp	r0, #100	; 0x64
 8002bc8:	d9f6      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x1dc>
 8002bca:	e74a      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002bcc:	68a3      	ldr	r3, [r4, #8]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d830      	bhi.n	8002c34 <HAL_RCC_OscConfig+0x258>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	; 0x40
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bdc:	f5a2 32e4 	sub.w	r2, r2, #116736	; 0x1c800
 8002be0:	6813      	ldr	r3, [r2, #0]
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be8:	f001 fac8 	bl	800417c <HAL_GetTick>
 8002bec:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_OscConfig+0x2a8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	05db      	lsls	r3, r3, #23
 8002bf4:	d526      	bpl.n	8002c44 <HAL_RCC_OscConfig+0x268>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002bf6:	4d24      	ldr	r5, [pc, #144]	; (8002c88 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f001 fabe 	bl	800417c <HAL_GetTick>
 8002c00:	4606      	mov	r6, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	079f      	lsls	r7, r3, #30
 8002c08:	d422      	bmi.n	8002c50 <HAL_RCC_OscConfig+0x274>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0a:	7a23      	ldrb	r3, [r4, #8]
 8002c0c:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 8002c0e:	68a3      	ldr	r3, [r4, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d13b      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2b0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f001 fab2 	bl	800417c <HAL_GetTick>
 8002c18:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_OscConfig+0x298>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	079e      	lsls	r6, r3, #30
 8002c20:	d51e      	bpl.n	8002c60 <HAL_RCC_OscConfig+0x284>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002c22:	69a3      	ldr	r3, [r4, #24]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d940      	bls.n	8002caa <HAL_RCC_OscConfig+0x2ce>
 8002c28:	4811      	ldr	r0, [pc, #68]	; (8002c70 <HAL_RCC_OscConfig+0x294>)
 8002c2a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c2e:	f7fe fddb 	bl	80017e8 <assert_failed>
 8002c32:	e03a      	b.n	8002caa <HAL_RCC_OscConfig+0x2ce>
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002c34:	2b05      	cmp	r3, #5
 8002c36:	d0cc      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
 8002c38:	480d      	ldr	r0, [pc, #52]	; (8002c70 <HAL_RCC_OscConfig+0x294>)
 8002c3a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002c3e:	f7fe fdd3 	bl	80017e8 <assert_failed>
 8002c42:	e7c6      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1f6>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f001 fa9a 	bl	800417c <HAL_GetTick>
 8002c48:	1b40      	subs	r0, r0, r5
 8002c4a:	2864      	cmp	r0, #100	; 0x64
 8002c4c:	d9cf      	bls.n	8002bee <HAL_RCC_OscConfig+0x212>
 8002c4e:	e708      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f001 fa94 	bl	800417c <HAL_GetTick>
 8002c54:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c58:	1b80      	subs	r0, r0, r6
 8002c5a:	4298      	cmp	r0, r3
 8002c5c:	d9d1      	bls.n	8002c02 <HAL_RCC_OscConfig+0x226>
 8002c5e:	e700      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f001 fa8c 	bl	800417c <HAL_GetTick>
 8002c64:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c68:	1b40      	subs	r0, r0, r5
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	d9d5      	bls.n	8002c1a <HAL_RCC_OscConfig+0x23e>
 8002c6e:	e6f8      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
 8002c70:	08009c04 	.word	0x08009c04
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40023802 	.word	0x40023802
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
 8002c84:	40007000 	.word	0x40007000
 8002c88:	40023870 	.word	0x40023870
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f001 fa76 	bl	800417c <HAL_GetTick>
 8002c90:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <HAL_RCC_OscConfig+0x3f8>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	0798      	lsls	r0, r3, #30
 8002c98:	d5c3      	bpl.n	8002c22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f001 fa6f 	bl	800417c <HAL_GetTick>
 8002c9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ca2:	1b40      	subs	r0, r0, r5
 8002ca4:	4298      	cmp	r0, r3
 8002ca6:	d9f4      	bls.n	8002c92 <HAL_RCC_OscConfig+0x2b6>
 8002ca8:	e6db      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002caa:	69a2      	ldr	r2, [r4, #24]
 8002cac:	b90a      	cbnz	r2, 8002cb2 <HAL_RCC_OscConfig+0x2d6>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002cae:	2000      	movs	r0, #0
 8002cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cb2:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_RCC_OscConfig+0x3f8>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	f43f aebe 	beq.w	8002a3c <HAL_RCC_OscConfig+0x60>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc0:	2a02      	cmp	r2, #2
 8002cc2:	4d45      	ldr	r5, [pc, #276]	; (8002dd8 <HAL_RCC_OscConfig+0x3fc>)
 8002cc4:	d175      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3d6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002cc6:	69e3      	ldr	r3, [r4, #28]
 8002cc8:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8002ccc:	d004      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2fc>
 8002cce:	4843      	ldr	r0, [pc, #268]	; (8002ddc <HAL_RCC_OscConfig+0x400>)
 8002cd0:	f240 2111 	movw	r1, #529	; 0x211
 8002cd4:	f7fe fd88 	bl	80017e8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002cd8:	6a23      	ldr	r3, [r4, #32]
 8002cda:	2b3f      	cmp	r3, #63	; 0x3f
 8002cdc:	d904      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x30c>
 8002cde:	483f      	ldr	r0, [pc, #252]	; (8002ddc <HAL_RCC_OscConfig+0x400>)
 8002ce0:	f240 2112 	movw	r1, #530	; 0x212
 8002ce4:	f7fe fd80 	bl	80017e8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cea:	3bc0      	subs	r3, #192	; 0xc0
 8002cec:	2bf0      	cmp	r3, #240	; 0xf0
 8002cee:	d904      	bls.n	8002cfa <HAL_RCC_OscConfig+0x31e>
 8002cf0:	483a      	ldr	r0, [pc, #232]	; (8002ddc <HAL_RCC_OscConfig+0x400>)
 8002cf2:	f240 2113 	movw	r1, #531	; 0x213
 8002cf6:	f7fe fd77 	bl	80017e8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002cfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cfc:	f023 0204 	bic.w	r2, r3, #4
 8002d00:	2a02      	cmp	r2, #2
 8002d02:	d008      	beq.n	8002d16 <HAL_RCC_OscConfig+0x33a>
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d006      	beq.n	8002d16 <HAL_RCC_OscConfig+0x33a>
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d004      	beq.n	8002d16 <HAL_RCC_OscConfig+0x33a>
 8002d0c:	4833      	ldr	r0, [pc, #204]	; (8002ddc <HAL_RCC_OscConfig+0x400>)
 8002d0e:	f44f 7105 	mov.w	r1, #532	; 0x214
 8002d12:	f7fe fd69 	bl	80017e8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d18:	3b04      	subs	r3, #4
 8002d1a:	2b0b      	cmp	r3, #11
 8002d1c:	d904      	bls.n	8002d28 <HAL_RCC_OscConfig+0x34c>
 8002d1e:	482f      	ldr	r0, [pc, #188]	; (8002ddc <HAL_RCC_OscConfig+0x400>)
 8002d20:	f240 2115 	movw	r1, #533	; 0x215
 8002d24:	f7fe fd60 	bl	80017e8 <assert_failed>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	2300      	movs	r3, #0
 8002d2a:	602b      	str	r3, [r5, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f001 fa26 	bl	800417c <HAL_GetTick>
 8002d30:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4e28      	ldr	r6, [pc, #160]	; (8002dd4 <HAL_RCC_OscConfig+0x3f8>)
 8002d34:	6833      	ldr	r3, [r6, #0]
 8002d36:	0199      	lsls	r1, r3, #6
 8002d38:	d505      	bpl.n	8002d46 <HAL_RCC_OscConfig+0x36a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f001 fa1f 	bl	800417c <HAL_GetTick>
 8002d3e:	1bc0      	subs	r0, r0, r7
 8002d40:	2864      	cmp	r0, #100	; 0x64
 8002d42:	d9f6      	bls.n	8002d32 <HAL_RCC_OscConfig+0x356>
 8002d44:	e68d      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f647 70c0 	movw	r0, #32704	; 0x7fc0
 8002d4a:	fa90 f0a0 	rbit	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	fab0 f080 	clz	r0, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002d56:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	fab1 f181 	clz	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002d62:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	fab2 f282 	clz	r2, r2
 8002d6a:	6a27      	ldr	r7, [r4, #32]
 8002d6c:	69e3      	ldr	r3, [r4, #28]
 8002d6e:	433b      	orrs	r3, r7
 8002d70:	f043 5700 	orr.w	r7, r3, #536870912	; 0x20000000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d76:	b2c0      	uxtb	r0, r0
 8002d78:	4083      	lsls	r3, r0
 8002d7a:	ea47 0003 	orr.w	r0, r7, r3
 8002d7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	b2c9      	uxtb	r1, r1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	408b      	lsls	r3, r1
 8002d88:	b2d1      	uxtb	r1, r2
 8002d8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d8c:	4303      	orrs	r3, r0
 8002d8e:	408a      	lsls	r2, r1
 8002d90:	4313      	orrs	r3, r2
 8002d92:	6073      	str	r3, [r6, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d94:	2301      	movs	r3, #1
 8002d96:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f001 f9f0 	bl	800417c <HAL_GetTick>
 8002d9c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCC_OscConfig+0x3f8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	019a      	lsls	r2, r3, #6
 8002da4:	d483      	bmi.n	8002cae <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da6:	f001 f9e9 	bl	800417c <HAL_GetTick>
 8002daa:	1b00      	subs	r0, r0, r4
 8002dac:	2864      	cmp	r0, #100	; 0x64
 8002dae:	d9f6      	bls.n	8002d9e <HAL_RCC_OscConfig+0x3c2>
 8002db0:	e657      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	602b      	str	r3, [r5, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f001 f9e1 	bl	800417c <HAL_GetTick>
 8002dba:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_OscConfig+0x3f8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	f57f af74 	bpl.w	8002cae <HAL_RCC_OscConfig+0x2d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc6:	f001 f9d9 	bl	800417c <HAL_GetTick>
 8002dca:	1b00      	subs	r0, r0, r4
 8002dcc:	2864      	cmp	r0, #100	; 0x64
 8002dce:	d9f5      	bls.n	8002dbc <HAL_RCC_OscConfig+0x3e0>
 8002dd0:	e647      	b.n	8002a62 <HAL_RCC_OscConfig+0x86>
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	42470060 	.word	0x42470060
 8002ddc:	08009c04 	.word	0x08009c04

08002de0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002de0:	6803      	ldr	r3, [r0, #0]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	2b0e      	cmp	r3, #14
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de6:	b570      	push	{r4, r5, r6, lr}
 8002de8:	4604      	mov	r4, r0
 8002dea:	460d      	mov	r5, r1
  uint32_t tickstart = 0;   
 
  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002dec:	d904      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x18>
 8002dee:	48a5      	ldr	r0, [pc, #660]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 8002df0:	f240 2173 	movw	r1, #627	; 0x273
 8002df4:	f7fe fcf8 	bl	80017e8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002df8:	2d07      	cmp	r5, #7
 8002dfa:	d904      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x26>
 8002dfc:	48a1      	ldr	r0, [pc, #644]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 8002dfe:	f44f 711d 	mov.w	r1, #628	; 0x274
 8002e02:	f7fe fcf1 	bl	80017e8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e06:	4ba0      	ldr	r3, [pc, #640]	; (8003088 <HAL_RCC_ClockConfig+0x2a8>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f002 020f 	and.w	r2, r2, #15
 8002e0e:	4295      	cmp	r5, r2
 8002e10:	f240 8081 	bls.w	8002f16 <HAL_RCC_ClockConfig+0x136>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e14:	b2ea      	uxtb	r2, r5
 8002e16:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	42ab      	cmp	r3, r5
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e22:	2001      	movs	r0, #1
 8002e24:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	079e      	lsls	r6, r3, #30
 8002e2a:	d51d      	bpl.n	8002e68 <HAL_RCC_ClockConfig+0x88>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002e2c:	68a3      	ldr	r3, [r4, #8]
 8002e2e:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8002e32:	d012      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x7a>
 8002e34:	f023 0220 	bic.w	r2, r3, #32
 8002e38:	2a90      	cmp	r2, #144	; 0x90
 8002e3a:	d00e      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x7a>
 8002e3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e40:	2aa0      	cmp	r2, #160	; 0xa0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x7a>
 8002e44:	f023 0210 	bic.w	r2, r3, #16
 8002e48:	2ac0      	cmp	r2, #192	; 0xc0
 8002e4a:	d006      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x7a>
 8002e4c:	2bf0      	cmp	r3, #240	; 0xf0
 8002e4e:	d004      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x7a>
 8002e50:	488c      	ldr	r0, [pc, #560]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 8002e52:	f240 218a 	movw	r1, #650	; 0x28a
 8002e56:	f7fe fcc7 	bl	80017e8 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5a:	498c      	ldr	r1, [pc, #560]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002e5c:	688b      	ldr	r3, [r1, #8]
 8002e5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	07dd      	lsls	r5, r3, #31
 8002e6c:	d404      	bmi.n	8002e78 <HAL_RCC_ClockConfig+0x98>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	0758      	lsls	r0, r3, #29
 8002e72:	f100 80ce 	bmi.w	8003012 <HAL_RCC_ClockConfig+0x232>
 8002e76:	e0e4      	b.n	8003042 <HAL_RCC_ClockConfig+0x262>
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002e78:	6863      	ldr	r3, [r4, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d904      	bls.n	8002e88 <HAL_RCC_ClockConfig+0xa8>
 8002e7e:	4881      	ldr	r0, [pc, #516]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 8002e80:	f240 2191 	movw	r1, #657	; 0x291
 8002e84:	f7fe fcb0 	bl	80017e8 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e88:	6862      	ldr	r2, [r4, #4]
 8002e8a:	4b80      	ldr	r3, [pc, #512]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002e8c:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xb8>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e92:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8002e96:	e006      	b.n	8002ea6 <HAL_RCC_ClockConfig+0xc6>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e98:	2a02      	cmp	r2, #2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xc2>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9c:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCC_ClockConfig+0xc6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	f011 0f02 	tst.w	r1, #2
 8002ea6:	d0bc      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	f021 0103 	bic.w	r1, r1, #3
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f001 f963 	bl	800417c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	6863      	ldr	r3, [r4, #4]
 8002eb8:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	d10e      	bne.n	8002edc <HAL_RCC_ClockConfig+0xfc>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002ebe:	4b73      	ldr	r3, [pc, #460]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d0d1      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f001 f957 	bl	800417c <HAL_GetTick>
 8002ece:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ed2:	1b40      	subs	r0, r0, r5
 8002ed4:	4298      	cmp	r0, r3
 8002ed6:	d9f2      	bls.n	8002ebe <HAL_RCC_ClockConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d114      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x12a>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d0c0      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eec:	f001 f946 	bl	800417c <HAL_GetTick>
 8002ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ef4:	1b40      	subs	r0, r0, r5
 8002ef6:	4298      	cmp	r0, r3
 8002ef8:	d9f2      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x100>
 8002efa:	e7ed      	b.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f001 f93e 	bl	800417c <HAL_GetTick>
 8002f00:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f04:	1b40      	subs	r0, r0, r5
 8002f06:	4298      	cmp	r0, r3
 8002f08:	d8e6      	bhi.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002f0a:	4b60      	ldr	r3, [pc, #384]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f013 0f0c 	tst.w	r3, #12
 8002f12:	d1f3      	bne.n	8002efc <HAL_RCC_ClockConfig+0x11c>
 8002f14:	e7ab      	b.n	8002e6e <HAL_RCC_ClockConfig+0x8e>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	0799      	lsls	r1, r3, #30
 8002f1a:	d51d      	bpl.n	8002f58 <HAL_RCC_ClockConfig+0x178>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002f1c:	68a3      	ldr	r3, [r4, #8]
 8002f1e:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8002f22:	d012      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x16a>
 8002f24:	f023 0220 	bic.w	r2, r3, #32
 8002f28:	2a90      	cmp	r2, #144	; 0x90
 8002f2a:	d00e      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x16a>
 8002f2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f30:	2aa0      	cmp	r2, #160	; 0xa0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x16a>
 8002f34:	f023 0210 	bic.w	r2, r3, #16
 8002f38:	2ac0      	cmp	r2, #192	; 0xc0
 8002f3a:	d006      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x16a>
 8002f3c:	2bf0      	cmp	r3, #240	; 0xf0
 8002f3e:	d004      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x16a>
 8002f40:	4850      	ldr	r0, [pc, #320]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 8002f42:	f240 21d9 	movw	r1, #729	; 0x2d9
 8002f46:	f7fe fc4f 	bl	80017e8 <assert_failed>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4a:	4950      	ldr	r1, [pc, #320]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002f4c:	688b      	ldr	r3, [r1, #8]
 8002f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f52:	68a3      	ldr	r3, [r4, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	07da      	lsls	r2, r3, #31
 8002f5c:	d409      	bmi.n	8002f72 <HAL_RCC_ClockConfig+0x192>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <HAL_RCC_ClockConfig+0x2a8>)
 8002f60:	b2ea      	uxtb	r2, r5
 8002f62:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	42ab      	cmp	r3, r5
 8002f6c:	f47f af59 	bne.w	8002e22 <HAL_RCC_ClockConfig+0x42>
 8002f70:	e77d      	b.n	8002e6e <HAL_RCC_ClockConfig+0x8e>
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002f72:	6863      	ldr	r3, [r4, #4]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d904      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x1a2>
 8002f78:	4842      	ldr	r0, [pc, #264]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 8002f7a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8002f7e:	f7fe fc33 	bl	80017e8 <assert_failed>
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f82:	6862      	ldr	r2, [r4, #4]
 8002f84:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002f86:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f88:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_ClockConfig+0x1b2>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8002f90:	e006      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1c0>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f92:	2a02      	cmp	r2, #2
 8002f94:	d102      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x1bc>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002f9a:	e001      	b.n	8002fa0 <HAL_RCC_ClockConfig+0x1c0>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	f011 0f02 	tst.w	r1, #2
 8002fa0:	f43f af3f 	beq.w	8002e22 <HAL_RCC_ClockConfig+0x42>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	f021 0103 	bic.w	r1, r1, #3
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f001 f8e5 	bl	800417c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	6863      	ldr	r3, [r4, #4]
 8002fb4:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0x1f6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d0cb      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc6:	f001 f8d9 	bl	800417c <HAL_GetTick>
 8002fca:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fce:	1b80      	subs	r0, r0, r6
 8002fd0:	4298      	cmp	r0, r3
 8002fd2:	d9f2      	bls.n	8002fba <HAL_RCC_ClockConfig+0x1da>
 8002fd4:	e780      	b.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0x226>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d0bb      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x17e>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe6:	f001 f8c9 	bl	800417c <HAL_GetTick>
 8002fea:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fee:	1b80      	subs	r0, r0, r6
 8002ff0:	4298      	cmp	r0, r3
 8002ff2:	d9f2      	bls.n	8002fda <HAL_RCC_ClockConfig+0x1fa>
 8002ff4:	e770      	b.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff6:	f001 f8c1 	bl	800417c <HAL_GetTick>
 8002ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ffe:	1b80      	subs	r0, r0, r6
 8003000:	4298      	cmp	r0, r3
 8003002:	f63f af69 	bhi.w	8002ed8 <HAL_RCC_ClockConfig+0xf8>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8003006:	4b21      	ldr	r3, [pc, #132]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f013 0f0c 	tst.w	r3, #12
 800300e:	d1f2      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x216>
 8003010:	e7a5      	b.n	8002f5e <HAL_RCC_ClockConfig+0x17e>
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003012:	68e3      	ldr	r3, [r4, #12]
 8003014:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_ClockConfig+0x254>
 800301a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800301e:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8003022:	d007      	beq.n	8003034 <HAL_RCC_ClockConfig+0x254>
 8003024:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003028:	d004      	beq.n	8003034 <HAL_RCC_ClockConfig+0x254>
 800302a:	4816      	ldr	r0, [pc, #88]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 800302c:	f44f 714c 	mov.w	r1, #816	; 0x330
 8003030:	f7fe fbda 	bl	80017e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4915      	ldr	r1, [pc, #84]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 8003036:	688b      	ldr	r3, [r1, #8]
 8003038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800303c:	68e3      	ldr	r3, [r4, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	071b      	lsls	r3, r3, #28
 8003046:	d518      	bpl.n	800307a <HAL_RCC_ClockConfig+0x29a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003048:	6923      	ldr	r3, [r4, #16]
 800304a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800304e:	d00c      	beq.n	800306a <HAL_RCC_ClockConfig+0x28a>
 8003050:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003054:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8003058:	d007      	beq.n	800306a <HAL_RCC_ClockConfig+0x28a>
 800305a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800305e:	d004      	beq.n	800306a <HAL_RCC_ClockConfig+0x28a>
 8003060:	4808      	ldr	r0, [pc, #32]	; (8003084 <HAL_RCC_ClockConfig+0x2a4>)
 8003062:	f240 3137 	movw	r1, #823	; 0x337
 8003066:	f7fe fbbf 	bl	80017e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_RCC_ClockConfig+0x2ac>)
 800306c:	6921      	ldr	r1, [r4, #16]
 800306e:	6893      	ldr	r3, [r2, #8]
 8003070:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003074:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003078:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800307a:	200f      	movs	r0, #15
 800307c:	f001 f84e 	bl	800411c <HAL_InitTick>
  
  return HAL_OK;
 8003080:	2000      	movs	r0, #0
}
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	08009c04 	.word	0x08009c04
 8003088:	40023c00 	.word	0x40023c00
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b530      	push	{r4, r5, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003092:	4c1d      	ldr	r4, [pc, #116]	; (8003108 <HAL_RCC_GetSysClockFreq+0x78>)
 8003094:	68a3      	ldr	r3, [r4, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b04      	cmp	r3, #4
 800309c:	d030      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x70>
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d130      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0x74>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a2:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a4:	6863      	ldr	r3, [r4, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80030ae:	f647 71c0 	movw	r1, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80030b2:	6863      	ldr	r3, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	fab1 f181 	clz	r1, r1
 80030bc:	f647 70c0 	movw	r0, #32704	; 0x7fc0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80030c0:	bf04      	itt	eq
 80030c2:	4a12      	ldreq	r2, [pc, #72]	; (800310c <HAL_RCC_GetSysClockFreq+0x7c>)
 80030c4:	fbb2 f2f5 	udiveq	r2, r2, r5
 80030c8:	b2c9      	uxtb	r1, r1
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80030ca:	ea00 0003 	and.w	r0, r0, r3
 80030ce:	fa20 f001 	lsr.w	r0, r0, r1
 80030d2:	bf1c      	itt	ne
 80030d4:	490e      	ldrne	r1, [pc, #56]	; (8003110 <HAL_RCC_GetSysClockFreq+0x80>)
 80030d6:	fbb1 f2f5 	udivne	r2, r1, r5
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80030da:	fb02 f300 	mul.w	r3, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_GetSysClockFreq+0x78>)
 80030e0:	6850      	ldr	r0, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030e6:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	fab2 f282 	clz	r2, r2
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80030f4:	40d0      	lsrs	r0, r2
 80030f6:	3001      	adds	r0, #1
 80030f8:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 80030fa:	fbb3 f0f0 	udiv	r0, r3, r0
 80030fe:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <HAL_RCC_GetSysClockFreq+0x80>)
 8003102:	bd30      	pop	{r4, r5, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4801      	ldr	r0, [pc, #4]	; (800310c <HAL_RCC_GetSysClockFreq+0x7c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003106:	bd30      	pop	{r4, r5, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	00f42400 	.word	0x00f42400
 8003110:	007a1200 	.word	0x007a1200

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003116:	f7ff ffbb 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_GetHCLKFreq+0x2c>)
 800311c:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	23f0      	movs	r3, #240	; 0xf0
 8003120:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	fa22 f303 	lsr.w	r3, r2, r3
 8003132:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_RCC_GetHCLKFreq+0x30>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
 8003136:	40d8      	lsrs	r0, r3
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_RCC_GetHCLKFreq+0x34>)
 800313a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800313c:	bd08      	pop	{r3, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	08009bf4 	.word	0x08009bf4
 8003148:	20000000 	.word	0x20000000

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 800314c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800314e:	f7ff ffe1 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003154:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800315a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003166:	b2db      	uxtb	r3, r3
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	4a02      	ldr	r2, [pc, #8]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800316e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003170:	40d8      	lsrs	r0, r3
 8003172:	bd08      	pop	{r3, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	08009bf4 	.word	0x08009bf4

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800317e:	f7ff ffc9 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003184:	689a      	ldr	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800318a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8003196:	b2db      	uxtb	r3, r3
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4a02      	ldr	r2, [pc, #8]	; (80031a8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
} 
 80031a0:	40d8      	lsrs	r0, r3
 80031a2:	bd08      	pop	{r3, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	08009bf4 	.word	0x08009bf4

080031ac <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ac:	230f      	movs	r3, #15
 80031ae:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_GetClockConfig+0x34>)
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	f002 0203 	and.w	r2, r2, #3
 80031b8:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80031c0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80031c8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80031d0:	08db      	lsrs	r3, r3, #3
 80031d2:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetClockConfig+0x38>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	600b      	str	r3, [r1, #0]
 80031de:	4770      	bx	lr
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80031ea:	4604      	mov	r4, r0
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f000 80bb 	beq.w	8003368 <HAL_I2C_Init+0x180>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80031f2:	6803      	ldr	r3, [r0, #0]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_I2C_Init+0x184>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00c      	beq.n	8003214 <HAL_I2C_Init+0x2c>
 80031fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031fe:	4293      	cmp	r3, r2
 8003200:	d008      	beq.n	8003214 <HAL_I2C_Init+0x2c>
 8003202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_I2C_Init+0x2c>
 800320a:	4859      	ldr	r0, [pc, #356]	; (8003370 <HAL_I2C_Init+0x188>)
 800320c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003210:	f7fe faea 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003214:	6863      	ldr	r3, [r4, #4]
 8003216:	4a57      	ldr	r2, [pc, #348]	; (8003374 <HAL_I2C_Init+0x18c>)
 8003218:	3b01      	subs	r3, #1
 800321a:	4293      	cmp	r3, r2
 800321c:	d904      	bls.n	8003228 <HAL_I2C_Init+0x40>
 800321e:	4854      	ldr	r0, [pc, #336]	; (8003370 <HAL_I2C_Init+0x188>)
 8003220:	f240 112d 	movw	r1, #301	; 0x12d
 8003224:	f7fe fae0 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003228:	68a3      	ldr	r3, [r4, #8]
 800322a:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800322e:	d004      	beq.n	800323a <HAL_I2C_Init+0x52>
 8003230:	484f      	ldr	r0, [pc, #316]	; (8003370 <HAL_I2C_Init+0x188>)
 8003232:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8003236:	f7fe fad7 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800323a:	68e3      	ldr	r3, [r4, #12]
 800323c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003240:	f023 0303 	bic.w	r3, r3, #3
 8003244:	b123      	cbz	r3, 8003250 <HAL_I2C_Init+0x68>
 8003246:	484a      	ldr	r0, [pc, #296]	; (8003370 <HAL_I2C_Init+0x188>)
 8003248:	f240 112f 	movw	r1, #303	; 0x12f
 800324c:	f7fe facc 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003250:	6923      	ldr	r3, [r4, #16]
 8003252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325a:	d004      	beq.n	8003266 <HAL_I2C_Init+0x7e>
 800325c:	4844      	ldr	r0, [pc, #272]	; (8003370 <HAL_I2C_Init+0x188>)
 800325e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8003262:	f7fe fac1 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003266:	6963      	ldr	r3, [r4, #20]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d904      	bls.n	8003276 <HAL_I2C_Init+0x8e>
 800326c:	4840      	ldr	r0, [pc, #256]	; (8003370 <HAL_I2C_Init+0x188>)
 800326e:	f240 1131 	movw	r1, #305	; 0x131
 8003272:	f7fe fab9 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003276:	69a3      	ldr	r3, [r4, #24]
 8003278:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800327c:	d004      	beq.n	8003288 <HAL_I2C_Init+0xa0>
 800327e:	483c      	ldr	r0, [pc, #240]	; (8003370 <HAL_I2C_Init+0x188>)
 8003280:	f44f 7199 	mov.w	r1, #306	; 0x132
 8003284:	f7fe fab0 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003288:	69e3      	ldr	r3, [r4, #28]
 800328a:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800328e:	d004      	beq.n	800329a <HAL_I2C_Init+0xb2>
 8003290:	4837      	ldr	r0, [pc, #220]	; (8003370 <HAL_I2C_Init+0x188>)
 8003292:	f240 1133 	movw	r1, #307	; 0x133
 8003296:	f7fe faa7 	bl	80017e8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800329a:	6a23      	ldr	r3, [r4, #32]
 800329c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80032a0:	d004      	beq.n	80032ac <HAL_I2C_Init+0xc4>
 80032a2:	4833      	ldr	r0, [pc, #204]	; (8003370 <HAL_I2C_Init+0x188>)
 80032a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80032a8:	f7fe fa9e 	bl	80017e8 <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80032ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80032b0:	b913      	cbnz	r3, 80032b8 <HAL_I2C_Init+0xd0>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7fe faf4 	bl	80018a0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b8:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80032ba:	4d2f      	ldr	r5, [pc, #188]	; (8003378 <HAL_I2C_Init+0x190>)
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	2302      	movs	r3, #2
 80032be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c2:	6813      	ldr	r3, [r2, #0]
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7ff ff3f 	bl	800314c <HAL_RCC_GetPCLK1Freq>
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80032ce:	6863      	ldr	r3, [r4, #4]
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80032d0:	6822      	ldr	r2, [r4, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032d2:	492a      	ldr	r1, [pc, #168]	; (800337c <HAL_I2C_Init+0x194>)
 80032d4:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80032d8:	42ab      	cmp	r3, r5
 80032da:	462e      	mov	r6, r5
 80032dc:	bf88      	it	hi
 80032de:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80032e2:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80032e4:	bf82      	ittt	hi
 80032e6:	4369      	mulhi	r1, r5
 80032e8:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80032ec:	fbb1 f1f5 	udivhi	r1, r1, r5

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80032f0:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80032f2:	f101 0101 	add.w	r1, r1, #1
 80032f6:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80032f8:	d808      	bhi.n	800330c <HAL_I2C_Init+0x124>
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003300:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003304:	2b03      	cmp	r3, #3
 8003306:	bf98      	it	ls
 8003308:	2004      	movls	r0, #4
 800330a:	e016      	b.n	800333a <HAL_I2C_Init+0x152>
 800330c:	68a1      	ldr	r1, [r4, #8]
 800330e:	b949      	cbnz	r1, 8003324 <HAL_I2C_Init+0x13c>
 8003310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003314:	fbb0 f0f3 	udiv	r0, r0, r3
 8003318:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800331c:	b163      	cbz	r3, 8003338 <HAL_I2C_Init+0x150>
 800331e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003322:	e00a      	b.n	800333a <HAL_I2C_Init+0x152>
 8003324:	2119      	movs	r1, #25
 8003326:	434b      	muls	r3, r1
 8003328:	fbb0 f0f3 	udiv	r0, r0, r3
 800332c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003330:	b113      	cbz	r3, 8003338 <HAL_I2C_Init+0x150>
 8003332:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8003336:	e000      	b.n	800333a <HAL_I2C_Init+0x152>
 8003338:	2001      	movs	r0, #1

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800333a:	6a21      	ldr	r1, [r4, #32]
 800333c:	69e3      	ldr	r3, [r4, #28]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800333e:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003340:	430b      	orrs	r3, r1
 8003342:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8003344:	68e1      	ldr	r1, [r4, #12]
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	430b      	orrs	r3, r1
 800334a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800334c:	69a1      	ldr	r1, [r4, #24]
 800334e:	6963      	ldr	r3, [r4, #20]
 8003350:	430b      	orrs	r3, r1
 8003352:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800335e:	2301      	movs	r3, #1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8003362:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8003366:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003368:	2001      	movs	r0, #1

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;

  return HAL_OK;
}
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	40005400 	.word	0x40005400
 8003370:	08009c53 	.word	0x08009c53
 8003374:	00061a7f 	.word	0x00061a7f
 8003378:	000186a0 	.word	0x000186a0
 800337c:	000f4240 	.word	0x000f4240

08003380 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003380:	1ec3      	subs	r3, r0, #3
 8003382:	2b04      	cmp	r3, #4
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b510      	push	{r4, lr}
 8003386:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003388:	d903      	bls.n	8003392 <HAL_NVIC_SetPriorityGrouping+0x12>
 800338a:	4809      	ldr	r0, [pc, #36]	; (80033b0 <HAL_NVIC_SetPriorityGrouping+0x30>)
 800338c:	21a4      	movs	r1, #164	; 0xa4
 800338e:	f7fe fa2b 	bl	80017e8 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8003394:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003396:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800339a:	400b      	ands	r3, r1
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80033a4:	f004 0407 	and.w	r4, r4, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80033a8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80033ac:	60d3      	str	r3, [r2, #12]
 80033ae:	bd10      	pop	{r4, pc}
 80033b0:	08009ca2 	.word	0x08009ca2
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80033b8:	2a0f      	cmp	r2, #15
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ba:	b570      	push	{r4, r5, r6, lr}
 80033bc:	4605      	mov	r5, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	4616      	mov	r6, r2
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80033c2:	d903      	bls.n	80033cc <HAL_NVIC_SetPriority+0x14>
 80033c4:	481a      	ldr	r0, [pc, #104]	; (8003430 <HAL_NVIC_SetPriority+0x78>)
 80033c6:	21bc      	movs	r1, #188	; 0xbc
 80033c8:	f7fe fa0e 	bl	80017e8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80033cc:	2c0f      	cmp	r4, #15
 80033ce:	d903      	bls.n	80033d8 <HAL_NVIC_SetPriority+0x20>
 80033d0:	4817      	ldr	r0, [pc, #92]	; (8003430 <HAL_NVIC_SetPriority+0x78>)
 80033d2:	21bd      	movs	r1, #189	; 0xbd
 80033d4:	f7fe fa08 	bl	80017e8 <assert_failed>

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80033d8:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_NVIC_SetPriority+0x7c>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80033e0:	f1c3 0207 	rsb	r2, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80033e4:	1d19      	adds	r1, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80033e6:	2a04      	cmp	r2, #4
 80033e8:	bf28      	it	cs
 80033ea:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80033ec:	2906      	cmp	r1, #6
 80033ee:	bf8c      	ite	hi
 80033f0:	3b03      	subhi	r3, #3
 80033f2:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f003 	lsl.w	r0, r1, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80033fa:	4091      	lsls	r1, r2
 80033fc:	3901      	subs	r1, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80033fe:	3801      	subs	r0, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003400:	400c      	ands	r4, r1
 8003402:	409c      	lsls	r4, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8003404:	4006      	ands	r6, r0
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 8003406:	2d00      	cmp	r5, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8003408:	ea44 0406 	orr.w	r4, r4, r6
 800340c:	ea4f 1404 	mov.w	r4, r4, lsl #4
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003410:	bfaf      	iteee	ge
 8003412:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003416:	f005 050f 	andlt.w	r5, r5, #15
 800341a:	4b07      	ldrlt	r3, [pc, #28]	; (8003438 <HAL_NVIC_SetPriority+0x80>)
 800341c:	b2e4      	uxtblt	r4, r4
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800341e:	bfa5      	ittet	ge
 8003420:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
 8003424:	b2e4      	uxtbge	r4, r4
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003426:	555c      	strblt	r4, [r3, r5]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003428:	f885 4300 	strbge.w	r4, [r5, #768]	; 0x300
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	bf00      	nop
 8003430:	08009ca2 	.word	0x08009ca2
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	e000ed14 	.word	0xe000ed14

0800343c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800343e:	1e04      	subs	r4, r0, #0
 8003440:	da03      	bge.n	800344a <HAL_NVIC_EnableIRQ+0xe>
 8003442:	4806      	ldr	r0, [pc, #24]	; (800345c <HAL_NVIC_EnableIRQ+0x20>)
 8003444:	21d0      	movs	r1, #208	; 0xd0
 8003446:	f7fe f9cf 	bl	80017e8 <assert_failed>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800344a:	0961      	lsrs	r1, r4, #5
 800344c:	2301      	movs	r3, #1
 800344e:	f004 041f 	and.w	r4, r4, #31
 8003452:	4a03      	ldr	r2, [pc, #12]	; (8003460 <HAL_NVIC_EnableIRQ+0x24>)
 8003454:	40a3      	lsls	r3, r4
 8003456:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800345a:	bd10      	pop	{r4, pc}
 800345c:	08009ca2 	.word	0x08009ca2
 8003460:	e000e100 	.word	0xe000e100

08003464 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8003464:	3801      	subs	r0, #1
 8003466:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800346a:	bf3f      	itttt	cc
 800346c:	4b06      	ldrcc	r3, [pc, #24]	; (8003488 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800346e:	4a07      	ldrcc	r2, [pc, #28]	; (800348c <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8003470:	6058      	strcc	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003472:	21f0      	movcc	r1, #240	; 0xf0
 8003474:	bf3f      	itttt	cc
 8003476:	f882 1023 	strbcc.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800347a:	2000      	movcc	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347c:	2207      	movcc	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800347e:	6098      	strcc	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003480:	bf34      	ite	cc
 8003482:	601a      	strcc	r2, [r3, #0]
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8003484:	2001      	movcs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003486:	4770      	bx	lr
 8003488:	e000e010 	.word	0xe000e010
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 8003494:	6842      	ldr	r2, [r0, #4]
 8003496:	4b62      	ldr	r3, [pc, #392]	; (8003620 <UART_SetConfig+0x190>)
 8003498:	429a      	cmp	r2, r3
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800349a:	4604      	mov	r4, r0
  uint32_t tmpreg = 0x00;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));  
 800349c:	d904      	bls.n	80034a8 <UART_SetConfig+0x18>
 800349e:	4861      	ldr	r0, [pc, #388]	; (8003624 <UART_SetConfig+0x194>)
 80034a0:	f240 712e 	movw	r1, #1838	; 0x72e
 80034a4:	f7fe f9a0 	bl	80017e8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80034a8:	68e3      	ldr	r3, [r4, #12]
 80034aa:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80034ae:	d004      	beq.n	80034ba <UART_SetConfig+0x2a>
 80034b0:	485c      	ldr	r0, [pc, #368]	; (8003624 <UART_SetConfig+0x194>)
 80034b2:	f240 712f 	movw	r1, #1839	; 0x72f
 80034b6:	f7fe f997 	bl	80017e8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80034c0:	d007      	beq.n	80034d2 <UART_SetConfig+0x42>
 80034c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034c6:	d004      	beq.n	80034d2 <UART_SetConfig+0x42>
 80034c8:	4856      	ldr	r0, [pc, #344]	; (8003624 <UART_SetConfig+0x194>)
 80034ca:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80034ce:	f7fe f98b 	bl	80017e8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80034d2:	6962      	ldr	r2, [r4, #20]
 80034d4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80034d8:	4013      	ands	r3, r2
 80034da:	b903      	cbnz	r3, 80034de <UART_SetConfig+0x4e>
 80034dc:	b922      	cbnz	r2, 80034e8 <UART_SetConfig+0x58>
 80034de:	4851      	ldr	r0, [pc, #324]	; (8003624 <UART_SetConfig+0x194>)
 80034e0:	f240 7131 	movw	r1, #1841	; 0x731
 80034e4:	f7fe f980 	bl	80017e8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80034e8:	6826      	ldr	r6, [r4, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ea:	6921      	ldr	r1, [r4, #16]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80034ec:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ee:	69e0      	ldr	r0, [r4, #28]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80034f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80034f4:	68e3      	ldr	r3, [r4, #12]
 80034f6:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034f8:	68a2      	ldr	r2, [r4, #8]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80034fa:	6133      	str	r3, [r6, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80034fc:	68f3      	ldr	r3, [r6, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034fe:	4311      	orrs	r1, r2
 8003500:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003502:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003506:	430a      	orrs	r2, r1
 8003508:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800350a:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800350e:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 8003510:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003512:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003518:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800351e:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8003522:	6173      	str	r3, [r6, #20]
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <UART_SetConfig+0x198>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003526:	d136      	bne.n	8003596 <UART_SetConfig+0x106>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003528:	429e      	cmp	r6, r3
 800352a:	d003      	beq.n	8003534 <UART_SetConfig+0xa4>
 800352c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003530:	429e      	cmp	r6, r3
 8003532:	d116      	bne.n	8003562 <UART_SetConfig+0xd2>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003534:	f7ff fe22 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8003538:	6867      	ldr	r7, [r4, #4]
 800353a:	2519      	movs	r5, #25
 800353c:	4368      	muls	r0, r5
 800353e:	007f      	lsls	r7, r7, #1
 8003540:	fbb0 f7f7 	udiv	r7, r0, r7
 8003544:	f7ff fe1a 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8003548:	6862      	ldr	r2, [r4, #4]
 800354a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800354e:	4368      	muls	r0, r5
 8003550:	fbb7 f7f8 	udiv	r7, r7, r8
 8003554:	0052      	lsls	r2, r2, #1
 8003556:	013f      	lsls	r7, r7, #4
 8003558:	fbb0 f9f2 	udiv	r9, r0, r2
 800355c:	f7ff fe0e 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8003560:	e015      	b.n	800358e <UART_SetConfig+0xfe>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003562:	f7ff fdf3 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003566:	6867      	ldr	r7, [r4, #4]
 8003568:	2519      	movs	r5, #25
 800356a:	4368      	muls	r0, r5
 800356c:	007f      	lsls	r7, r7, #1
 800356e:	fbb0 f7f7 	udiv	r7, r0, r7
 8003572:	f7ff fdeb 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003576:	6862      	ldr	r2, [r4, #4]
 8003578:	f04f 0864 	mov.w	r8, #100	; 0x64
 800357c:	4368      	muls	r0, r5
 800357e:	fbb7 f7f8 	udiv	r7, r7, r8
 8003582:	0052      	lsls	r2, r2, #1
 8003584:	013f      	lsls	r7, r7, #4
 8003586:	fbb0 f9f2 	udiv	r9, r0, r2
 800358a:	f7ff fddf 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 800358e:	4345      	muls	r5, r0
 8003590:	6860      	ldr	r0, [r4, #4]
 8003592:	0040      	lsls	r0, r0, #1
 8003594:	e034      	b.n	8003600 <UART_SetConfig+0x170>
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003596:	429e      	cmp	r6, r3
 8003598:	d002      	beq.n	80035a0 <UART_SetConfig+0x110>
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <UART_SetConfig+0x19c>)
 800359c:	429e      	cmp	r6, r3
 800359e:	d116      	bne.n	80035ce <UART_SetConfig+0x13e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80035a0:	f7ff fdec 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 80035a4:	6867      	ldr	r7, [r4, #4]
 80035a6:	2519      	movs	r5, #25
 80035a8:	4368      	muls	r0, r5
 80035aa:	00bf      	lsls	r7, r7, #2
 80035ac:	fbb0 f7f7 	udiv	r7, r0, r7
 80035b0:	f7ff fde4 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 80035b4:	6862      	ldr	r2, [r4, #4]
 80035b6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80035ba:	4368      	muls	r0, r5
 80035bc:	fbb7 f7f8 	udiv	r7, r7, r8
 80035c0:	0092      	lsls	r2, r2, #2
 80035c2:	013f      	lsls	r7, r7, #4
 80035c4:	fbb0 f9f2 	udiv	r9, r0, r2
 80035c8:	f7ff fdd8 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 80035cc:	e015      	b.n	80035fa <UART_SetConfig+0x16a>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80035ce:	f7ff fdbd 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80035d2:	6867      	ldr	r7, [r4, #4]
 80035d4:	2519      	movs	r5, #25
 80035d6:	4368      	muls	r0, r5
 80035d8:	00bf      	lsls	r7, r7, #2
 80035da:	fbb0 f7f7 	udiv	r7, r0, r7
 80035de:	f7ff fdb5 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80035e2:	6862      	ldr	r2, [r4, #4]
 80035e4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80035e8:	4368      	muls	r0, r5
 80035ea:	fbb7 f7f8 	udiv	r7, r7, r8
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	013f      	lsls	r7, r7, #4
 80035f2:	fbb0 f9f2 	udiv	r9, r0, r2
 80035f6:	f7ff fda9 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 80035fa:	4345      	muls	r5, r0
 80035fc:	6860      	ldr	r0, [r4, #4]
 80035fe:	0080      	lsls	r0, r0, #2
 8003600:	fbb5 f0f0 	udiv	r0, r5, r0
 8003604:	fbb0 f0f8 	udiv	r0, r0, r8
 8003608:	fb08 9210 	mls	r2, r8, r0, r9
 800360c:	0112      	lsls	r2, r2, #4
 800360e:	3232      	adds	r2, #50	; 0x32
 8003610:	fbb2 f3f8 	udiv	r3, r2, r8
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	433b      	orrs	r3, r7
 800361a:	60b3      	str	r3, [r6, #8]
 800361c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003620:	00a037a0 	.word	0x00a037a0
 8003624:	08009cf4 	.word	0x08009cf4
 8003628:	40011000 	.word	0x40011000
 800362c:	40011400 	.word	0x40011400

08003630 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003630:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003632:	4604      	mov	r4, r0
 8003634:	2800      	cmp	r0, #0
 8003636:	d06c      	beq.n	8003712 <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003638:	6981      	ldr	r1, [r0, #24]
 800363a:	6803      	ldr	r3, [r0, #0]
 800363c:	4a36      	ldr	r2, [pc, #216]	; (8003718 <HAL_UART_Init+0xe8>)
 800363e:	b1c1      	cbz	r1, 8003672 <HAL_UART_Init+0x42>
  { 
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003640:	4293      	cmp	r3, r2
 8003642:	d00f      	beq.n	8003664 <HAL_UART_Init+0x34>
 8003644:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8003648:	4293      	cmp	r3, r2
 800364a:	d00b      	beq.n	8003664 <HAL_UART_Init+0x34>
 800364c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <HAL_UART_Init+0x34>
 8003654:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <HAL_UART_Init+0x34>
 800365c:	482f      	ldr	r0, [pc, #188]	; (800371c <HAL_UART_Init+0xec>)
 800365e:	21fc      	movs	r1, #252	; 0xfc
 8003660:	f7fe f8c2 	bl	80017e8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003664:	69a3      	ldr	r3, [r4, #24]
 8003666:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800366a:	d01c      	beq.n	80036a6 <HAL_UART_Init+0x76>
 800366c:	482b      	ldr	r0, [pc, #172]	; (800371c <HAL_UART_Init+0xec>)
 800366e:	21fd      	movs	r1, #253	; 0xfd
 8003670:	e017      	b.n	80036a2 <HAL_UART_Init+0x72>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003672:	4293      	cmp	r3, r2
 8003674:	d017      	beq.n	80036a6 <HAL_UART_Init+0x76>
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <HAL_UART_Init+0xf0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d014      	beq.n	80036a6 <HAL_UART_Init+0x76>
 800367c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003680:	4293      	cmp	r3, r2
 8003682:	d010      	beq.n	80036a6 <HAL_UART_Init+0x76>
 8003684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003688:	4293      	cmp	r3, r2
 800368a:	d00c      	beq.n	80036a6 <HAL_UART_Init+0x76>
 800368c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003690:	4293      	cmp	r3, r2
 8003692:	d008      	beq.n	80036a6 <HAL_UART_Init+0x76>
 8003694:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_UART_Init+0x76>
 800369c:	481f      	ldr	r0, [pc, #124]	; (800371c <HAL_UART_Init+0xec>)
 800369e:	f240 1101 	movw	r1, #257	; 0x101
 80036a2:	f7fe f8a1 	bl	80017e8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80036a6:	68a3      	ldr	r3, [r4, #8]
 80036a8:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80036ac:	d004      	beq.n	80036b8 <HAL_UART_Init+0x88>
 80036ae:	481b      	ldr	r0, [pc, #108]	; (800371c <HAL_UART_Init+0xec>)
 80036b0:	f240 1103 	movw	r1, #259	; 0x103
 80036b4:	f7fe f898 	bl	80017e8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80036b8:	69e3      	ldr	r3, [r4, #28]
 80036ba:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80036be:	d004      	beq.n	80036ca <HAL_UART_Init+0x9a>
 80036c0:	4816      	ldr	r0, [pc, #88]	; (800371c <HAL_UART_Init+0xec>)
 80036c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80036c6:	f7fe f88f 	bl	80017e8 <assert_failed>
  
  if(huart->State == HAL_UART_STATE_RESET)
 80036ca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80036ce:	b913      	cbnz	r3, 80036d6 <HAL_UART_Init+0xa6>
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80036d0:	4620      	mov	r0, r4
 80036d2:	f7fe f8b1 	bl	8001838 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d6:	6822      	ldr	r2, [r4, #0]
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 80036d8:	2302      	movs	r3, #2
 80036da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036de:	68d3      	ldr	r3, [r2, #12]
 80036e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036e4:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7ff fed2 	bl	8003490 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f4:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036fc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003704:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003706:	2000      	movs	r0, #0
  huart->State= HAL_UART_STATE_READY;
 8003708:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800370c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8003710:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8003712:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8003714:	bd10      	pop	{r4, pc}
 8003716:	bf00      	nop
 8003718:	40011000 	.word	0x40011000
 800371c:	08009cf4 	.word	0x08009cf4
 8003720:	40004400 	.word	0x40004400

08003724 <FSMC_NORSRAM_Init>:
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_BANK(Init->NSBank));
 8003724:	680b      	ldr	r3, [r1, #0]
 8003726:	f033 0306 	bics.w	r3, r3, #6
  * @param  Device: Pointer to NORSRAM device instance
  * @param  Init: Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800372a:	b570      	push	{r4, r5, r6, lr}
 800372c:	4605      	mov	r5, r0
 800372e:	460c      	mov	r4, r1
  uint32_t tmpr = 0;
    
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_BANK(Init->NSBank));
 8003730:	d003      	beq.n	800373a <FSMC_NORSRAM_Init+0x16>
 8003732:	4847      	ldr	r0, [pc, #284]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 8003734:	2197      	movs	r1, #151	; 0x97
 8003736:	f7fe f857 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_MUX(Init->DataAddressMux));
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	f033 0302 	bics.w	r3, r3, #2
 8003740:	d003      	beq.n	800374a <FSMC_NORSRAM_Init+0x26>
 8003742:	4843      	ldr	r0, [pc, #268]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 8003744:	2198      	movs	r1, #152	; 0x98
 8003746:	f7fe f84f 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_MEMORY(Init->MemoryType));
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	f033 0204 	bics.w	r2, r3, #4
 8003750:	d005      	beq.n	800375e <FSMC_NORSRAM_Init+0x3a>
 8003752:	2b08      	cmp	r3, #8
 8003754:	d003      	beq.n	800375e <FSMC_NORSRAM_Init+0x3a>
 8003756:	483e      	ldr	r0, [pc, #248]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 8003758:	2199      	movs	r1, #153	; 0x99
 800375a:	f7fe f845 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_NORSRAM_MEMORY_WIDTH(Init->MemoryDataWidth));
 800375e:	68e3      	ldr	r3, [r4, #12]
 8003760:	f033 0210 	bics.w	r2, r3, #16
 8003764:	d005      	beq.n	8003772 <FSMC_NORSRAM_Init+0x4e>
 8003766:	2b20      	cmp	r3, #32
 8003768:	d003      	beq.n	8003772 <FSMC_NORSRAM_Init+0x4e>
 800376a:	4839      	ldr	r0, [pc, #228]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 800376c:	219a      	movs	r1, #154	; 0x9a
 800376e:	f7fe f83b 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_BURSTMODE(Init->BurstAccessMode));
 8003772:	6923      	ldr	r3, [r4, #16]
 8003774:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8003778:	d003      	beq.n	8003782 <FSMC_NORSRAM_Init+0x5e>
 800377a:	4835      	ldr	r0, [pc, #212]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 800377c:	219b      	movs	r1, #155	; 0x9b
 800377e:	f7fe f833 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_WAIT_POLARITY(Init->WaitSignalPolarity));
 8003782:	6963      	ldr	r3, [r4, #20]
 8003784:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8003788:	d003      	beq.n	8003792 <FSMC_NORSRAM_Init+0x6e>
 800378a:	4831      	ldr	r0, [pc, #196]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 800378c:	219c      	movs	r1, #156	; 0x9c
 800378e:	f7fe f82b 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_WRAP_MODE(Init->WrapMode));
 8003792:	69a3      	ldr	r3, [r4, #24]
 8003794:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003798:	d003      	beq.n	80037a2 <FSMC_NORSRAM_Init+0x7e>
 800379a:	482d      	ldr	r0, [pc, #180]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 800379c:	219d      	movs	r1, #157	; 0x9d
 800379e:	f7fe f823 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(Init->WaitSignalActive));
 80037a2:	69e3      	ldr	r3, [r4, #28]
 80037a4:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80037a8:	d003      	beq.n	80037b2 <FSMC_NORSRAM_Init+0x8e>
 80037aa:	4829      	ldr	r0, [pc, #164]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 80037ac:	219e      	movs	r1, #158	; 0x9e
 80037ae:	f7fe f81b 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_WRITE_OPERATION(Init->WriteOperation));
 80037b2:	6a23      	ldr	r3, [r4, #32]
 80037b4:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80037b8:	d003      	beq.n	80037c2 <FSMC_NORSRAM_Init+0x9e>
 80037ba:	4825      	ldr	r0, [pc, #148]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 80037bc:	219f      	movs	r1, #159	; 0x9f
 80037be:	f7fe f813 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_WAITE_SIGNAL(Init->WaitSignal));
 80037c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c4:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80037c8:	d003      	beq.n	80037d2 <FSMC_NORSRAM_Init+0xae>
 80037ca:	4821      	ldr	r0, [pc, #132]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 80037cc:	21a0      	movs	r1, #160	; 0xa0
 80037ce:	f7fe f80b 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
 80037d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037d4:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80037d8:	d003      	beq.n	80037e2 <FSMC_NORSRAM_Init+0xbe>
 80037da:	481d      	ldr	r0, [pc, #116]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 80037dc:	21a1      	movs	r1, #161	; 0xa1
 80037de:	f7fe f803 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
 80037e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037e4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80037e8:	d003      	beq.n	80037f2 <FSMC_NORSRAM_Init+0xce>
 80037ea:	4819      	ldr	r0, [pc, #100]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 80037ec:	21a2      	movs	r1, #162	; 0xa2
 80037ee:	f7fd fffb 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
 80037f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037f4:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80037f8:	d003      	beq.n	8003802 <FSMC_NORSRAM_Init+0xde>
 80037fa:	4815      	ldr	r0, [pc, #84]	; (8003850 <FSMC_NORSRAM_Init+0x12c>)
 80037fc:	21a3      	movs	r1, #163	; 0xa3
 80037fe:	f7fd fff3 	bl	80017e8 <assert_failed>
 8003802:	6820      	ldr	r0, [r4, #0]
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8003804:	4a13      	ldr	r2, [pc, #76]	; (8003854 <FSMC_NORSRAM_Init+0x130>)
  assert_param(IS_FSMC_EXTENDED_MODE(Init->ExtendedMode));
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8003806:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 800380a:	68a6      	ldr	r6, [r4, #8]
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800380c:	401a      	ands	r2, r3
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800380e:	6863      	ldr	r3, [r4, #4]
 8003810:	ea46 0103 	orr.w	r1, r6, r3
                     Init->MemoryType           |\
 8003814:	68e3      	ldr	r3, [r4, #12]
 8003816:	4319      	orrs	r1, r3
                     Init->MemoryDataWidth      |\
 8003818:	6923      	ldr	r3, [r4, #16]
 800381a:	4319      	orrs	r1, r3
                     Init->BurstAccessMode      |\
 800381c:	6963      	ldr	r3, [r4, #20]
 800381e:	4319      	orrs	r1, r3
                     Init->WaitSignalPolarity   |\
 8003820:	69a3      	ldr	r3, [r4, #24]
 8003822:	4319      	orrs	r1, r3
                     Init->WrapMode             |\
 8003824:	69e3      	ldr	r3, [r4, #28]
 8003826:	4319      	orrs	r1, r3
                     Init->WaitSignalActive     |\
 8003828:	6a23      	ldr	r3, [r4, #32]
 800382a:	4319      	orrs	r1, r3
                     Init->WriteOperation       |\
 800382c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800382e:	4319      	orrs	r1, r3
                     Init->WaitSignal           |\
 8003830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003832:	4319      	orrs	r1, r3
                     Init->ExtendedMode         |\
 8003834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003836:	430b      	orrs	r3, r1
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003838:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800383a:	430b      	orrs	r3, r1
 800383c:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
                     Init->AsynchronousWait     |\
                     Init->WriteBurst
                     );
                    
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800383e:	2e08      	cmp	r6, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003840:	bf08      	it	eq
 8003842:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }
  
  Device->BTCR[Init->NSBank] = tmpr;                   
 8003846:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
  
  return HAL_OK;
}
 800384a:	2000      	movs	r0, #0
 800384c:	bd70      	pop	{r4, r5, r6, pc}
 800384e:	bf00      	nop
 8003850:	08009d44 	.word	0x08009d44
 8003854:	fff70080 	.word	0xfff70080

08003858 <FSMC_NORSRAM_Timing_Init>:
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8003858:	680b      	ldr	r3, [r1, #0]
 800385a:	2b0f      	cmp	r3, #15
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	4605      	mov	r5, r0
 8003860:	460c      	mov	r4, r1
 8003862:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Check the parameters */
  assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8003864:	d903      	bls.n	800386e <FSMC_NORSRAM_Timing_Init+0x16>
 8003866:	4828      	ldr	r0, [pc, #160]	; (8003908 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003868:	21f8      	movs	r1, #248	; 0xf8
 800386a:	f7fd ffbd 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	3b01      	subs	r3, #1
 8003872:	2b0e      	cmp	r3, #14
 8003874:	d903      	bls.n	800387e <FSMC_NORSRAM_Timing_Init+0x26>
 8003876:	4824      	ldr	r0, [pc, #144]	; (8003908 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003878:	21f9      	movs	r1, #249	; 0xf9
 800387a:	f7fd ffb5 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 800387e:	68a3      	ldr	r3, [r4, #8]
 8003880:	3b01      	subs	r3, #1
 8003882:	2bfe      	cmp	r3, #254	; 0xfe
 8003884:	d903      	bls.n	800388e <FSMC_NORSRAM_Timing_Init+0x36>
 8003886:	4820      	ldr	r0, [pc, #128]	; (8003908 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003888:	21fa      	movs	r1, #250	; 0xfa
 800388a:	f7fd ffad 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 800388e:	68e3      	ldr	r3, [r4, #12]
 8003890:	2b0f      	cmp	r3, #15
 8003892:	d903      	bls.n	800389c <FSMC_NORSRAM_Timing_Init+0x44>
 8003894:	481c      	ldr	r0, [pc, #112]	; (8003908 <FSMC_NORSRAM_Timing_Init+0xb0>)
 8003896:	21fb      	movs	r1, #251	; 0xfb
 8003898:	f7fd ffa6 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_CLK_DIV(Timing->CLKDivision));
 800389c:	6923      	ldr	r3, [r4, #16]
 800389e:	3b01      	subs	r3, #1
 80038a0:	2b0f      	cmp	r3, #15
 80038a2:	d903      	bls.n	80038ac <FSMC_NORSRAM_Timing_Init+0x54>
 80038a4:	4818      	ldr	r0, [pc, #96]	; (8003908 <FSMC_NORSRAM_Timing_Init+0xb0>)
 80038a6:	21fc      	movs	r1, #252	; 0xfc
 80038a8:	f7fd ff9e 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
 80038ac:	6963      	ldr	r3, [r4, #20]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d903      	bls.n	80038bc <FSMC_NORSRAM_Timing_Init+0x64>
 80038b4:	4814      	ldr	r0, [pc, #80]	; (8003908 <FSMC_NORSRAM_Timing_Init+0xb0>)
 80038b6:	21fd      	movs	r1, #253	; 0xfd
 80038b8:	f7fd ff96 	bl	80017e8 <assert_failed>
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 80038bc:	69a3      	ldr	r3, [r4, #24]
 80038be:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80038c2:	d003      	beq.n	80038cc <FSMC_NORSRAM_Timing_Init+0x74>
 80038c4:	4810      	ldr	r0, [pc, #64]	; (8003908 <FSMC_NORSRAM_Timing_Init+0xb0>)
 80038c6:	21fe      	movs	r1, #254	; 0xfe
 80038c8:	f7fd ff8e 	bl	80017e8 <assert_failed>
 80038cc:	eb05 0286 	add.w	r2, r5, r6, lsl #2
 80038d0:	69a1      	ldr	r1, [r4, #24]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];
 80038d2:	6853      	ldr	r3, [r2, #4]
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
 80038d4:	68a5      	ldr	r5, [r4, #8]
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1];

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80038d6:	f003 4640 	and.w	r6, r3, #3221225472	; 0xc0000000
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	430b      	orrs	r3, r1
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
 80038de:	6861      	ldr	r1, [r4, #4]
 80038e0:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 80038e4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
 80038e8:	6923      	ldr	r3, [r4, #16]
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                    ((Timing->AddressHoldTime) << 4)          |\
                    ((Timing->DataSetupTime) << 8)            |\
                    ((Timing->BusTurnAroundDuration) << 16)   |\
 80038ea:	68e5      	ldr	r5, [r4, #12]
                    (((Timing->CLKDivision)-1) << 20)         |\
 80038ec:	3b01      	subs	r3, #1
 80038ee:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80038f2:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
                    (((Timing->DataLatency)-2) << 24)         |\
 80038f6:	6963      	ldr	r3, [r4, #20]
 80038f8:	3b02      	subs	r3, #2
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 80038fa:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 80038fe:	4333      	orrs	r3, r6
                    ((Timing->BusTurnAroundDuration) << 16)   |\
                    (((Timing->CLKDivision)-1) << 20)         |\
                    (((Timing->DataLatency)-2) << 24)         |\
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 8003900:	6053      	str	r3, [r2, #4]
  
  return HAL_OK;   
}
 8003902:	2000      	movs	r0, #0
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	bf00      	nop
 8003908:	08009d44 	.word	0x08009d44

0800390c <FSMC_NORSRAM_Extended_Timing_Init>:
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
  uint32_t tmpr = 0;
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  * @param  Timing: Pointer to NORSRAM Timing structure
  * @param  Bank: NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	4605      	mov	r5, r0
 8003914:	460c      	mov	r4, r1
 8003916:	4616      	mov	r6, r2
  uint32_t tmpr = 0;
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003918:	d156      	bne.n	80039c8 <FSMC_NORSRAM_Extended_Timing_Init+0xbc>
  {
    /* Check the parameters */  
    assert_param(IS_FSMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 800391a:	680b      	ldr	r3, [r1, #0]
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d904      	bls.n	800392a <FSMC_NORSRAM_Extended_Timing_Init+0x1e>
 8003920:	482c      	ldr	r0, [pc, #176]	; (80039d4 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003922:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003926:	f7fd ff5f 	bl	80017e8 <assert_failed>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 800392a:	6863      	ldr	r3, [r4, #4]
 800392c:	3b01      	subs	r3, #1
 800392e:	2b0e      	cmp	r3, #14
 8003930:	d904      	bls.n	800393c <FSMC_NORSRAM_Extended_Timing_Init+0x30>
 8003932:	4828      	ldr	r0, [pc, #160]	; (80039d4 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003934:	f240 1127 	movw	r1, #295	; 0x127
 8003938:	f7fd ff56 	bl	80017e8 <assert_failed>
    assert_param(IS_FSMC_DATASETUP_TIME(Timing->DataSetupTime));
 800393c:	68a3      	ldr	r3, [r4, #8]
 800393e:	3b01      	subs	r3, #1
 8003940:	2bfe      	cmp	r3, #254	; 0xfe
 8003942:	d904      	bls.n	800394e <FSMC_NORSRAM_Extended_Timing_Init+0x42>
 8003944:	4823      	ldr	r0, [pc, #140]	; (80039d4 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003946:	f44f 7194 	mov.w	r1, #296	; 0x128
 800394a:	f7fd ff4d 	bl	80017e8 <assert_failed>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 800394e:	68e3      	ldr	r3, [r4, #12]
 8003950:	2b0f      	cmp	r3, #15
 8003952:	d904      	bls.n	800395e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
 8003954:	481f      	ldr	r0, [pc, #124]	; (80039d4 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003956:	f240 1129 	movw	r1, #297	; 0x129
 800395a:	f7fd ff45 	bl	80017e8 <assert_failed>
    assert_param(IS_FSMC_CLK_DIV(Timing->CLKDivision));
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	3b01      	subs	r3, #1
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d904      	bls.n	8003970 <FSMC_NORSRAM_Extended_Timing_Init+0x64>
 8003966:	481b      	ldr	r0, [pc, #108]	; (80039d4 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 8003968:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800396c:	f7fd ff3c 	bl	80017e8 <assert_failed>
    assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
 8003970:	6963      	ldr	r3, [r4, #20]
 8003972:	3b01      	subs	r3, #1
 8003974:	2b10      	cmp	r3, #16
 8003976:	d904      	bls.n	8003982 <FSMC_NORSRAM_Extended_Timing_Init+0x76>
 8003978:	4816      	ldr	r0, [pc, #88]	; (80039d4 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 800397a:	f240 112b 	movw	r1, #299	; 0x12b
 800397e:	f7fd ff33 	bl	80017e8 <assert_failed>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
 8003982:	69a3      	ldr	r3, [r4, #24]
 8003984:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8003988:	d004      	beq.n	8003994 <FSMC_NORSRAM_Extended_Timing_Init+0x88>
 800398a:	4812      	ldr	r0, [pc, #72]	; (80039d4 <FSMC_NORSRAM_Extended_Timing_Init+0xc8>)
 800398c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003990:	f7fd ff2a 	bl	80017e8 <assert_failed>
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8003994:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 8003998:	69a2      	ldr	r2, [r4, #24]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
                     ((Timing->DataSetupTime) << 8)            |\
 800399a:	68a1      	ldr	r1, [r4, #8]
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800399c:	f003 4040 	and.w	r0, r3, #3221225472	; 0xc0000000
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	4313      	orrs	r3, r2
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
 80039a4:	6862      	ldr	r2, [r4, #4]
 80039a6:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 80039aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
                     ((Timing->DataSetupTime) << 8)            |\
                     ((Timing->BusTurnAroundDuration) << 16)   |\
                     (((Timing->CLKDivision)-1) << 20)         |\
 80039ae:	6923      	ldr	r3, [r4, #16]
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
                     ((Timing->AddressHoldTime) << 4)          |\
                     ((Timing->DataSetupTime) << 8)            |\
                     ((Timing->BusTurnAroundDuration) << 16)   |\
 80039b0:	68e1      	ldr	r1, [r4, #12]
                     (((Timing->CLKDivision)-1) << 20)         |\
 80039b2:	3b01      	subs	r3, #1
 80039b4:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80039b8:	ea41 5203 	orr.w	r2, r1, r3, lsl #20
                     (((Timing->DataLatency)-2) << 24)         |\
 80039bc:	6963      	ldr	r3, [r4, #20]
 80039be:	3b02      	subs	r3, #2
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_CLKDIV | FSMC_BWTR1_DATLAT | \
                         FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                 |\
 80039c0:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 80039c4:	4303      	orrs	r3, r0
 80039c6:	e001      	b.n	80039cc <FSMC_NORSRAM_Extended_Timing_Init+0xc0>
    
    Device->BWTR[Bank] = tmpr; 
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFF;
 80039c8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80039cc:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
  }   
  
  return HAL_OK;  
}
 80039d0:	2000      	movs	r0, #0
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	08009d44 	.word	0x08009d44

080039d8 <HAL_SRAM_Init>:
  * @param  Timing: Pointer to SRAM control timing structure 
  * @param  ExtTiming: Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	460e      	mov	r6, r1
 80039dc:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80039de:	4604      	mov	r4, r0
 80039e0:	b1f0      	cbz	r0, 8003a20 <HAL_SRAM_Init+0x48>
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80039e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039e6:	b90b      	cbnz	r3, 80039ec <HAL_SRAM_Init+0x14>
  {  
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80039e8:	f7fd ffb0 	bl	800194c <HAL_SRAM_MspInit>
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80039ec:	f104 0108 	add.w	r1, r4, #8
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	f7ff fe97 	bl	8003724 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80039f6:	4631      	mov	r1, r6
 80039f8:	68a2      	ldr	r2, [r4, #8]
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	f7ff ff2c 	bl	8003858 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003a00:	4629      	mov	r1, r5
 8003a02:	68a2      	ldr	r2, [r4, #8]
 8003a04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a06:	6860      	ldr	r0, [r4, #4]
 8003a08:	f7ff ff80 	bl	800390c <FSMC_NORSRAM_Extended_Timing_Init>
 8003a0c:	68a1      	ldr	r1, [r4, #8]
 8003a0e:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
  {
     return HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
  
  return HAL_OK;
}
 8003a22:	bd70      	pop	{r4, r5, r6, pc}

08003a24 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	4770      	bx	lr

08003a26 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_Base_Start_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003a28:	6803      	ldr	r3, [r0, #0]
 8003a2a:	4a24      	ldr	r2, [pc, #144]	; (8003abc <HAL_TIM_Base_Start_IT+0x94>)
 8003a2c:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003a32:	d037      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a38:	d034      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a3a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d030      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d02c      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d028      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d024      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d020      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a62:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01c      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a6a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d018      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d014      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d010      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a82:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00c      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d008      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x7c>
 8003a9a:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <HAL_TIM_Base_Start_IT+0x98>)
 8003a9c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8003aa0:	f7fd fea2 	bl	80017e8 <assert_failed>
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	08009d93 	.word	0x08009d93

08003ac4 <HAL_TIM_Base_Stop_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003ac4:	6803      	ldr	r3, [r0, #0]
 8003ac6:	4a29      	ldr	r2, [pc, #164]	; (8003b6c <HAL_TIM_Base_Stop_IT+0xa8>)
 8003ac8:	4293      	cmp	r3, r2
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003aca:	b510      	push	{r4, lr}
 8003acc:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003ace:	d037      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d034      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003ad6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d030      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02c      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d028      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003aee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d024      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d020      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003afe:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01c      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003b06:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d018      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d014      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d010      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003b1e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d008      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d004      	beq.n	8003b40 <HAL_TIM_Base_Stop_IT+0x7c>
 8003b36:	480e      	ldr	r0, [pc, #56]	; (8003b70 <HAL_TIM_Base_Stop_IT+0xac>)
 8003b38:	f240 1173 	movw	r1, #371	; 0x173
 8003b3c:	f7fd fe54 	bl	80017e8 <assert_failed>
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b4a:	6a19      	ldr	r1, [r3, #32]
 8003b4c:	f241 1211 	movw	r2, #4369	; 0x1111
 8003b50:	400a      	ands	r2, r1
 8003b52:	b942      	cbnz	r2, 8003b66 <HAL_TIM_Base_Stop_IT+0xa2>
 8003b54:	6a19      	ldr	r1, [r3, #32]
 8003b56:	f240 4244 	movw	r2, #1092	; 0x444
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	b91a      	cbnz	r2, 8003b66 <HAL_TIM_Base_Stop_IT+0xa2>
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8003b66:	2000      	movs	r0, #0
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	08009d93 	.word	0x08009d93

08003b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	4770      	bx	lr

08003b76 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	4770      	bx	lr

08003b7a <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b7c:	6803      	ldr	r3, [r0, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b82:	b510      	push	{r4, lr}
 8003b84:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b86:	d514      	bpl.n	8003bb2 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	0792      	lsls	r2, r2, #30
 8003b8c:	d511      	bpl.n	8003bb2 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8e:	f06f 0202 	mvn.w	r2, #2
 8003b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003b94:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b96:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003b98:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9a:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003b9c:	d002      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	f7ff ffea 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 8003ba2:	e004      	b.n	8003bae <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba4:	f7ff ffe6 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff ffe5 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	0750      	lsls	r0, r2, #29
 8003bb8:	d516      	bpl.n	8003be8 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	0751      	lsls	r1, r2, #29
 8003bbe:	d513      	bpl.n	8003be8 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc0:	f06f 0204 	mvn.w	r2, #4
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003bc6:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc8:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003bca:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bce:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd0:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003bd2:	d002      	beq.n	8003bda <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd4:	f7ff ffcf 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e004      	b.n	8003be4 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	f7ff ffcb 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7ff ffca 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be4:	2300      	movs	r3, #0
 8003be6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	0712      	lsls	r2, r2, #28
 8003bee:	d515      	bpl.n	8003c1c <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	0710      	lsls	r0, r2, #28
 8003bf4:	d512      	bpl.n	8003c1c <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf6:	f06f 0208 	mvn.w	r2, #8
 8003bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003bfc:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003c00:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c02:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003c04:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003c06:	d002      	beq.n	8003c0e <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003c08:	f7ff ffb5 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e004      	b.n	8003c18 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	f7ff ffb1 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003c12:	4620      	mov	r0, r4
 8003c14:	f7ff ffb0 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	06d2      	lsls	r2, r2, #27
 8003c22:	d516      	bpl.n	8003c52 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	06d0      	lsls	r0, r2, #27
 8003c28:	d513      	bpl.n	8003c52 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c2a:	f06f 0210 	mvn.w	r2, #16
 8003c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003c30:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c32:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003c34:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c38:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003c3c:	d002      	beq.n	8003c44 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	f7ff ff9a 	bl	8003b76 <HAL_TIM_IC_CaptureCallback>
 8003c42:	e004      	b.n	8003c4e <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c44:	f7ff ff96 	bl	8003b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f7ff ff95 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	07d1      	lsls	r1, r2, #31
 8003c58:	d508      	bpl.n	8003c6c <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	07d2      	lsls	r2, r2, #31
 8003c5e:	d505      	bpl.n	8003c6c <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c60:	f06f 0201 	mvn.w	r2, #1
 8003c64:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c66:	4620      	mov	r0, r4
 8003c68:	f7fe f8d4 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	0610      	lsls	r0, r2, #24
 8003c72:	d508      	bpl.n	8003c86 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	0611      	lsls	r1, r2, #24
 8003c78:	d505      	bpl.n	8003c86 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c80:	4620      	mov	r0, r4
 8003c82:	f7ff fed0 	bl	8003a26 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	691a      	ldr	r2, [r3, #16]
 8003c8a:	0652      	lsls	r2, r2, #25
 8003c8c:	d508      	bpl.n	8003ca0 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	0650      	lsls	r0, r2, #25
 8003c92:	d505      	bpl.n	8003ca0 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c98:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff ff6d 	bl	8003b7a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	0691      	lsls	r1, r2, #26
 8003ca6:	d50a      	bpl.n	8003cbe <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	0692      	lsls	r2, r2, #26
 8003cac:	d507      	bpl.n	8003cbe <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003cb2:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8003cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8003cba:	f7ff beb3 	b.w	8003a24 <HAL_TIMEx_CommutationCallback>
 8003cbe:	bd10      	pop	{r4, pc}

08003cc0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003cc0:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8003cc2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003cc4:	4290      	cmp	r0, r2
 8003cc6:	d012      	beq.n	8003cee <TIM_Base_SetConfig+0x2e>
 8003cc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0x2e>
 8003cce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003cd2:	4290      	cmp	r0, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0x2e>
 8003cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cda:	4290      	cmp	r0, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0x2e>
 8003cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ce2:	4290      	cmp	r0, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0x2e>
 8003ce6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003cea:	4290      	cmp	r0, r2
 8003cec:	d118      	bne.n	8003d20 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003cee:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cf4:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003cf6:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <TIM_Base_SetConfig+0xbc>)
 8003cf8:	4290      	cmp	r0, r2
 8003cfa:	d037      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003cfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d00:	d034      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d02:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <TIM_Base_SetConfig+0xc0>)
 8003d04:	4290      	cmp	r0, r2
 8003d06:	d031      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d0c:	4290      	cmp	r0, r2
 8003d0e:	d02d      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d14:	4290      	cmp	r0, r2
 8003d16:	d029      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d18:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d1c:	4290      	cmp	r0, r2
 8003d1e:	d025      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <TIM_Base_SetConfig+0xc4>)
 8003d22:	4290      	cmp	r0, r2
 8003d24:	d022      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d2a:	4290      	cmp	r0, r2
 8003d2c:	d01e      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d32:	4290      	cmp	r0, r2
 8003d34:	d01a      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d36:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003d3a:	4290      	cmp	r0, r2
 8003d3c:	d016      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d42:	4290      	cmp	r0, r2
 8003d44:	d012      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
 8003d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d4a:	4290      	cmp	r0, r2
 8003d4c:	d00e      	beq.n	8003d6c <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8003d4e:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d50:	688b      	ldr	r3, [r1, #8]
 8003d52:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <TIM_Base_SetConfig+0xbc>)
 8003d5a:	4298      	cmp	r0, r3
 8003d5c:	d00b      	beq.n	8003d76 <TIM_Base_SetConfig+0xb6>
 8003d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d62:	4298      	cmp	r0, r3
 8003d64:	d007      	beq.n	8003d76 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d66:	2301      	movs	r3, #1
 8003d68:	6143      	str	r3, [r0, #20]
 8003d6a:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6c:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d72:	4313      	orrs	r3, r2
 8003d74:	e7eb      	b.n	8003d4e <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d76:	690b      	ldr	r3, [r1, #16]
 8003d78:	6303      	str	r3, [r0, #48]	; 0x30
 8003d7a:	e7f4      	b.n	8003d66 <TIM_Base_SetConfig+0xa6>
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40014000 	.word	0x40014000

08003d88 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8003d88:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d065      	beq.n	8003e5c <HAL_TIM_Base_Init+0xd4>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
 8003d90:	6803      	ldr	r3, [r0, #0]
 8003d92:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <HAL_TIM_Base_Init+0xd8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d036      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9c:	d033      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003d9e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02f      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02b      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d027      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d023      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01f      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dc6:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01b      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d017      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003de6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_Base_Init+0x7e>
 8003dfe:	4819      	ldr	r0, [pc, #100]	; (8003e64 <HAL_TIM_Base_Init+0xdc>)
 8003e00:	21d9      	movs	r1, #217	; 0xd9
 8003e02:	f7fd fcf1 	bl	80017e8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003e06:	68a3      	ldr	r3, [r4, #8]
 8003e08:	f033 0210 	bics.w	r2, r3, #16
 8003e0c:	d009      	beq.n	8003e22 <HAL_TIM_Base_Init+0x9a>
 8003e0e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003e12:	2a20      	cmp	r2, #32
 8003e14:	d005      	beq.n	8003e22 <HAL_TIM_Base_Init+0x9a>
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_Base_Init+0x9a>
 8003e1a:	4812      	ldr	r0, [pc, #72]	; (8003e64 <HAL_TIM_Base_Init+0xdc>)
 8003e1c:	21da      	movs	r1, #218	; 0xda
 8003e1e:	f7fd fce3 	bl	80017e8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8003e28:	d006      	beq.n	8003e38 <HAL_TIM_Base_Init+0xb0>
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d003      	beq.n	8003e38 <HAL_TIM_Base_Init+0xb0>
 8003e30:	480c      	ldr	r0, [pc, #48]	; (8003e64 <HAL_TIM_Base_Init+0xdc>)
 8003e32:	21db      	movs	r1, #219	; 0xdb
 8003e34:	f7fd fcd8 	bl	80017e8 <assert_failed>
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8003e38:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8003e3c:	b913      	cbnz	r3, 8003e44 <HAL_TIM_Base_Init+0xbc>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7fd fcdc 	bl	80017fc <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003e44:	2302      	movs	r3, #2
 8003e46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003e4a:	6820      	ldr	r0, [r4, #0]
 8003e4c:	1d21      	adds	r1, r4, #4
 8003e4e:	f7ff ff37 	bl	8003cc0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8003e58:	2000      	movs	r0, #0
 8003e5a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8003e5c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8003e5e:	bd10      	pop	{r4, pc}
 8003e60:	40010000 	.word	0x40010000
 8003e64:	08009d93 	.word	0x08009d93

08003e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003e6c:	4b91      	ldr	r3, [pc, #580]	; (80040b4 <HAL_GPIO_Init+0x24c>)
 8003e6e:	4298      	cmp	r0, r3
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e70:	4604      	mov	r4, r0
 8003e72:	460d      	mov	r5, r1
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003e74:	d023      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	4298      	cmp	r0, r3
 8003e7c:	d01f      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e82:	4298      	cmp	r0, r3
 8003e84:	d01b      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8a:	4298      	cmp	r0, r3
 8003e8c:	d017      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e92:	4298      	cmp	r0, r3
 8003e94:	d013      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e9a:	4298      	cmp	r0, r3
 8003e9c:	d00f      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea2:	4298      	cmp	r0, r3
 8003ea4:	d00b      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003ea6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eb2:	4298      	cmp	r0, r3
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x56>
 8003eb6:	4880      	ldr	r0, [pc, #512]	; (80040b8 <HAL_GPIO_Init+0x250>)
 8003eb8:	21c5      	movs	r1, #197	; 0xc5
 8003eba:	f7fd fc95 	bl	80017e8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003ebe:	882b      	ldrh	r3, [r5, #0]
 8003ec0:	b91b      	cbnz	r3, 8003eca <HAL_GPIO_Init+0x62>
 8003ec2:	487d      	ldr	r0, [pc, #500]	; (80040b8 <HAL_GPIO_Init+0x250>)
 8003ec4:	21c6      	movs	r1, #198	; 0xc6
 8003ec6:	f7fd fc8f 	bl	80017e8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003eca:	686b      	ldr	r3, [r5, #4]
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d917      	bls.n	8003f00 <HAL_GPIO_Init+0x98>
 8003ed0:	f1a3 0211 	sub.w	r2, r3, #17
 8003ed4:	2a01      	cmp	r2, #1
 8003ed6:	d913      	bls.n	8003f00 <HAL_GPIO_Init+0x98>
 8003ed8:	4978      	ldr	r1, [pc, #480]	; (80040bc <HAL_GPIO_Init+0x254>)
 8003eda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ede:	428a      	cmp	r2, r1
 8003ee0:	d00e      	beq.n	8003f00 <HAL_GPIO_Init+0x98>
 8003ee2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8003ee6:	428b      	cmp	r3, r1
 8003ee8:	d00a      	beq.n	8003f00 <HAL_GPIO_Init+0x98>
 8003eea:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8003eee:	428a      	cmp	r2, r1
 8003ef0:	d006      	beq.n	8003f00 <HAL_GPIO_Init+0x98>
 8003ef2:	4a73      	ldr	r2, [pc, #460]	; (80040c0 <HAL_GPIO_Init+0x258>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x98>
 8003ef8:	486f      	ldr	r0, [pc, #444]	; (80040b8 <HAL_GPIO_Init+0x250>)
 8003efa:	21c7      	movs	r1, #199	; 0xc7
 8003efc:	f7fd fc74 	bl	80017e8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003f00:	68ab      	ldr	r3, [r5, #8]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d903      	bls.n	8003f0e <HAL_GPIO_Init+0xa6>
 8003f06:	486c      	ldr	r0, [pc, #432]	; (80040b8 <HAL_GPIO_Init+0x250>)
 8003f08:	21c8      	movs	r1, #200	; 0xc8
 8003f0a:	f7fd fc6d 	bl	80017e8 <assert_failed>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f0e:	2600      	movs	r6, #0

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f10:	2301      	movs	r3, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f12:	682f      	ldr	r7, [r5, #0]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f14:	40b3      	lsls	r3, r6
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f16:	401f      	ands	r7, r3

    if(iocurrent == ioposition)
 8003f18:	429f      	cmp	r7, r3
 8003f1a:	f040 80c5 	bne.w	80040a8 <HAL_GPIO_Init+0x240>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f1e:	686b      	ldr	r3, [r5, #4]
 8003f20:	f023 0310 	bic.w	r3, r3, #16
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d117      	bne.n	8003f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003f28:	692b      	ldr	r3, [r5, #16]
 8003f2a:	2b0d      	cmp	r3, #13
 8003f2c:	d905      	bls.n	8003f3a <HAL_GPIO_Init+0xd2>
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0xd2>
 8003f32:	4861      	ldr	r0, [pc, #388]	; (80040b8 <HAL_GPIO_Init+0x250>)
 8003f34:	21d9      	movs	r1, #217	; 0xd9
 8003f36:	f7fd fc57 	bl	80017e8 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f3a:	08f2      	lsrs	r2, r6, #3
 8003f3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f40:	f006 0107 	and.w	r1, r6, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f44:	6a10      	ldr	r0, [r2, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f46:	0089      	lsls	r1, r1, #2
 8003f48:	230f      	movs	r3, #15
 8003f4a:	408b      	lsls	r3, r1
 8003f4c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f50:	692b      	ldr	r3, [r5, #16]
 8003f52:	408b      	lsls	r3, r1
 8003f54:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3] = temp;
 8003f56:	6213      	str	r3, [r2, #32]
 8003f58:	ea4f 0946 	mov.w	r9, r6, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f5c:	f04f 0803 	mov.w	r8, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f60:	6822      	ldr	r2, [r4, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f62:	686b      	ldr	r3, [r5, #4]
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f64:	fa08 f809 	lsl.w	r8, r8, r9
 8003f68:	ea6f 0808 	mvn.w	r8, r8
 8003f6c:	ea08 0102 	and.w	r1, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f70:	f003 0203 	and.w	r2, r3, #3
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f74:	f023 0310 	bic.w	r3, r3, #16
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f78:	fa02 f209 	lsl.w	r2, r2, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f7c:	3b01      	subs	r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f7e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f80:	2b01      	cmp	r3, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8003f82:	6022      	str	r2, [r4, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f84:	d817      	bhi.n	8003fb6 <HAL_GPIO_Init+0x14e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003f86:	68eb      	ldr	r3, [r5, #12]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d903      	bls.n	8003f94 <HAL_GPIO_Init+0x12c>
 8003f8c:	484a      	ldr	r0, [pc, #296]	; (80040b8 <HAL_GPIO_Init+0x250>)
 8003f8e:	21ec      	movs	r1, #236	; 0xec
 8003f90:	f7fd fc2a 	bl	80017e8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f94:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f96:	ea08 0203 	and.w	r2, r8, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f9a:	68eb      	ldr	r3, [r5, #12]
 8003f9c:	fa03 f309 	lsl.w	r3, r3, r9
 8003fa0:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8003fa2:	60a3      	str	r3, [r4, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa4:	6863      	ldr	r3, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fa6:	ea23 0207 	bic.w	r2, r3, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003faa:	686b      	ldr	r3, [r5, #4]
 8003fac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003fb0:	40b3      	lsls	r3, r6
 8003fb2:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8003fb4:	6063      	str	r3, [r4, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fb6:	68e3      	ldr	r3, [r4, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fb8:	6869      	ldr	r1, [r5, #4]
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003fba:	ea08 0803 	and.w	r8, r8, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fbe:	68ab      	ldr	r3, [r5, #8]
 8003fc0:	fa03 f309 	lsl.w	r3, r3, r9
 8003fc4:	ea48 0303 	orr.w	r3, r8, r3
      GPIOx->PUPDR = temp;
 8003fc8:	60e3      	str	r3, [r4, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fca:	00cb      	lsls	r3, r1, #3
 8003fcc:	d56c      	bpl.n	80040a8 <HAL_GPIO_Init+0x240>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fce:	4a3d      	ldr	r2, [pc, #244]	; (80040c4 <HAL_GPIO_Init+0x25c>)
 8003fd0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd8:	f026 0203 	bic.w	r2, r6, #3
 8003fdc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003fe0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fe4:	f006 0e03 	and.w	lr, r6, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8003fe8:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fea:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003fee:	230f      	movs	r3, #15
 8003ff0:	fa03 f30e 	lsl.w	r3, r3, lr
 8003ff4:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_GPIO_Init+0x24c>)
 8003ffa:	429c      	cmp	r4, r3
 8003ffc:	d022      	beq.n	8004044 <HAL_GPIO_Init+0x1dc>
 8003ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004002:	429c      	cmp	r4, r3
 8004004:	d020      	beq.n	8004048 <HAL_GPIO_Init+0x1e0>
 8004006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800400a:	429c      	cmp	r4, r3
 800400c:	d01e      	beq.n	800404c <HAL_GPIO_Init+0x1e4>
 800400e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004012:	429c      	cmp	r4, r3
 8004014:	d01c      	beq.n	8004050 <HAL_GPIO_Init+0x1e8>
 8004016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800401a:	429c      	cmp	r4, r3
 800401c:	d01a      	beq.n	8004054 <HAL_GPIO_Init+0x1ec>
 800401e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004022:	429c      	cmp	r4, r3
 8004024:	d018      	beq.n	8004058 <HAL_GPIO_Init+0x1f0>
 8004026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402a:	429c      	cmp	r4, r3
 800402c:	d016      	beq.n	800405c <HAL_GPIO_Init+0x1f4>
 800402e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004032:	429c      	cmp	r4, r3
 8004034:	d014      	beq.n	8004060 <HAL_GPIO_Init+0x1f8>
 8004036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800403a:	429c      	cmp	r4, r3
 800403c:	bf0c      	ite	eq
 800403e:	2308      	moveq	r3, #8
 8004040:	2309      	movne	r3, #9
 8004042:	e00e      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 8004044:	2300      	movs	r3, #0
 8004046:	e00c      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 8004048:	2301      	movs	r3, #1
 800404a:	e00a      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 800404c:	2302      	movs	r3, #2
 800404e:	e008      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 8004050:	2303      	movs	r3, #3
 8004052:	e006      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 8004054:	2304      	movs	r3, #4
 8004056:	e004      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 8004058:	2305      	movs	r3, #5
 800405a:	e002      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 800405c:	2306      	movs	r3, #6
 800405e:	e000      	b.n	8004062 <HAL_GPIO_Init+0x1fa>
 8004060:	2307      	movs	r3, #7
 8004062:	fa03 f30e 	lsl.w	r3, r3, lr
 8004066:	4303      	orrs	r3, r0
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004068:	4817      	ldr	r0, [pc, #92]	; (80040c8 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
 800406a:	6093      	str	r3, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800406c:	6803      	ldr	r3, [r0, #0]
        temp &= ~((uint32_t)iocurrent);
 800406e:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004070:	f411 3f80 	tst.w	r1, #65536	; 0x10000
        {
          temp |= iocurrent;
 8004074:	bf14      	ite	ne
 8004076:	433b      	orrne	r3, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8004078:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800407a:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 800407c:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800407e:	0388      	lsls	r0, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004080:	4811      	ldr	r0, [pc, #68]	; (80040c8 <HAL_GPIO_Init+0x260>)

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8004082:	bf4c      	ite	mi
 8004084:	433b      	orrmi	r3, r7
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8004086:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004088:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408a:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8004090:	bf14      	ite	ne
 8004092:	433b      	orrne	r3, r7
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8004094:	4013      	andeq	r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004096:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 8004098:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800409a:	0289      	lsls	r1, r1, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800409c:	bf54      	ite	pl
 800409e:	ea02 0703 	andpl.w	r7, r2, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80040a2:	431f      	orrmi	r7, r3
        }
        EXTI->FTSR = temp;
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <HAL_GPIO_Init+0x260>)
 80040a6:	60df      	str	r7, [r3, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80040a8:	3601      	adds	r6, #1
 80040aa:	2e10      	cmp	r6, #16
 80040ac:	f47f af30 	bne.w	8003f10 <HAL_GPIO_Init+0xa8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80040b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b4:	40020000 	.word	0x40020000
 80040b8:	08009de2 	.word	0x08009de2
 80040bc:	10110000 	.word	0x10110000
 80040c0:	10220000 	.word	0x10220000
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40013c00 	.word	0x40013c00

080040cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	4605      	mov	r5, r0
 80040d0:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80040d2:	460c      	mov	r4, r1
 80040d4:	b921      	cbnz	r1, 80040e0 <HAL_GPIO_WritePin+0x14>
 80040d6:	4808      	ldr	r0, [pc, #32]	; (80040f8 <HAL_GPIO_WritePin+0x2c>)
 80040d8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80040dc:	f7fd fb84 	bl	80017e8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80040e0:	2e01      	cmp	r6, #1
 80040e2:	d905      	bls.n	80040f0 <HAL_GPIO_WritePin+0x24>
 80040e4:	4804      	ldr	r0, [pc, #16]	; (80040f8 <HAL_GPIO_WritePin+0x2c>)
 80040e6:	f240 11ad 	movw	r1, #429	; 0x1ad
 80040ea:	f7fd fb7d 	bl	80017e8 <assert_failed>
 80040ee:	e001      	b.n	80040f4 <HAL_GPIO_WritePin+0x28>

  if(PinState != GPIO_PIN_RESET)
 80040f0:	b906      	cbnz	r6, 80040f4 <HAL_GPIO_WritePin+0x28>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040f2:	0424      	lsls	r4, r4, #16
 80040f4:	61ac      	str	r4, [r5, #24]
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	08009de2 	.word	0x08009de2

080040fc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004100:	460d      	mov	r5, r1
 8004102:	b921      	cbnz	r1, 800410e <HAL_GPIO_TogglePin+0x12>
 8004104:	4804      	ldr	r0, [pc, #16]	; (8004118 <HAL_GPIO_TogglePin+0x1c>)
 8004106:	f240 11c3 	movw	r1, #451	; 0x1c3
 800410a:	f7fd fb6d 	bl	80017e8 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 800410e:	6961      	ldr	r1, [r4, #20]
 8004110:	4069      	eors	r1, r5
 8004112:	6161      	str	r1, [r4, #20]
 8004114:	bd38      	pop	{r3, r4, r5, pc}
 8004116:	bf00      	nop
 8004118:	08009de2 	.word	0x08009de2

0800411c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800411c:	b510      	push	{r4, lr}
 800411e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004120:	f7fe fff8 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8004124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004128:	fbb0 f0f3 	udiv	r0, r0, r3
 800412c:	f7ff f99a 	bl	8003464 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	4621      	mov	r1, r4
 8004136:	2200      	movs	r2, #0
 8004138:	f7ff f93e 	bl	80033b8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800413c:	2000      	movs	r0, #0
 800413e:	bd10      	pop	{r4, pc}

08004140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004140:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_Init+0x28>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004152:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004154:	2003      	movs	r0, #3
 8004156:	f7ff f913 	bl	8003380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800415a:	200f      	movs	r0, #15
 800415c:	f7ff ffde 	bl	800411c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004160:	f7fd fc3c 	bl	80019dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8004164:	2000      	movs	r0, #0
 8004166:	bd08      	pop	{r3, pc}
 8004168:	40023c00 	.word	0x40023c00

0800416c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800416c:	4a02      	ldr	r2, [pc, #8]	; (8004178 <HAL_IncTick+0xc>)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	2000a124 	.word	0x2000a124

0800417c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800417c:	4b01      	ldr	r3, [pc, #4]	; (8004184 <HAL_GetTick+0x8>)
 800417e:	6818      	ldr	r0, [r3, #0]
}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	2000a124 	.word	0x2000a124

08004188 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8004188:	4b01      	ldr	r3, [pc, #4]	; (8004190 <HAL_GetREVID+0x8>)
 800418a:	6818      	ldr	r0, [r3, #0]
}
 800418c:	0c00      	lsrs	r0, r0, #16
 800418e:	4770      	bx	lr
 8004190:	e0042000 	.word	0xe0042000

08004194 <__assert_func>:
 8004194:	b500      	push	{lr}
 8004196:	4c0a      	ldr	r4, [pc, #40]	; (80041c0 <__assert_func+0x2c>)
 8004198:	6824      	ldr	r4, [r4, #0]
 800419a:	4605      	mov	r5, r0
 800419c:	b085      	sub	sp, #20
 800419e:	68e0      	ldr	r0, [r4, #12]
 80041a0:	b152      	cbz	r2, 80041b8 <__assert_func+0x24>
 80041a2:	4c08      	ldr	r4, [pc, #32]	; (80041c4 <__assert_func+0x30>)
 80041a4:	9202      	str	r2, [sp, #8]
 80041a6:	e88d 0012 	stmia.w	sp, {r1, r4}
 80041aa:	461a      	mov	r2, r3
 80041ac:	4906      	ldr	r1, [pc, #24]	; (80041c8 <__assert_func+0x34>)
 80041ae:	462b      	mov	r3, r5
 80041b0:	f000 f80e 	bl	80041d0 <fiprintf>
 80041b4:	f002 f9b0 	bl	8006518 <abort>
 80041b8:	4c04      	ldr	r4, [pc, #16]	; (80041cc <__assert_func+0x38>)
 80041ba:	4622      	mov	r2, r4
 80041bc:	e7f2      	b.n	80041a4 <__assert_func+0x10>
 80041be:	bf00      	nop
 80041c0:	20000430 	.word	0x20000430
 80041c4:	08009e34 	.word	0x08009e34
 80041c8:	08009e44 	.word	0x08009e44
 80041cc:	08009e40 	.word	0x08009e40

080041d0 <fiprintf>:
 80041d0:	b40e      	push	{r1, r2, r3}
 80041d2:	b510      	push	{r4, lr}
 80041d4:	b083      	sub	sp, #12
 80041d6:	ab05      	add	r3, sp, #20
 80041d8:	4c06      	ldr	r4, [pc, #24]	; (80041f4 <fiprintf+0x24>)
 80041da:	f853 2b04 	ldr.w	r2, [r3], #4
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	4601      	mov	r1, r0
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	f000 f8c8 	bl	8004378 <_vfiprintf_r>
 80041e8:	b003      	add	sp, #12
 80041ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ee:	b003      	add	sp, #12
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000430 	.word	0x20000430

080041f8 <printf>:
 80041f8:	b40f      	push	{r0, r1, r2, r3}
 80041fa:	b500      	push	{lr}
 80041fc:	4907      	ldr	r1, [pc, #28]	; (800421c <printf+0x24>)
 80041fe:	b083      	sub	sp, #12
 8004200:	ab04      	add	r3, sp, #16
 8004202:	6808      	ldr	r0, [r1, #0]
 8004204:	f853 2b04 	ldr.w	r2, [r3], #4
 8004208:	6881      	ldr	r1, [r0, #8]
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	f000 fef2 	bl	8004ff4 <_vfprintf_r>
 8004210:	b003      	add	sp, #12
 8004212:	f85d eb04 	ldr.w	lr, [sp], #4
 8004216:	b004      	add	sp, #16
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000430 	.word	0x20000430

08004220 <_puts_r>:
 8004220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004222:	4604      	mov	r4, r0
 8004224:	b089      	sub	sp, #36	; 0x24
 8004226:	4608      	mov	r0, r1
 8004228:	460d      	mov	r5, r1
 800422a:	f000 f82f 	bl	800428c <strlen>
 800422e:	68a3      	ldr	r3, [r4, #8]
 8004230:	4f11      	ldr	r7, [pc, #68]	; (8004278 <_puts_r+0x58>)
 8004232:	899a      	ldrh	r2, [r3, #12]
 8004234:	9504      	str	r5, [sp, #16]
 8004236:	2102      	movs	r1, #2
 8004238:	f100 0e01 	add.w	lr, r0, #1
 800423c:	2601      	movs	r6, #1
 800423e:	ad04      	add	r5, sp, #16
 8004240:	9102      	str	r1, [sp, #8]
 8004242:	0491      	lsls	r1, r2, #18
 8004244:	9005      	str	r0, [sp, #20]
 8004246:	f8cd e00c 	str.w	lr, [sp, #12]
 800424a:	9706      	str	r7, [sp, #24]
 800424c:	9607      	str	r6, [sp, #28]
 800424e:	9501      	str	r5, [sp, #4]
 8004250:	d406      	bmi.n	8004260 <_puts_r+0x40>
 8004252:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800425c:	819a      	strh	r2, [r3, #12]
 800425e:	6659      	str	r1, [r3, #100]	; 0x64
 8004260:	4620      	mov	r0, r4
 8004262:	4619      	mov	r1, r3
 8004264:	aa01      	add	r2, sp, #4
 8004266:	f003 fc13 	bl	8007a90 <__sfvwrite_r>
 800426a:	2800      	cmp	r0, #0
 800426c:	bf14      	ite	ne
 800426e:	f04f 30ff 	movne.w	r0, #4294967295
 8004272:	200a      	moveq	r0, #10
 8004274:	b009      	add	sp, #36	; 0x24
 8004276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004278:	08009e78 	.word	0x08009e78

0800427c <puts>:
 800427c:	4b02      	ldr	r3, [pc, #8]	; (8004288 <puts+0xc>)
 800427e:	4601      	mov	r1, r0
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f7ff bfcd 	b.w	8004220 <_puts_r>
 8004286:	bf00      	nop
 8004288:	20000430 	.word	0x20000430

0800428c <strlen>:
 800428c:	f020 0103 	bic.w	r1, r0, #3
 8004290:	f010 0003 	ands.w	r0, r0, #3
 8004294:	f1c0 0000 	rsb	r0, r0, #0
 8004298:	f851 3b04 	ldr.w	r3, [r1], #4
 800429c:	f100 0c04 	add.w	ip, r0, #4
 80042a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80042a4:	f06f 0200 	mvn.w	r2, #0
 80042a8:	bf1c      	itt	ne
 80042aa:	fa22 f20c 	lsrne.w	r2, r2, ip
 80042ae:	4313      	orrne	r3, r2
 80042b0:	f04f 0c01 	mov.w	ip, #1
 80042b4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 80042b8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 80042bc:	eba3 020c 	sub.w	r2, r3, ip
 80042c0:	ea22 0203 	bic.w	r2, r2, r3
 80042c4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 80042c8:	bf04      	itt	eq
 80042ca:	f851 3b04 	ldreq.w	r3, [r1], #4
 80042ce:	3004      	addeq	r0, #4
 80042d0:	d0f4      	beq.n	80042bc <strlen+0x30>
 80042d2:	f1c2 0100 	rsb	r1, r2, #0
 80042d6:	ea02 0201 	and.w	r2, r2, r1
 80042da:	fab2 f282 	clz	r2, r2
 80042de:	f1c2 021f 	rsb	r2, r2, #31
 80042e2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80042e6:	4770      	bx	lr

080042e8 <__sprint_r.part.0>:
 80042e8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80042ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ee:	049c      	lsls	r4, r3, #18
 80042f0:	460f      	mov	r7, r1
 80042f2:	4692      	mov	sl, r2
 80042f4:	d52b      	bpl.n	800434e <__sprint_r.part.0+0x66>
 80042f6:	6893      	ldr	r3, [r2, #8]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	b333      	cbz	r3, 800434a <__sprint_r.part.0+0x62>
 80042fc:	4680      	mov	r8, r0
 80042fe:	f102 0908 	add.w	r9, r2, #8
 8004302:	e919 0060 	ldmdb	r9, {r5, r6}
 8004306:	08b6      	lsrs	r6, r6, #2
 8004308:	d017      	beq.n	800433a <__sprint_r.part.0+0x52>
 800430a:	3d04      	subs	r5, #4
 800430c:	2400      	movs	r4, #0
 800430e:	e001      	b.n	8004314 <__sprint_r.part.0+0x2c>
 8004310:	42a6      	cmp	r6, r4
 8004312:	d010      	beq.n	8004336 <__sprint_r.part.0+0x4e>
 8004314:	4640      	mov	r0, r8
 8004316:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800431a:	463a      	mov	r2, r7
 800431c:	f003 fa30 	bl	8007780 <_fputwc_r>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	f104 0401 	add.w	r4, r4, #1
 8004326:	d1f3      	bne.n	8004310 <__sprint_r.part.0+0x28>
 8004328:	2300      	movs	r3, #0
 800432a:	f8ca 3008 	str.w	r3, [sl, #8]
 800432e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	f8da 3008 	ldr.w	r3, [sl, #8]
 800433a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800433e:	f8ca 3008 	str.w	r3, [sl, #8]
 8004342:	f109 0908 	add.w	r9, r9, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1db      	bne.n	8004302 <__sprint_r.part.0+0x1a>
 800434a:	2000      	movs	r0, #0
 800434c:	e7ec      	b.n	8004328 <__sprint_r.part.0+0x40>
 800434e:	f003 fb9f 	bl	8007a90 <__sfvwrite_r>
 8004352:	2300      	movs	r3, #0
 8004354:	f8ca 3008 	str.w	r3, [sl, #8]
 8004358:	f8ca 3004 	str.w	r3, [sl, #4]
 800435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004360 <__sprint_r>:
 8004360:	6893      	ldr	r3, [r2, #8]
 8004362:	b410      	push	{r4}
 8004364:	b11b      	cbz	r3, 800436e <__sprint_r+0xe>
 8004366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800436a:	f7ff bfbd 	b.w	80042e8 <__sprint_r.part.0>
 800436e:	4618      	mov	r0, r3
 8004370:	6053      	str	r3, [r2, #4]
 8004372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_vfiprintf_r>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	b0ab      	sub	sp, #172	; 0xac
 800437e:	461c      	mov	r4, r3
 8004380:	9100      	str	r1, [sp, #0]
 8004382:	4693      	mov	fp, r2
 8004384:	9304      	str	r3, [sp, #16]
 8004386:	9001      	str	r0, [sp, #4]
 8004388:	b118      	cbz	r0, 8004392 <_vfiprintf_r+0x1a>
 800438a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80e1 	beq.w	8004554 <_vfiprintf_r+0x1dc>
 8004392:	9b00      	ldr	r3, [sp, #0]
 8004394:	8999      	ldrh	r1, [r3, #12]
 8004396:	b28a      	uxth	r2, r1
 8004398:	0490      	lsls	r0, r2, #18
 800439a:	d408      	bmi.n	80043ae <_vfiprintf_r+0x36>
 800439c:	4618      	mov	r0, r3
 800439e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80043a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043a8:	8182      	strh	r2, [r0, #12]
 80043aa:	6643      	str	r3, [r0, #100]	; 0x64
 80043ac:	b292      	uxth	r2, r2
 80043ae:	0711      	lsls	r1, r2, #28
 80043b0:	f140 80b0 	bpl.w	8004514 <_vfiprintf_r+0x19c>
 80043b4:	9b00      	ldr	r3, [sp, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80ab 	beq.w	8004514 <_vfiprintf_r+0x19c>
 80043be:	f002 021a 	and.w	r2, r2, #26
 80043c2:	2a0a      	cmp	r2, #10
 80043c4:	f000 80b2 	beq.w	800452c <_vfiprintf_r+0x1b4>
 80043c8:	2300      	movs	r3, #0
 80043ca:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80043ce:	9309      	str	r3, [sp, #36]	; 0x24
 80043d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80043d2:	930e      	str	r3, [sp, #56]	; 0x38
 80043d4:	9302      	str	r3, [sp, #8]
 80043d6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80043da:	4654      	mov	r4, sl
 80043dc:	f89b 3000 	ldrb.w	r3, [fp]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 849d 	beq.w	8004d20 <_vfiprintf_r+0x9a8>
 80043e6:	2b25      	cmp	r3, #37	; 0x25
 80043e8:	f000 849a 	beq.w	8004d20 <_vfiprintf_r+0x9a8>
 80043ec:	465a      	mov	r2, fp
 80043ee:	e001      	b.n	80043f4 <_vfiprintf_r+0x7c>
 80043f0:	2b25      	cmp	r3, #37	; 0x25
 80043f2:	d003      	beq.n	80043fc <_vfiprintf_r+0x84>
 80043f4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f9      	bne.n	80043f0 <_vfiprintf_r+0x78>
 80043fc:	ebcb 0602 	rsb	r6, fp, r2
 8004400:	4615      	mov	r5, r2
 8004402:	b196      	cbz	r6, 800442a <_vfiprintf_r+0xb2>
 8004404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004408:	f8c4 b000 	str.w	fp, [r4]
 800440c:	3301      	adds	r3, #1
 800440e:	4432      	add	r2, r6
 8004410:	2b07      	cmp	r3, #7
 8004412:	6066      	str	r6, [r4, #4]
 8004414:	920f      	str	r2, [sp, #60]	; 0x3c
 8004416:	930e      	str	r3, [sp, #56]	; 0x38
 8004418:	dd77      	ble.n	800450a <_vfiprintf_r+0x192>
 800441a:	2a00      	cmp	r2, #0
 800441c:	f040 84a9 	bne.w	8004d72 <_vfiprintf_r+0x9fa>
 8004420:	9b02      	ldr	r3, [sp, #8]
 8004422:	920e      	str	r2, [sp, #56]	; 0x38
 8004424:	4433      	add	r3, r6
 8004426:	4654      	mov	r4, sl
 8004428:	9302      	str	r3, [sp, #8]
 800442a:	782b      	ldrb	r3, [r5, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8359 	beq.w	8004ae4 <_vfiprintf_r+0x76c>
 8004432:	2100      	movs	r1, #0
 8004434:	f04f 3cff 	mov.w	ip, #4294967295
 8004438:	1c68      	adds	r0, r5, #1
 800443a:	786b      	ldrb	r3, [r5, #1]
 800443c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8004440:	4688      	mov	r8, r1
 8004442:	460d      	mov	r5, r1
 8004444:	4666      	mov	r6, ip
 8004446:	f100 0b01 	add.w	fp, r0, #1
 800444a:	f1a3 0220 	sub.w	r2, r3, #32
 800444e:	2a58      	cmp	r2, #88	; 0x58
 8004450:	f200 82a7 	bhi.w	80049a2 <_vfiprintf_r+0x62a>
 8004454:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004458:	02a50297 	.word	0x02a50297
 800445c:	029f02a5 	.word	0x029f02a5
 8004460:	02a502a5 	.word	0x02a502a5
 8004464:	02a502a5 	.word	0x02a502a5
 8004468:	02a502a5 	.word	0x02a502a5
 800446c:	025f0252 	.word	0x025f0252
 8004470:	010c02a5 	.word	0x010c02a5
 8004474:	02a5026a 	.word	0x02a5026a
 8004478:	012e0128 	.word	0x012e0128
 800447c:	012e012e 	.word	0x012e012e
 8004480:	012e012e 	.word	0x012e012e
 8004484:	012e012e 	.word	0x012e012e
 8004488:	012e012e 	.word	0x012e012e
 800448c:	02a502a5 	.word	0x02a502a5
 8004490:	02a502a5 	.word	0x02a502a5
 8004494:	02a502a5 	.word	0x02a502a5
 8004498:	02a502a5 	.word	0x02a502a5
 800449c:	02a502a5 	.word	0x02a502a5
 80044a0:	02a5013c 	.word	0x02a5013c
 80044a4:	02a502a5 	.word	0x02a502a5
 80044a8:	02a502a5 	.word	0x02a502a5
 80044ac:	02a502a5 	.word	0x02a502a5
 80044b0:	02a502a5 	.word	0x02a502a5
 80044b4:	017302a5 	.word	0x017302a5
 80044b8:	02a502a5 	.word	0x02a502a5
 80044bc:	02a502a5 	.word	0x02a502a5
 80044c0:	018a02a5 	.word	0x018a02a5
 80044c4:	02a502a5 	.word	0x02a502a5
 80044c8:	02a501a2 	.word	0x02a501a2
 80044cc:	02a502a5 	.word	0x02a502a5
 80044d0:	02a502a5 	.word	0x02a502a5
 80044d4:	02a502a5 	.word	0x02a502a5
 80044d8:	02a502a5 	.word	0x02a502a5
 80044dc:	01c602a5 	.word	0x01c602a5
 80044e0:	02a501d8 	.word	0x02a501d8
 80044e4:	02a502a5 	.word	0x02a502a5
 80044e8:	01d80122 	.word	0x01d80122
 80044ec:	02a502a5 	.word	0x02a502a5
 80044f0:	02a50249 	.word	0x02a50249
 80044f4:	01120286 	.word	0x01120286
 80044f8:	020501f1 	.word	0x020501f1
 80044fc:	020b02a5 	.word	0x020b02a5
 8004500:	008102a5 	.word	0x008102a5
 8004504:	02a502a5 	.word	0x02a502a5
 8004508:	0230      	.short	0x0230
 800450a:	3408      	adds	r4, #8
 800450c:	9b02      	ldr	r3, [sp, #8]
 800450e:	4433      	add	r3, r6
 8004510:	9302      	str	r3, [sp, #8]
 8004512:	e78a      	b.n	800442a <_vfiprintf_r+0xb2>
 8004514:	9801      	ldr	r0, [sp, #4]
 8004516:	9900      	ldr	r1, [sp, #0]
 8004518:	f001 ff9c 	bl	8006454 <__swsetup_r>
 800451c:	b9a8      	cbnz	r0, 800454a <_vfiprintf_r+0x1d2>
 800451e:	9b00      	ldr	r3, [sp, #0]
 8004520:	899a      	ldrh	r2, [r3, #12]
 8004522:	f002 021a 	and.w	r2, r2, #26
 8004526:	2a0a      	cmp	r2, #10
 8004528:	f47f af4e 	bne.w	80043c8 <_vfiprintf_r+0x50>
 800452c:	9b00      	ldr	r3, [sp, #0]
 800452e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f6ff af48 	blt.w	80043c8 <_vfiprintf_r+0x50>
 8004538:	9801      	ldr	r0, [sp, #4]
 800453a:	9900      	ldr	r1, [sp, #0]
 800453c:	465a      	mov	r2, fp
 800453e:	4623      	mov	r3, r4
 8004540:	f000 fd1c 	bl	8004f7c <__sbprintf>
 8004544:	b02b      	add	sp, #172	; 0xac
 8004546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454a:	f04f 30ff 	mov.w	r0, #4294967295
 800454e:	b02b      	add	sp, #172	; 0xac
 8004550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004554:	f003 f90a 	bl	800776c <__sinit>
 8004558:	e71b      	b.n	8004392 <_vfiprintf_r+0x1a>
 800455a:	f018 0f20 	tst.w	r8, #32
 800455e:	9503      	str	r5, [sp, #12]
 8004560:	46b4      	mov	ip, r6
 8004562:	f000 810b 	beq.w	800477c <_vfiprintf_r+0x404>
 8004566:	9b04      	ldr	r3, [sp, #16]
 8004568:	3307      	adds	r3, #7
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	f103 0208 	add.w	r2, r3, #8
 8004572:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004576:	9204      	str	r2, [sp, #16]
 8004578:	2301      	movs	r3, #1
 800457a:	2200      	movs	r2, #0
 800457c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8004580:	46e1      	mov	r9, ip
 8004582:	4615      	mov	r5, r2
 8004584:	f1bc 0f00 	cmp.w	ip, #0
 8004588:	bfa8      	it	ge
 800458a:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 800458e:	ea56 0207 	orrs.w	r2, r6, r7
 8004592:	f040 80c4 	bne.w	800471e <_vfiprintf_r+0x3a6>
 8004596:	f1bc 0f00 	cmp.w	ip, #0
 800459a:	f000 837d 	beq.w	8004c98 <_vfiprintf_r+0x920>
 800459e:	2b01      	cmp	r3, #1
 80045a0:	f000 80c5 	beq.w	800472e <_vfiprintf_r+0x3b6>
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f000 8383 	beq.w	8004cb0 <_vfiprintf_r+0x938>
 80045aa:	4651      	mov	r1, sl
 80045ac:	08f2      	lsrs	r2, r6, #3
 80045ae:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80045b2:	08f8      	lsrs	r0, r7, #3
 80045b4:	f006 0307 	and.w	r3, r6, #7
 80045b8:	4607      	mov	r7, r0
 80045ba:	4616      	mov	r6, r2
 80045bc:	3330      	adds	r3, #48	; 0x30
 80045be:	ea56 0207 	orrs.w	r2, r6, r7
 80045c2:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80045c6:	d1f1      	bne.n	80045ac <_vfiprintf_r+0x234>
 80045c8:	f018 0f01 	tst.w	r8, #1
 80045cc:	9107      	str	r1, [sp, #28]
 80045ce:	f040 83f9 	bne.w	8004dc4 <_vfiprintf_r+0xa4c>
 80045d2:	ebc1 090a 	rsb	r9, r1, sl
 80045d6:	45e1      	cmp	r9, ip
 80045d8:	464e      	mov	r6, r9
 80045da:	bfb8      	it	lt
 80045dc:	4666      	movlt	r6, ip
 80045de:	b105      	cbz	r5, 80045e2 <_vfiprintf_r+0x26a>
 80045e0:	3601      	adds	r6, #1
 80045e2:	f018 0302 	ands.w	r3, r8, #2
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	bf18      	it	ne
 80045ea:	3602      	addne	r6, #2
 80045ec:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80045f0:	9306      	str	r3, [sp, #24]
 80045f2:	f040 81f6 	bne.w	80049e2 <_vfiprintf_r+0x66a>
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	1b9d      	subs	r5, r3, r6
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	f340 81f1 	ble.w	80049e2 <_vfiprintf_r+0x66a>
 8004600:	2d10      	cmp	r5, #16
 8004602:	f340 8489 	ble.w	8004f18 <_vfiprintf_r+0xba0>
 8004606:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800460a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800460c:	4fc4      	ldr	r7, [pc, #784]	; (8004920 <_vfiprintf_r+0x5a8>)
 800460e:	4620      	mov	r0, r4
 8004610:	2310      	movs	r3, #16
 8004612:	4664      	mov	r4, ip
 8004614:	4671      	mov	r1, lr
 8004616:	4684      	mov	ip, r0
 8004618:	e007      	b.n	800462a <_vfiprintf_r+0x2b2>
 800461a:	f101 0e02 	add.w	lr, r1, #2
 800461e:	f10c 0c08 	add.w	ip, ip, #8
 8004622:	4601      	mov	r1, r0
 8004624:	3d10      	subs	r5, #16
 8004626:	2d10      	cmp	r5, #16
 8004628:	dd13      	ble.n	8004652 <_vfiprintf_r+0x2da>
 800462a:	1c48      	adds	r0, r1, #1
 800462c:	3210      	adds	r2, #16
 800462e:	2807      	cmp	r0, #7
 8004630:	920f      	str	r2, [sp, #60]	; 0x3c
 8004632:	f8cc 7000 	str.w	r7, [ip]
 8004636:	f8cc 3004 	str.w	r3, [ip, #4]
 800463a:	900e      	str	r0, [sp, #56]	; 0x38
 800463c:	dded      	ble.n	800461a <_vfiprintf_r+0x2a2>
 800463e:	2a00      	cmp	r2, #0
 8004640:	f040 81bf 	bne.w	80049c2 <_vfiprintf_r+0x64a>
 8004644:	3d10      	subs	r5, #16
 8004646:	2d10      	cmp	r5, #16
 8004648:	4611      	mov	r1, r2
 800464a:	f04f 0e01 	mov.w	lr, #1
 800464e:	46d4      	mov	ip, sl
 8004650:	dceb      	bgt.n	800462a <_vfiprintf_r+0x2b2>
 8004652:	4663      	mov	r3, ip
 8004654:	4671      	mov	r1, lr
 8004656:	46a4      	mov	ip, r4
 8004658:	461c      	mov	r4, r3
 800465a:	442a      	add	r2, r5
 800465c:	2907      	cmp	r1, #7
 800465e:	920f      	str	r2, [sp, #60]	; 0x3c
 8004660:	6027      	str	r7, [r4, #0]
 8004662:	6065      	str	r5, [r4, #4]
 8004664:	910e      	str	r1, [sp, #56]	; 0x38
 8004666:	f300 8343 	bgt.w	8004cf0 <_vfiprintf_r+0x978>
 800466a:	3408      	adds	r4, #8
 800466c:	1c48      	adds	r0, r1, #1
 800466e:	e1bb      	b.n	80049e8 <_vfiprintf_r+0x670>
 8004670:	4658      	mov	r0, fp
 8004672:	f048 0804 	orr.w	r8, r8, #4
 8004676:	f89b 3000 	ldrb.w	r3, [fp]
 800467a:	e6e4      	b.n	8004446 <_vfiprintf_r+0xce>
 800467c:	f018 0320 	ands.w	r3, r8, #32
 8004680:	9503      	str	r5, [sp, #12]
 8004682:	46b4      	mov	ip, r6
 8004684:	d062      	beq.n	800474c <_vfiprintf_r+0x3d4>
 8004686:	9b04      	ldr	r3, [sp, #16]
 8004688:	3307      	adds	r3, #7
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	f103 0208 	add.w	r2, r3, #8
 8004692:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004696:	9204      	str	r2, [sp, #16]
 8004698:	2300      	movs	r3, #0
 800469a:	e76e      	b.n	800457a <_vfiprintf_r+0x202>
 800469c:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 80046a0:	f89b 3000 	ldrb.w	r3, [fp]
 80046a4:	4658      	mov	r0, fp
 80046a6:	e6ce      	b.n	8004446 <_vfiprintf_r+0xce>
 80046a8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80046ac:	f89b 3000 	ldrb.w	r3, [fp]
 80046b0:	4658      	mov	r0, fp
 80046b2:	e6c8      	b.n	8004446 <_vfiprintf_r+0xce>
 80046b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80046b8:	2500      	movs	r5, #0
 80046ba:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80046be:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80046c2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 80046c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80046ca:	2a09      	cmp	r2, #9
 80046cc:	d9f5      	bls.n	80046ba <_vfiprintf_r+0x342>
 80046ce:	e6bc      	b.n	800444a <_vfiprintf_r+0xd2>
 80046d0:	f048 0810 	orr.w	r8, r8, #16
 80046d4:	f018 0f20 	tst.w	r8, #32
 80046d8:	9503      	str	r5, [sp, #12]
 80046da:	46b4      	mov	ip, r6
 80046dc:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80046e0:	f000 809a 	beq.w	8004818 <_vfiprintf_r+0x4a0>
 80046e4:	9904      	ldr	r1, [sp, #16]
 80046e6:	3107      	adds	r1, #7
 80046e8:	f021 0107 	bic.w	r1, r1, #7
 80046ec:	e9d1 2300 	ldrd	r2, r3, [r1]
 80046f0:	3108      	adds	r1, #8
 80046f2:	9104      	str	r1, [sp, #16]
 80046f4:	4616      	mov	r6, r2
 80046f6:	461f      	mov	r7, r3
 80046f8:	2a00      	cmp	r2, #0
 80046fa:	f173 0300 	sbcs.w	r3, r3, #0
 80046fe:	f2c0 83a3 	blt.w	8004e48 <_vfiprintf_r+0xad0>
 8004702:	f1bc 0f00 	cmp.w	ip, #0
 8004706:	bfa8      	it	ge
 8004708:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
 800470c:	ea56 0207 	orrs.w	r2, r6, r7
 8004710:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8004714:	46e1      	mov	r9, ip
 8004716:	f04f 0301 	mov.w	r3, #1
 800471a:	f43f af3c 	beq.w	8004596 <_vfiprintf_r+0x21e>
 800471e:	2b01      	cmp	r3, #1
 8004720:	f47f af40 	bne.w	80045a4 <_vfiprintf_r+0x22c>
 8004724:	2f00      	cmp	r7, #0
 8004726:	bf08      	it	eq
 8004728:	2e0a      	cmpeq	r6, #10
 800472a:	f080 8331 	bcs.w	8004d90 <_vfiprintf_r+0xa18>
 800472e:	ab2a      	add	r3, sp, #168	; 0xa8
 8004730:	3630      	adds	r6, #48	; 0x30
 8004732:	f803 6d41 	strb.w	r6, [r3, #-65]!
 8004736:	ebc3 090a 	rsb	r9, r3, sl
 800473a:	9307      	str	r3, [sp, #28]
 800473c:	e74b      	b.n	80045d6 <_vfiprintf_r+0x25e>
 800473e:	f048 0810 	orr.w	r8, r8, #16
 8004742:	f018 0320 	ands.w	r3, r8, #32
 8004746:	9503      	str	r5, [sp, #12]
 8004748:	46b4      	mov	ip, r6
 800474a:	d19c      	bne.n	8004686 <_vfiprintf_r+0x30e>
 800474c:	f018 0210 	ands.w	r2, r8, #16
 8004750:	f040 82f4 	bne.w	8004d3c <_vfiprintf_r+0x9c4>
 8004754:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8004758:	f000 82f0 	beq.w	8004d3c <_vfiprintf_r+0x9c4>
 800475c:	9904      	ldr	r1, [sp, #16]
 800475e:	4613      	mov	r3, r2
 8004760:	460a      	mov	r2, r1
 8004762:	3204      	adds	r2, #4
 8004764:	880e      	ldrh	r6, [r1, #0]
 8004766:	9204      	str	r2, [sp, #16]
 8004768:	2700      	movs	r7, #0
 800476a:	e706      	b.n	800457a <_vfiprintf_r+0x202>
 800476c:	f048 0810 	orr.w	r8, r8, #16
 8004770:	f018 0f20 	tst.w	r8, #32
 8004774:	9503      	str	r5, [sp, #12]
 8004776:	46b4      	mov	ip, r6
 8004778:	f47f aef5 	bne.w	8004566 <_vfiprintf_r+0x1ee>
 800477c:	9a04      	ldr	r2, [sp, #16]
 800477e:	f018 0f10 	tst.w	r8, #16
 8004782:	4613      	mov	r3, r2
 8004784:	f040 82e1 	bne.w	8004d4a <_vfiprintf_r+0x9d2>
 8004788:	f018 0f40 	tst.w	r8, #64	; 0x40
 800478c:	f000 82dd 	beq.w	8004d4a <_vfiprintf_r+0x9d2>
 8004790:	8816      	ldrh	r6, [r2, #0]
 8004792:	3204      	adds	r2, #4
 8004794:	2700      	movs	r7, #0
 8004796:	2301      	movs	r3, #1
 8004798:	9204      	str	r2, [sp, #16]
 800479a:	e6ee      	b.n	800457a <_vfiprintf_r+0x202>
 800479c:	4a61      	ldr	r2, [pc, #388]	; (8004924 <_vfiprintf_r+0x5ac>)
 800479e:	9503      	str	r5, [sp, #12]
 80047a0:	f018 0f20 	tst.w	r8, #32
 80047a4:	46b4      	mov	ip, r6
 80047a6:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80047aa:	9209      	str	r2, [sp, #36]	; 0x24
 80047ac:	f000 808e 	beq.w	80048cc <_vfiprintf_r+0x554>
 80047b0:	9a04      	ldr	r2, [sp, #16]
 80047b2:	3207      	adds	r2, #7
 80047b4:	f022 0207 	bic.w	r2, r2, #7
 80047b8:	e9d2 6700 	ldrd	r6, r7, [r2]
 80047bc:	f102 0108 	add.w	r1, r2, #8
 80047c0:	9104      	str	r1, [sp, #16]
 80047c2:	f018 0f01 	tst.w	r8, #1
 80047c6:	f000 828c 	beq.w	8004ce2 <_vfiprintf_r+0x96a>
 80047ca:	ea56 0207 	orrs.w	r2, r6, r7
 80047ce:	f000 8288 	beq.w	8004ce2 <_vfiprintf_r+0x96a>
 80047d2:	2230      	movs	r2, #48	; 0x30
 80047d4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80047d8:	f048 0802 	orr.w	r8, r8, #2
 80047dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 80047e0:	2302      	movs	r3, #2
 80047e2:	e6ca      	b.n	800457a <_vfiprintf_r+0x202>
 80047e4:	9a04      	ldr	r2, [sp, #16]
 80047e6:	9503      	str	r5, [sp, #12]
 80047e8:	6813      	ldr	r3, [r2, #0]
 80047ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80047ee:	4613      	mov	r3, r2
 80047f0:	3304      	adds	r3, #4
 80047f2:	2601      	movs	r6, #1
 80047f4:	2100      	movs	r1, #0
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	ab10      	add	r3, sp, #64	; 0x40
 80047fa:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80047fe:	46b1      	mov	r9, r6
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	f04f 0c00 	mov.w	ip, #0
 8004806:	e6ec      	b.n	80045e2 <_vfiprintf_r+0x26a>
 8004808:	f018 0f20 	tst.w	r8, #32
 800480c:	9503      	str	r5, [sp, #12]
 800480e:	46b4      	mov	ip, r6
 8004810:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8004814:	f47f af66 	bne.w	80046e4 <_vfiprintf_r+0x36c>
 8004818:	f018 0f10 	tst.w	r8, #16
 800481c:	f040 82a0 	bne.w	8004d60 <_vfiprintf_r+0x9e8>
 8004820:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004824:	f000 829c 	beq.w	8004d60 <_vfiprintf_r+0x9e8>
 8004828:	9904      	ldr	r1, [sp, #16]
 800482a:	f9b1 6000 	ldrsh.w	r6, [r1]
 800482e:	3104      	adds	r1, #4
 8004830:	17f7      	asrs	r7, r6, #31
 8004832:	4632      	mov	r2, r6
 8004834:	463b      	mov	r3, r7
 8004836:	9104      	str	r1, [sp, #16]
 8004838:	e75e      	b.n	80046f8 <_vfiprintf_r+0x380>
 800483a:	9904      	ldr	r1, [sp, #16]
 800483c:	9503      	str	r5, [sp, #12]
 800483e:	2330      	movs	r3, #48	; 0x30
 8004840:	460a      	mov	r2, r1
 8004842:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8004846:	2378      	movs	r3, #120	; 0x78
 8004848:	3204      	adds	r2, #4
 800484a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800484e:	4b36      	ldr	r3, [pc, #216]	; (8004928 <_vfiprintf_r+0x5b0>)
 8004850:	9309      	str	r3, [sp, #36]	; 0x24
 8004852:	46b4      	mov	ip, r6
 8004854:	f048 0802 	orr.w	r8, r8, #2
 8004858:	680e      	ldr	r6, [r1, #0]
 800485a:	9204      	str	r2, [sp, #16]
 800485c:	2700      	movs	r7, #0
 800485e:	2302      	movs	r3, #2
 8004860:	e68b      	b.n	800457a <_vfiprintf_r+0x202>
 8004862:	f048 0820 	orr.w	r8, r8, #32
 8004866:	f89b 3000 	ldrb.w	r3, [fp]
 800486a:	4658      	mov	r0, fp
 800486c:	e5eb      	b.n	8004446 <_vfiprintf_r+0xce>
 800486e:	9a04      	ldr	r2, [sp, #16]
 8004870:	9503      	str	r5, [sp, #12]
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	9307      	str	r3, [sp, #28]
 8004876:	2100      	movs	r1, #0
 8004878:	46b4      	mov	ip, r6
 800487a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800487e:	1d16      	adds	r6, r2, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 834f 	beq.w	8004f24 <_vfiprintf_r+0xbac>
 8004886:	f1bc 0f00 	cmp.w	ip, #0
 800488a:	f2c0 8329 	blt.w	8004ee0 <_vfiprintf_r+0xb68>
 800488e:	9d07      	ldr	r5, [sp, #28]
 8004890:	f8cd c010 	str.w	ip, [sp, #16]
 8004894:	4662      	mov	r2, ip
 8004896:	4628      	mov	r0, r5
 8004898:	2100      	movs	r1, #0
 800489a:	f003 fdbb 	bl	8008414 <memchr>
 800489e:	f8dd c010 	ldr.w	ip, [sp, #16]
 80048a2:	2800      	cmp	r0, #0
 80048a4:	f000 834f 	beq.w	8004f46 <_vfiprintf_r+0xbce>
 80048a8:	ebc5 0900 	rsb	r9, r5, r0
 80048ac:	9604      	str	r6, [sp, #16]
 80048ae:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 80048b2:	f04f 0c00 	mov.w	ip, #0
 80048b6:	e68e      	b.n	80045d6 <_vfiprintf_r+0x25e>
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <_vfiprintf_r+0x5b0>)
 80048ba:	9503      	str	r5, [sp, #12]
 80048bc:	f018 0f20 	tst.w	r8, #32
 80048c0:	46b4      	mov	ip, r6
 80048c2:	9209      	str	r2, [sp, #36]	; 0x24
 80048c4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80048c8:	f47f af72 	bne.w	80047b0 <_vfiprintf_r+0x438>
 80048cc:	9904      	ldr	r1, [sp, #16]
 80048ce:	f018 0f10 	tst.w	r8, #16
 80048d2:	460a      	mov	r2, r1
 80048d4:	f040 823f 	bne.w	8004d56 <_vfiprintf_r+0x9de>
 80048d8:	f018 0f40 	tst.w	r8, #64	; 0x40
 80048dc:	f000 823b 	beq.w	8004d56 <_vfiprintf_r+0x9de>
 80048e0:	3204      	adds	r2, #4
 80048e2:	880e      	ldrh	r6, [r1, #0]
 80048e4:	9204      	str	r2, [sp, #16]
 80048e6:	2700      	movs	r7, #0
 80048e8:	e76b      	b.n	80047c2 <_vfiprintf_r+0x44a>
 80048ea:	f89b 3000 	ldrb.w	r3, [fp]
 80048ee:	2b6c      	cmp	r3, #108	; 0x6c
 80048f0:	f000 82e9 	beq.w	8004ec6 <_vfiprintf_r+0xb4e>
 80048f4:	f048 0810 	orr.w	r8, r8, #16
 80048f8:	4658      	mov	r0, fp
 80048fa:	e5a4      	b.n	8004446 <_vfiprintf_r+0xce>
 80048fc:	9a04      	ldr	r2, [sp, #16]
 80048fe:	6815      	ldr	r5, [r2, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	2d00      	cmp	r5, #0
 8004904:	f103 0304 	add.w	r3, r3, #4
 8004908:	f2c0 82e5 	blt.w	8004ed6 <_vfiprintf_r+0xb5e>
 800490c:	9304      	str	r3, [sp, #16]
 800490e:	f89b 3000 	ldrb.w	r3, [fp]
 8004912:	4658      	mov	r0, fp
 8004914:	e597      	b.n	8004446 <_vfiprintf_r+0xce>
 8004916:	f89b 3000 	ldrb.w	r3, [fp]
 800491a:	4658      	mov	r0, fp
 800491c:	212b      	movs	r1, #43	; 0x2b
 800491e:	e592      	b.n	8004446 <_vfiprintf_r+0xce>
 8004920:	08009e8c 	.word	0x08009e8c
 8004924:	08009e9c 	.word	0x08009e9c
 8004928:	08009eb0 	.word	0x08009eb0
 800492c:	f89b 3000 	ldrb.w	r3, [fp]
 8004930:	2b2a      	cmp	r3, #42	; 0x2a
 8004932:	f10b 0001 	add.w	r0, fp, #1
 8004936:	f000 830f 	beq.w	8004f58 <_vfiprintf_r+0xbe0>
 800493a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800493e:	2a09      	cmp	r2, #9
 8004940:	4683      	mov	fp, r0
 8004942:	f04f 0600 	mov.w	r6, #0
 8004946:	f63f ad80 	bhi.w	800444a <_vfiprintf_r+0xd2>
 800494a:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800494e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8004952:	eb02 0646 	add.w	r6, r2, r6, lsl #1
 8004956:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800495a:	2a09      	cmp	r2, #9
 800495c:	d9f5      	bls.n	800494a <_vfiprintf_r+0x5d2>
 800495e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8004962:	e572      	b.n	800444a <_vfiprintf_r+0xd2>
 8004964:	f018 0f20 	tst.w	r8, #32
 8004968:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800496c:	f000 8283 	beq.w	8004e76 <_vfiprintf_r+0xafe>
 8004970:	9a04      	ldr	r2, [sp, #16]
 8004972:	9902      	ldr	r1, [sp, #8]
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	17cf      	asrs	r7, r1, #31
 8004978:	4608      	mov	r0, r1
 800497a:	3204      	adds	r2, #4
 800497c:	4639      	mov	r1, r7
 800497e:	9204      	str	r2, [sp, #16]
 8004980:	e9c3 0100 	strd	r0, r1, [r3]
 8004984:	e52a      	b.n	80043dc <_vfiprintf_r+0x64>
 8004986:	4658      	mov	r0, fp
 8004988:	f89b 3000 	ldrb.w	r3, [fp]
 800498c:	2900      	cmp	r1, #0
 800498e:	f47f ad5a 	bne.w	8004446 <_vfiprintf_r+0xce>
 8004992:	2120      	movs	r1, #32
 8004994:	e557      	b.n	8004446 <_vfiprintf_r+0xce>
 8004996:	f048 0801 	orr.w	r8, r8, #1
 800499a:	4658      	mov	r0, fp
 800499c:	f89b 3000 	ldrb.w	r3, [fp]
 80049a0:	e551      	b.n	8004446 <_vfiprintf_r+0xce>
 80049a2:	9503      	str	r5, [sp, #12]
 80049a4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 809b 	beq.w	8004ae4 <_vfiprintf_r+0x76c>
 80049ae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80049b2:	2300      	movs	r3, #0
 80049b4:	2601      	movs	r6, #1
 80049b6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80049ba:	ab10      	add	r3, sp, #64	; 0x40
 80049bc:	46b1      	mov	r9, r6
 80049be:	9307      	str	r3, [sp, #28]
 80049c0:	e71f      	b.n	8004802 <_vfiprintf_r+0x48a>
 80049c2:	9801      	ldr	r0, [sp, #4]
 80049c4:	9900      	ldr	r1, [sp, #0]
 80049c6:	9308      	str	r3, [sp, #32]
 80049c8:	aa0d      	add	r2, sp, #52	; 0x34
 80049ca:	f7ff fc8d 	bl	80042e8 <__sprint_r.part.0>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f040 808f 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 80049d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80049d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049d8:	9b08      	ldr	r3, [sp, #32]
 80049da:	f101 0e01 	add.w	lr, r1, #1
 80049de:	46d4      	mov	ip, sl
 80049e0:	e620      	b.n	8004624 <_vfiprintf_r+0x2ac>
 80049e2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80049e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049e6:	1c48      	adds	r0, r1, #1
 80049e8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80049ec:	b16b      	cbz	r3, 8004a0a <_vfiprintf_r+0x692>
 80049ee:	3201      	adds	r2, #1
 80049f0:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80049f4:	2101      	movs	r1, #1
 80049f6:	2807      	cmp	r0, #7
 80049f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80049fa:	900e      	str	r0, [sp, #56]	; 0x38
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	6061      	str	r1, [r4, #4]
 8004a00:	f300 8134 	bgt.w	8004c6c <_vfiprintf_r+0x8f4>
 8004a04:	4601      	mov	r1, r0
 8004a06:	3408      	adds	r4, #8
 8004a08:	3001      	adds	r0, #1
 8004a0a:	9b05      	ldr	r3, [sp, #20]
 8004a0c:	b163      	cbz	r3, 8004a28 <_vfiprintf_r+0x6b0>
 8004a0e:	3202      	adds	r2, #2
 8004a10:	a90c      	add	r1, sp, #48	; 0x30
 8004a12:	2302      	movs	r3, #2
 8004a14:	2807      	cmp	r0, #7
 8004a16:	920f      	str	r2, [sp, #60]	; 0x3c
 8004a18:	900e      	str	r0, [sp, #56]	; 0x38
 8004a1a:	e884 000a 	stmia.w	r4, {r1, r3}
 8004a1e:	f300 8134 	bgt.w	8004c8a <_vfiprintf_r+0x912>
 8004a22:	4601      	mov	r1, r0
 8004a24:	3408      	adds	r4, #8
 8004a26:	3001      	adds	r0, #1
 8004a28:	9b06      	ldr	r3, [sp, #24]
 8004a2a:	2b80      	cmp	r3, #128	; 0x80
 8004a2c:	f000 80d4 	beq.w	8004bd8 <_vfiprintf_r+0x860>
 8004a30:	ebc9 070c 	rsb	r7, r9, ip
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	dd2b      	ble.n	8004a90 <_vfiprintf_r+0x718>
 8004a38:	2f10      	cmp	r7, #16
 8004a3a:	4dab      	ldr	r5, [pc, #684]	; (8004ce8 <_vfiprintf_r+0x970>)
 8004a3c:	dd1f      	ble.n	8004a7e <_vfiprintf_r+0x706>
 8004a3e:	46a6      	mov	lr, r4
 8004a40:	2310      	movs	r3, #16
 8004a42:	9c01      	ldr	r4, [sp, #4]
 8004a44:	e007      	b.n	8004a56 <_vfiprintf_r+0x6de>
 8004a46:	f101 0c02 	add.w	ip, r1, #2
 8004a4a:	f10e 0e08 	add.w	lr, lr, #8
 8004a4e:	4601      	mov	r1, r0
 8004a50:	3f10      	subs	r7, #16
 8004a52:	2f10      	cmp	r7, #16
 8004a54:	dd11      	ble.n	8004a7a <_vfiprintf_r+0x702>
 8004a56:	1c48      	adds	r0, r1, #1
 8004a58:	3210      	adds	r2, #16
 8004a5a:	2807      	cmp	r0, #7
 8004a5c:	920f      	str	r2, [sp, #60]	; 0x3c
 8004a5e:	f8ce 5000 	str.w	r5, [lr]
 8004a62:	f8ce 3004 	str.w	r3, [lr, #4]
 8004a66:	900e      	str	r0, [sp, #56]	; 0x38
 8004a68:	dded      	ble.n	8004a46 <_vfiprintf_r+0x6ce>
 8004a6a:	bb6a      	cbnz	r2, 8004ac8 <_vfiprintf_r+0x750>
 8004a6c:	3f10      	subs	r7, #16
 8004a6e:	2f10      	cmp	r7, #16
 8004a70:	f04f 0c01 	mov.w	ip, #1
 8004a74:	4611      	mov	r1, r2
 8004a76:	46d6      	mov	lr, sl
 8004a78:	dced      	bgt.n	8004a56 <_vfiprintf_r+0x6de>
 8004a7a:	4674      	mov	r4, lr
 8004a7c:	4660      	mov	r0, ip
 8004a7e:	443a      	add	r2, r7
 8004a80:	2807      	cmp	r0, #7
 8004a82:	920f      	str	r2, [sp, #60]	; 0x3c
 8004a84:	e884 00a0 	stmia.w	r4, {r5, r7}
 8004a88:	900e      	str	r0, [sp, #56]	; 0x38
 8004a8a:	dc3b      	bgt.n	8004b04 <_vfiprintf_r+0x78c>
 8004a8c:	3408      	adds	r4, #8
 8004a8e:	3001      	adds	r0, #1
 8004a90:	eb02 0309 	add.w	r3, r2, r9
 8004a94:	9a07      	ldr	r2, [sp, #28]
 8004a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a98:	2807      	cmp	r0, #7
 8004a9a:	e884 0204 	stmia.w	r4, {r2, r9}
 8004a9e:	900e      	str	r0, [sp, #56]	; 0x38
 8004aa0:	dd3d      	ble.n	8004b1e <_vfiprintf_r+0x7a6>
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 813f 	bne.w	8004d26 <_vfiprintf_r+0x9ae>
 8004aa8:	f018 0f04 	tst.w	r8, #4
 8004aac:	930e      	str	r3, [sp, #56]	; 0x38
 8004aae:	f040 8130 	bne.w	8004d12 <_vfiprintf_r+0x99a>
 8004ab2:	9b02      	ldr	r3, [sp, #8]
 8004ab4:	9a03      	ldr	r2, [sp, #12]
 8004ab6:	4296      	cmp	r6, r2
 8004ab8:	bfac      	ite	ge
 8004aba:	199b      	addge	r3, r3, r6
 8004abc:	189b      	addlt	r3, r3, r2
 8004abe:	9302      	str	r3, [sp, #8]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ac4:	4654      	mov	r4, sl
 8004ac6:	e489      	b.n	80043dc <_vfiprintf_r+0x64>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	9900      	ldr	r1, [sp, #0]
 8004acc:	9305      	str	r3, [sp, #20]
 8004ace:	aa0d      	add	r2, sp, #52	; 0x34
 8004ad0:	f7ff fc0a 	bl	80042e8 <__sprint_r.part.0>
 8004ad4:	b968      	cbnz	r0, 8004af2 <_vfiprintf_r+0x77a>
 8004ad6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ada:	9b05      	ldr	r3, [sp, #20]
 8004adc:	f101 0c01 	add.w	ip, r1, #1
 8004ae0:	46d6      	mov	lr, sl
 8004ae2:	e7b5      	b.n	8004a50 <_vfiprintf_r+0x6d8>
 8004ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ae6:	b123      	cbz	r3, 8004af2 <_vfiprintf_r+0x77a>
 8004ae8:	9801      	ldr	r0, [sp, #4]
 8004aea:	9900      	ldr	r1, [sp, #0]
 8004aec:	aa0d      	add	r2, sp, #52	; 0x34
 8004aee:	f7ff fbfb 	bl	80042e8 <__sprint_r.part.0>
 8004af2:	9b00      	ldr	r3, [sp, #0]
 8004af4:	899b      	ldrh	r3, [r3, #12]
 8004af6:	065b      	lsls	r3, r3, #25
 8004af8:	f53f ad27 	bmi.w	800454a <_vfiprintf_r+0x1d2>
 8004afc:	9802      	ldr	r0, [sp, #8]
 8004afe:	b02b      	add	sp, #172	; 0xac
 8004b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	f040 8192 	bne.w	8004e2e <_vfiprintf_r+0xab6>
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	9907      	ldr	r1, [sp, #28]
 8004b0e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8004b12:	464b      	mov	r3, r9
 8004b14:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004b18:	911a      	str	r1, [sp, #104]	; 0x68
 8004b1a:	920e      	str	r2, [sp, #56]	; 0x38
 8004b1c:	4654      	mov	r4, sl
 8004b1e:	f104 0208 	add.w	r2, r4, #8
 8004b22:	f018 0f04 	tst.w	r8, #4
 8004b26:	d039      	beq.n	8004b9c <_vfiprintf_r+0x824>
 8004b28:	9903      	ldr	r1, [sp, #12]
 8004b2a:	1b8d      	subs	r5, r1, r6
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	dd35      	ble.n	8004b9c <_vfiprintf_r+0x824>
 8004b30:	2d10      	cmp	r5, #16
 8004b32:	f340 8203 	ble.w	8004f3c <_vfiprintf_r+0xbc4>
 8004b36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b38:	4f6c      	ldr	r7, [pc, #432]	; (8004cec <_vfiprintf_r+0x974>)
 8004b3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004b3e:	f8dd 9000 	ldr.w	r9, [sp]
 8004b42:	2410      	movs	r4, #16
 8004b44:	e006      	b.n	8004b54 <_vfiprintf_r+0x7dc>
 8004b46:	f100 0e02 	add.w	lr, r0, #2
 8004b4a:	3208      	adds	r2, #8
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	3d10      	subs	r5, #16
 8004b50:	2d10      	cmp	r5, #16
 8004b52:	dd10      	ble.n	8004b76 <_vfiprintf_r+0x7fe>
 8004b54:	1c41      	adds	r1, r0, #1
 8004b56:	3310      	adds	r3, #16
 8004b58:	2907      	cmp	r1, #7
 8004b5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b5c:	6017      	str	r7, [r2, #0]
 8004b5e:	6054      	str	r4, [r2, #4]
 8004b60:	910e      	str	r1, [sp, #56]	; 0x38
 8004b62:	ddf0      	ble.n	8004b46 <_vfiprintf_r+0x7ce>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d12a      	bne.n	8004bbe <_vfiprintf_r+0x846>
 8004b68:	3d10      	subs	r5, #16
 8004b6a:	2d10      	cmp	r5, #16
 8004b6c:	f04f 0e01 	mov.w	lr, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	4652      	mov	r2, sl
 8004b74:	dcee      	bgt.n	8004b54 <_vfiprintf_r+0x7dc>
 8004b76:	442b      	add	r3, r5
 8004b78:	f1be 0f07 	cmp.w	lr, #7
 8004b7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b7e:	6017      	str	r7, [r2, #0]
 8004b80:	6055      	str	r5, [r2, #4]
 8004b82:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004b86:	dd09      	ble.n	8004b9c <_vfiprintf_r+0x824>
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d092      	beq.n	8004ab2 <_vfiprintf_r+0x73a>
 8004b8c:	9801      	ldr	r0, [sp, #4]
 8004b8e:	9900      	ldr	r1, [sp, #0]
 8004b90:	aa0d      	add	r2, sp, #52	; 0x34
 8004b92:	f7ff fba9 	bl	80042e8 <__sprint_r.part.0>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d1ab      	bne.n	8004af2 <_vfiprintf_r+0x77a>
 8004b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b9c:	9a02      	ldr	r2, [sp, #8]
 8004b9e:	9903      	ldr	r1, [sp, #12]
 8004ba0:	428e      	cmp	r6, r1
 8004ba2:	bfac      	ite	ge
 8004ba4:	1992      	addge	r2, r2, r6
 8004ba6:	1852      	addlt	r2, r2, r1
 8004ba8:	9202      	str	r2, [sp, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d088      	beq.n	8004ac0 <_vfiprintf_r+0x748>
 8004bae:	9801      	ldr	r0, [sp, #4]
 8004bb0:	9900      	ldr	r1, [sp, #0]
 8004bb2:	aa0d      	add	r2, sp, #52	; 0x34
 8004bb4:	f7ff fb98 	bl	80042e8 <__sprint_r.part.0>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d081      	beq.n	8004ac0 <_vfiprintf_r+0x748>
 8004bbc:	e799      	b.n	8004af2 <_vfiprintf_r+0x77a>
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	aa0d      	add	r2, sp, #52	; 0x34
 8004bc4:	f7ff fb90 	bl	80042e8 <__sprint_r.part.0>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d192      	bne.n	8004af2 <_vfiprintf_r+0x77a>
 8004bcc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004bce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bd0:	f100 0e01 	add.w	lr, r0, #1
 8004bd4:	4652      	mov	r2, sl
 8004bd6:	e7ba      	b.n	8004b4e <_vfiprintf_r+0x7d6>
 8004bd8:	9b03      	ldr	r3, [sp, #12]
 8004bda:	1b9f      	subs	r7, r3, r6
 8004bdc:	2f00      	cmp	r7, #0
 8004bde:	f77f af27 	ble.w	8004a30 <_vfiprintf_r+0x6b8>
 8004be2:	2f10      	cmp	r7, #16
 8004be4:	4d40      	ldr	r5, [pc, #256]	; (8004ce8 <_vfiprintf_r+0x970>)
 8004be6:	f340 81b5 	ble.w	8004f54 <_vfiprintf_r+0xbdc>
 8004bea:	4620      	mov	r0, r4
 8004bec:	2310      	movs	r3, #16
 8004bee:	4664      	mov	r4, ip
 8004bf0:	4684      	mov	ip, r0
 8004bf2:	e007      	b.n	8004c04 <_vfiprintf_r+0x88c>
 8004bf4:	f101 0e02 	add.w	lr, r1, #2
 8004bf8:	f10c 0c08 	add.w	ip, ip, #8
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	3f10      	subs	r7, #16
 8004c00:	2f10      	cmp	r7, #16
 8004c02:	dd11      	ble.n	8004c28 <_vfiprintf_r+0x8b0>
 8004c04:	1c48      	adds	r0, r1, #1
 8004c06:	3210      	adds	r2, #16
 8004c08:	2807      	cmp	r0, #7
 8004c0a:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c0c:	f8cc 5000 	str.w	r5, [ip]
 8004c10:	f8cc 3004 	str.w	r3, [ip, #4]
 8004c14:	900e      	str	r0, [sp, #56]	; 0x38
 8004c16:	dded      	ble.n	8004bf4 <_vfiprintf_r+0x87c>
 8004c18:	b9c2      	cbnz	r2, 8004c4c <_vfiprintf_r+0x8d4>
 8004c1a:	3f10      	subs	r7, #16
 8004c1c:	2f10      	cmp	r7, #16
 8004c1e:	f04f 0e01 	mov.w	lr, #1
 8004c22:	4611      	mov	r1, r2
 8004c24:	46d4      	mov	ip, sl
 8004c26:	dced      	bgt.n	8004c04 <_vfiprintf_r+0x88c>
 8004c28:	4663      	mov	r3, ip
 8004c2a:	46a4      	mov	ip, r4
 8004c2c:	461c      	mov	r4, r3
 8004c2e:	443a      	add	r2, r7
 8004c30:	f1be 0f07 	cmp.w	lr, #7
 8004c34:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c36:	e884 00a0 	stmia.w	r4, {r5, r7}
 8004c3a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004c3e:	f300 80f0 	bgt.w	8004e22 <_vfiprintf_r+0xaaa>
 8004c42:	3408      	adds	r4, #8
 8004c44:	f10e 0001 	add.w	r0, lr, #1
 8004c48:	4671      	mov	r1, lr
 8004c4a:	e6f1      	b.n	8004a30 <_vfiprintf_r+0x6b8>
 8004c4c:	9801      	ldr	r0, [sp, #4]
 8004c4e:	9900      	ldr	r1, [sp, #0]
 8004c50:	9305      	str	r3, [sp, #20]
 8004c52:	aa0d      	add	r2, sp, #52	; 0x34
 8004c54:	f7ff fb48 	bl	80042e8 <__sprint_r.part.0>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f47f af4a 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004c60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c62:	9b05      	ldr	r3, [sp, #20]
 8004c64:	f101 0e01 	add.w	lr, r1, #1
 8004c68:	46d4      	mov	ip, sl
 8004c6a:	e7c8      	b.n	8004bfe <_vfiprintf_r+0x886>
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	f040 80c7 	bne.w	8004e00 <_vfiprintf_r+0xa88>
 8004c72:	9b05      	ldr	r3, [sp, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8087 	beq.w	8004d88 <_vfiprintf_r+0xa10>
 8004c7a:	aa0c      	add	r2, sp, #48	; 0x30
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	921a      	str	r2, [sp, #104]	; 0x68
 8004c80:	4608      	mov	r0, r1
 8004c82:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c84:	461a      	mov	r2, r3
 8004c86:	4654      	mov	r4, sl
 8004c88:	e6cb      	b.n	8004a22 <_vfiprintf_r+0x6aa>
 8004c8a:	2a00      	cmp	r2, #0
 8004c8c:	f040 80a7 	bne.w	8004dde <_vfiprintf_r+0xa66>
 8004c90:	2001      	movs	r0, #1
 8004c92:	4611      	mov	r1, r2
 8004c94:	4654      	mov	r4, sl
 8004c96:	e6c7      	b.n	8004a28 <_vfiprintf_r+0x6b0>
 8004c98:	bb03      	cbnz	r3, 8004cdc <_vfiprintf_r+0x964>
 8004c9a:	f018 0f01 	tst.w	r8, #1
 8004c9e:	d01d      	beq.n	8004cdc <_vfiprintf_r+0x964>
 8004ca0:	ab2a      	add	r3, sp, #168	; 0xa8
 8004ca2:	2230      	movs	r2, #48	; 0x30
 8004ca4:	f803 2d41 	strb.w	r2, [r3, #-65]!
 8004ca8:	ebc3 090a 	rsb	r9, r3, sl
 8004cac:	9307      	str	r3, [sp, #28]
 8004cae:	e492      	b.n	80045d6 <_vfiprintf_r+0x25e>
 8004cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cb2:	46d1      	mov	r9, sl
 8004cb4:	0933      	lsrs	r3, r6, #4
 8004cb6:	f006 010f 	and.w	r1, r6, #15
 8004cba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004cbe:	093a      	lsrs	r2, r7, #4
 8004cc0:	461e      	mov	r6, r3
 8004cc2:	4617      	mov	r7, r2
 8004cc4:	5c43      	ldrb	r3, [r0, r1]
 8004cc6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8004cca:	ea56 0307 	orrs.w	r3, r6, r7
 8004cce:	d1f1      	bne.n	8004cb4 <_vfiprintf_r+0x93c>
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004cd6:	ebc3 090a 	rsb	r9, r3, sl
 8004cda:	e47c      	b.n	80045d6 <_vfiprintf_r+0x25e>
 8004cdc:	f8cd a01c 	str.w	sl, [sp, #28]
 8004ce0:	e479      	b.n	80045d6 <_vfiprintf_r+0x25e>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e449      	b.n	800457a <_vfiprintf_r+0x202>
 8004ce6:	bf00      	nop
 8004ce8:	08009e7c 	.word	0x08009e7c
 8004cec:	08009e8c 	.word	0x08009e8c
 8004cf0:	2a00      	cmp	r2, #0
 8004cf2:	f040 80d7 	bne.w	8004ea4 <_vfiprintf_r+0xb2c>
 8004cf6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 80ae 	beq.w	8004e5c <_vfiprintf_r+0xae4>
 8004d00:	2301      	movs	r3, #1
 8004d02:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8004d06:	4618      	mov	r0, r3
 8004d08:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	911a      	str	r1, [sp, #104]	; 0x68
 8004d0e:	4654      	mov	r4, sl
 8004d10:	e678      	b.n	8004a04 <_vfiprintf_r+0x68c>
 8004d12:	9a03      	ldr	r2, [sp, #12]
 8004d14:	1b95      	subs	r5, r2, r6
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	4652      	mov	r2, sl
 8004d1a:	f73f af09 	bgt.w	8004b30 <_vfiprintf_r+0x7b8>
 8004d1e:	e6c8      	b.n	8004ab2 <_vfiprintf_r+0x73a>
 8004d20:	465d      	mov	r5, fp
 8004d22:	f7ff bb82 	b.w	800442a <_vfiprintf_r+0xb2>
 8004d26:	9801      	ldr	r0, [sp, #4]
 8004d28:	9900      	ldr	r1, [sp, #0]
 8004d2a:	aa0d      	add	r2, sp, #52	; 0x34
 8004d2c:	f7ff fadc 	bl	80042e8 <__sprint_r.part.0>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	f47f aede 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d38:	4652      	mov	r2, sl
 8004d3a:	e6f2      	b.n	8004b22 <_vfiprintf_r+0x7aa>
 8004d3c:	9904      	ldr	r1, [sp, #16]
 8004d3e:	460a      	mov	r2, r1
 8004d40:	3204      	adds	r2, #4
 8004d42:	680e      	ldr	r6, [r1, #0]
 8004d44:	9204      	str	r2, [sp, #16]
 8004d46:	2700      	movs	r7, #0
 8004d48:	e417      	b.n	800457a <_vfiprintf_r+0x202>
 8004d4a:	3204      	adds	r2, #4
 8004d4c:	681e      	ldr	r6, [r3, #0]
 8004d4e:	9204      	str	r2, [sp, #16]
 8004d50:	2301      	movs	r3, #1
 8004d52:	2700      	movs	r7, #0
 8004d54:	e411      	b.n	800457a <_vfiprintf_r+0x202>
 8004d56:	6816      	ldr	r6, [r2, #0]
 8004d58:	3204      	adds	r2, #4
 8004d5a:	9204      	str	r2, [sp, #16]
 8004d5c:	2700      	movs	r7, #0
 8004d5e:	e530      	b.n	80047c2 <_vfiprintf_r+0x44a>
 8004d60:	9a04      	ldr	r2, [sp, #16]
 8004d62:	6816      	ldr	r6, [r2, #0]
 8004d64:	4613      	mov	r3, r2
 8004d66:	3304      	adds	r3, #4
 8004d68:	17f7      	asrs	r7, r6, #31
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	e4c2      	b.n	80046f8 <_vfiprintf_r+0x380>
 8004d72:	9801      	ldr	r0, [sp, #4]
 8004d74:	9900      	ldr	r1, [sp, #0]
 8004d76:	aa0d      	add	r2, sp, #52	; 0x34
 8004d78:	f7ff fab6 	bl	80042e8 <__sprint_r.part.0>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	f47f aeb8 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004d82:	4654      	mov	r4, sl
 8004d84:	f7ff bbc2 	b.w	800450c <_vfiprintf_r+0x194>
 8004d88:	4608      	mov	r0, r1
 8004d8a:	4654      	mov	r4, sl
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	e64b      	b.n	8004a28 <_vfiprintf_r+0x6b0>
 8004d90:	46d1      	mov	r9, sl
 8004d92:	f8cd c014 	str.w	ip, [sp, #20]
 8004d96:	4630      	mov	r0, r6
 8004d98:	4639      	mov	r1, r7
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f7fb ff0f 	bl	8000bc0 <__aeabi_uldivmod>
 8004da2:	3230      	adds	r2, #48	; 0x30
 8004da4:	4630      	mov	r0, r6
 8004da6:	4639      	mov	r1, r7
 8004da8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8004dac:	2300      	movs	r3, #0
 8004dae:	220a      	movs	r2, #10
 8004db0:	f7fb ff06 	bl	8000bc0 <__aeabi_uldivmod>
 8004db4:	4606      	mov	r6, r0
 8004db6:	460f      	mov	r7, r1
 8004db8:	ea56 0307 	orrs.w	r3, r6, r7
 8004dbc:	d1eb      	bne.n	8004d96 <_vfiprintf_r+0xa1e>
 8004dbe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004dc2:	e785      	b.n	8004cd0 <_vfiprintf_r+0x958>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	9b07      	ldr	r3, [sp, #28]
 8004dc8:	d085      	beq.n	8004cd6 <_vfiprintf_r+0x95e>
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	461a      	mov	r2, r3
 8004dce:	9307      	str	r3, [sp, #28]
 8004dd0:	2330      	movs	r3, #48	; 0x30
 8004dd2:	ebc2 090a 	rsb	r9, r2, sl
 8004dd6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004dda:	f7ff bbfc 	b.w	80045d6 <_vfiprintf_r+0x25e>
 8004dde:	9801      	ldr	r0, [sp, #4]
 8004de0:	9900      	ldr	r1, [sp, #0]
 8004de2:	f8cd c014 	str.w	ip, [sp, #20]
 8004de6:	aa0d      	add	r2, sp, #52	; 0x34
 8004de8:	f7ff fa7e 	bl	80042e8 <__sprint_r.part.0>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	f47f ae80 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004df2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004df4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004df6:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004dfa:	1c48      	adds	r0, r1, #1
 8004dfc:	4654      	mov	r4, sl
 8004dfe:	e613      	b.n	8004a28 <_vfiprintf_r+0x6b0>
 8004e00:	9801      	ldr	r0, [sp, #4]
 8004e02:	9900      	ldr	r1, [sp, #0]
 8004e04:	f8cd c020 	str.w	ip, [sp, #32]
 8004e08:	aa0d      	add	r2, sp, #52	; 0x34
 8004e0a:	f7ff fa6d 	bl	80042e8 <__sprint_r.part.0>
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	f47f ae6f 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004e14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e18:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004e1c:	1c48      	adds	r0, r1, #1
 8004e1e:	4654      	mov	r4, sl
 8004e20:	e5f3      	b.n	8004a0a <_vfiprintf_r+0x692>
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	d167      	bne.n	8004ef6 <_vfiprintf_r+0xb7e>
 8004e26:	2001      	movs	r0, #1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4654      	mov	r4, sl
 8004e2c:	e600      	b.n	8004a30 <_vfiprintf_r+0x6b8>
 8004e2e:	9801      	ldr	r0, [sp, #4]
 8004e30:	9900      	ldr	r1, [sp, #0]
 8004e32:	aa0d      	add	r2, sp, #52	; 0x34
 8004e34:	f7ff fa58 	bl	80042e8 <__sprint_r.part.0>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	f47f ae5a 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004e3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e42:	3001      	adds	r0, #1
 8004e44:	4654      	mov	r4, sl
 8004e46:	e623      	b.n	8004a90 <_vfiprintf_r+0x718>
 8004e48:	252d      	movs	r5, #45	; 0x2d
 8004e4a:	4276      	negs	r6, r6
 8004e4c:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004e50:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8004e54:	46e1      	mov	r9, ip
 8004e56:	2301      	movs	r3, #1
 8004e58:	f7ff bb94 	b.w	8004584 <_vfiprintf_r+0x20c>
 8004e5c:	9b05      	ldr	r3, [sp, #20]
 8004e5e:	4611      	mov	r1, r2
 8004e60:	2001      	movs	r0, #1
 8004e62:	4654      	mov	r4, sl
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f43f ade3 	beq.w	8004a30 <_vfiprintf_r+0x6b8>
 8004e6a:	aa0c      	add	r2, sp, #48	; 0x30
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e88a 000c 	stmia.w	sl, {r2, r3}
 8004e72:	461a      	mov	r2, r3
 8004e74:	e5d5      	b.n	8004a22 <_vfiprintf_r+0x6aa>
 8004e76:	f018 0f10 	tst.w	r8, #16
 8004e7a:	d10b      	bne.n	8004e94 <_vfiprintf_r+0xb1c>
 8004e7c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004e80:	d008      	beq.n	8004e94 <_vfiprintf_r+0xb1c>
 8004e82:	9a04      	ldr	r2, [sp, #16]
 8004e84:	6813      	ldr	r3, [r2, #0]
 8004e86:	3204      	adds	r2, #4
 8004e88:	9204      	str	r2, [sp, #16]
 8004e8a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	f7ff baa4 	b.w	80043dc <_vfiprintf_r+0x64>
 8004e94:	9a04      	ldr	r2, [sp, #16]
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	3204      	adds	r2, #4
 8004e9a:	9204      	str	r2, [sp, #16]
 8004e9c:	9a02      	ldr	r2, [sp, #8]
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	f7ff ba9c 	b.w	80043dc <_vfiprintf_r+0x64>
 8004ea4:	9801      	ldr	r0, [sp, #4]
 8004ea6:	9900      	ldr	r1, [sp, #0]
 8004ea8:	f8cd c020 	str.w	ip, [sp, #32]
 8004eac:	aa0d      	add	r2, sp, #52	; 0x34
 8004eae:	f7ff fa1b 	bl	80042e8 <__sprint_r.part.0>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f47f ae1d 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004eb8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004eba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ebc:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004ec0:	1c48      	adds	r0, r1, #1
 8004ec2:	4654      	mov	r4, sl
 8004ec4:	e590      	b.n	80049e8 <_vfiprintf_r+0x670>
 8004ec6:	f048 0820 	orr.w	r8, r8, #32
 8004eca:	f10b 0001 	add.w	r0, fp, #1
 8004ece:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8004ed2:	f7ff bab8 	b.w	8004446 <_vfiprintf_r+0xce>
 8004ed6:	426d      	negs	r5, r5
 8004ed8:	9304      	str	r3, [sp, #16]
 8004eda:	4658      	mov	r0, fp
 8004edc:	f7ff bbc9 	b.w	8004672 <_vfiprintf_r+0x2fa>
 8004ee0:	9807      	ldr	r0, [sp, #28]
 8004ee2:	9604      	str	r6, [sp, #16]
 8004ee4:	f7ff f9d2 	bl	800428c <strlen>
 8004ee8:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8004eec:	4681      	mov	r9, r0
 8004eee:	f04f 0c00 	mov.w	ip, #0
 8004ef2:	f7ff bb70 	b.w	80045d6 <_vfiprintf_r+0x25e>
 8004ef6:	9801      	ldr	r0, [sp, #4]
 8004ef8:	9900      	ldr	r1, [sp, #0]
 8004efa:	f8cd c014 	str.w	ip, [sp, #20]
 8004efe:	aa0d      	add	r2, sp, #52	; 0x34
 8004f00:	f7ff f9f2 	bl	80042e8 <__sprint_r.part.0>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f47f adf4 	bne.w	8004af2 <_vfiprintf_r+0x77a>
 8004f0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f0e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8004f12:	1c48      	adds	r0, r1, #1
 8004f14:	4654      	mov	r4, sl
 8004f16:	e58b      	b.n	8004a30 <_vfiprintf_r+0x6b8>
 8004f18:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f1c:	4f15      	ldr	r7, [pc, #84]	; (8004f74 <_vfiprintf_r+0xbfc>)
 8004f1e:	3101      	adds	r1, #1
 8004f20:	f7ff bb9b 	b.w	800465a <_vfiprintf_r+0x2e2>
 8004f24:	f1bc 0f06 	cmp.w	ip, #6
 8004f28:	bf28      	it	cs
 8004f2a:	f04f 0c06 	movcs.w	ip, #6
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <_vfiprintf_r+0xc00>)
 8004f30:	9604      	str	r6, [sp, #16]
 8004f32:	46e1      	mov	r9, ip
 8004f34:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
 8004f38:	9307      	str	r3, [sp, #28]
 8004f3a:	e462      	b.n	8004802 <_vfiprintf_r+0x48a>
 8004f3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f3e:	4f0d      	ldr	r7, [pc, #52]	; (8004f74 <_vfiprintf_r+0xbfc>)
 8004f40:	f101 0e01 	add.w	lr, r1, #1
 8004f44:	e617      	b.n	8004b76 <_vfiprintf_r+0x7fe>
 8004f46:	46e1      	mov	r9, ip
 8004f48:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
 8004f4c:	9604      	str	r6, [sp, #16]
 8004f4e:	4684      	mov	ip, r0
 8004f50:	f7ff bb41 	b.w	80045d6 <_vfiprintf_r+0x25e>
 8004f54:	4686      	mov	lr, r0
 8004f56:	e66a      	b.n	8004c2e <_vfiprintf_r+0x8b6>
 8004f58:	9a04      	ldr	r2, [sp, #16]
 8004f5a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8004f5e:	6816      	ldr	r6, [r2, #0]
 8004f60:	3204      	adds	r2, #4
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	9204      	str	r2, [sp, #16]
 8004f66:	f6bf aa6e 	bge.w	8004446 <_vfiprintf_r+0xce>
 8004f6a:	f04f 36ff 	mov.w	r6, #4294967295
 8004f6e:	f7ff ba6a 	b.w	8004446 <_vfiprintf_r+0xce>
 8004f72:	bf00      	nop
 8004f74:	08009e8c 	.word	0x08009e8c
 8004f78:	08009ec4 	.word	0x08009ec4

08004f7c <__sbprintf>:
 8004f7c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8004f80:	460c      	mov	r4, r1
 8004f82:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8004f86:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8004f8a:	69e7      	ldr	r7, [r4, #28]
 8004f8c:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8004f8e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 8004f92:	9119      	str	r1, [sp, #100]	; 0x64
 8004f94:	ad1a      	add	r5, sp, #104	; 0x68
 8004f96:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004f9a:	f02e 0e02 	bic.w	lr, lr, #2
 8004f9e:	f04f 0c00 	mov.w	ip, #0
 8004fa2:	9707      	str	r7, [sp, #28]
 8004fa4:	4669      	mov	r1, sp
 8004fa6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8004fa8:	9500      	str	r5, [sp, #0]
 8004faa:	9504      	str	r5, [sp, #16]
 8004fac:	9602      	str	r6, [sp, #8]
 8004fae:	9605      	str	r6, [sp, #20]
 8004fb0:	f8ad e00c 	strh.w	lr, [sp, #12]
 8004fb4:	f8ad 900e 	strh.w	r9, [sp, #14]
 8004fb8:	9709      	str	r7, [sp, #36]	; 0x24
 8004fba:	f8cd c018 	str.w	ip, [sp, #24]
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	f7ff f9da 	bl	8004378 <_vfiprintf_r>
 8004fc4:	1e05      	subs	r5, r0, #0
 8004fc6:	db07      	blt.n	8004fd8 <__sbprintf+0x5c>
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4669      	mov	r1, sp
 8004fcc:	f002 fb3a 	bl	8007644 <_fflush_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	bf18      	it	ne
 8004fd4:	f04f 35ff 	movne.w	r5, #4294967295
 8004fd8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004fdc:	065b      	lsls	r3, r3, #25
 8004fde:	d503      	bpl.n	8004fe8 <__sbprintf+0x6c>
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8004fee:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8004ff2:	bf00      	nop

08004ff4 <_vfprintf_r>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	b0bf      	sub	sp, #252	; 0xfc
 8004ffa:	461c      	mov	r4, r3
 8004ffc:	4689      	mov	r9, r1
 8004ffe:	9208      	str	r2, [sp, #32]
 8005000:	4607      	mov	r7, r0
 8005002:	f002 ff05 	bl	8007e10 <_localeconv_r>
 8005006:	6803      	ldr	r3, [r0, #0]
 8005008:	9315      	str	r3, [sp, #84]	; 0x54
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff f93e 	bl	800428c <strlen>
 8005010:	940c      	str	r4, [sp, #48]	; 0x30
 8005012:	9016      	str	r0, [sp, #88]	; 0x58
 8005014:	b11f      	cbz	r7, 800501e <_vfprintf_r+0x2a>
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80f3 	beq.w	8005204 <_vfprintf_r+0x210>
 800501e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8005022:	b293      	uxth	r3, r2
 8005024:	049d      	lsls	r5, r3, #18
 8005026:	d40a      	bmi.n	800503e <_vfprintf_r+0x4a>
 8005028:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
 800502c:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8005030:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005034:	f8a9 300c 	strh.w	r3, [r9, #12]
 8005038:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
 800503c:	b29b      	uxth	r3, r3
 800503e:	0718      	lsls	r0, r3, #28
 8005040:	f140 80aa 	bpl.w	8005198 <_vfprintf_r+0x1a4>
 8005044:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005048:	2a00      	cmp	r2, #0
 800504a:	f000 80a5 	beq.w	8005198 <_vfprintf_r+0x1a4>
 800504e:	f003 031a 	and.w	r3, r3, #26
 8005052:	2b0a      	cmp	r3, #10
 8005054:	f000 80ac 	beq.w	80051b0 <_vfprintf_r+0x1bc>
 8005058:	2300      	movs	r3, #0
 800505a:	461a      	mov	r2, r3
 800505c:	9311      	str	r3, [sp, #68]	; 0x44
 800505e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005060:	9322      	str	r3, [sp, #136]	; 0x88
 8005062:	9314      	str	r3, [sp, #80]	; 0x50
 8005064:	9317      	str	r3, [sp, #92]	; 0x5c
 8005066:	9309      	str	r3, [sp, #36]	; 0x24
 8005068:	ab2e      	add	r3, sp, #184	; 0xb8
 800506a:	469c      	mov	ip, r3
 800506c:	9321      	str	r3, [sp, #132]	; 0x84
 800506e:	9212      	str	r2, [sp, #72]	; 0x48
 8005070:	9213      	str	r2, [sp, #76]	; 0x4c
 8005072:	4664      	mov	r4, ip
 8005074:	46b8      	mov	r8, r7
 8005076:	9d08      	ldr	r5, [sp, #32]
 8005078:	782b      	ldrb	r3, [r5, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80c6 	beq.w	800520c <_vfprintf_r+0x218>
 8005080:	2b25      	cmp	r3, #37	; 0x25
 8005082:	d102      	bne.n	800508a <_vfprintf_r+0x96>
 8005084:	e0c2      	b.n	800520c <_vfprintf_r+0x218>
 8005086:	2b25      	cmp	r3, #37	; 0x25
 8005088:	d003      	beq.n	8005092 <_vfprintf_r+0x9e>
 800508a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f9      	bne.n	8005086 <_vfprintf_r+0x92>
 8005092:	9b08      	ldr	r3, [sp, #32]
 8005094:	1aee      	subs	r6, r5, r3
 8005096:	b17e      	cbz	r6, 80050b8 <_vfprintf_r+0xc4>
 8005098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800509a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800509c:	9908      	ldr	r1, [sp, #32]
 800509e:	6021      	str	r1, [r4, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	4432      	add	r2, r6
 80050a4:	2b07      	cmp	r3, #7
 80050a6:	6066      	str	r6, [r4, #4]
 80050a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80050aa:	9322      	str	r3, [sp, #136]	; 0x88
 80050ac:	f300 8093 	bgt.w	80051d6 <_vfprintf_r+0x1e2>
 80050b0:	3408      	adds	r4, #8
 80050b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b4:	4433      	add	r3, r6
 80050b6:	9309      	str	r3, [sp, #36]	; 0x24
 80050b8:	782b      	ldrb	r3, [r5, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 8093 	beq.w	80051e6 <_vfprintf_r+0x1f2>
 80050c0:	2300      	movs	r3, #0
 80050c2:	1c69      	adds	r1, r5, #1
 80050c4:	f04f 3aff 	mov.w	sl, #4294967295
 80050c8:	786d      	ldrb	r5, [r5, #1]
 80050ca:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80050ce:	461a      	mov	r2, r3
 80050d0:	930a      	str	r3, [sp, #40]	; 0x28
 80050d2:	9306      	str	r3, [sp, #24]
 80050d4:	4656      	mov	r6, sl
 80050d6:	1c4b      	adds	r3, r1, #1
 80050d8:	f1a5 0120 	sub.w	r1, r5, #32
 80050dc:	2958      	cmp	r1, #88	; 0x58
 80050de:	f200 83c1 	bhi.w	8005864 <_vfprintf_r+0x870>
 80050e2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80050e6:	0256      	.short	0x0256
 80050e8:	03bf03bf 	.word	0x03bf03bf
 80050ec:	03bf02f6 	.word	0x03bf02f6
 80050f0:	03bf03bf 	.word	0x03bf03bf
 80050f4:	03bf03bf 	.word	0x03bf03bf
 80050f8:	02fd03bf 	.word	0x02fd03bf
 80050fc:	03bf02c6 	.word	0x03bf02c6
 8005100:	034701f2 	.word	0x034701f2
 8005104:	02ca03bf 	.word	0x02ca03bf
 8005108:	02d102d1 	.word	0x02d102d1
 800510c:	02d102d1 	.word	0x02d102d1
 8005110:	02d102d1 	.word	0x02d102d1
 8005114:	02d102d1 	.word	0x02d102d1
 8005118:	03bf02d1 	.word	0x03bf02d1
 800511c:	03bf03bf 	.word	0x03bf03bf
 8005120:	03bf03bf 	.word	0x03bf03bf
 8005124:	03bf03bf 	.word	0x03bf03bf
 8005128:	03bf03bf 	.word	0x03bf03bf
 800512c:	026b03bf 	.word	0x026b03bf
 8005130:	03bf028d 	.word	0x03bf028d
 8005134:	03bf028d 	.word	0x03bf028d
 8005138:	03bf03bf 	.word	0x03bf03bf
 800513c:	02bf03bf 	.word	0x02bf03bf
 8005140:	03bf03bf 	.word	0x03bf03bf
 8005144:	03bf0362 	.word	0x03bf0362
 8005148:	03bf03bf 	.word	0x03bf03bf
 800514c:	03bf03bf 	.word	0x03bf03bf
 8005150:	03bf03a9 	.word	0x03bf03a9
 8005154:	037f03bf 	.word	0x037f03bf
 8005158:	03bf03bf 	.word	0x03bf03bf
 800515c:	03bf03bf 	.word	0x03bf03bf
 8005160:	03bf03bf 	.word	0x03bf03bf
 8005164:	03bf03bf 	.word	0x03bf03bf
 8005168:	03bf03bf 	.word	0x03bf03bf
 800516c:	030b0394 	.word	0x030b0394
 8005170:	028d028d 	.word	0x028d028d
 8005174:	0324028d 	.word	0x0324028d
 8005178:	03bf030b 	.word	0x03bf030b
 800517c:	032b03bf 	.word	0x032b03bf
 8005180:	033503bf 	.word	0x033503bf
 8005184:	02e001f9 	.word	0x02e001f9
 8005188:	03bf025d 	.word	0x03bf025d
 800518c:	03bf020b 	.word	0x03bf020b
 8005190:	03bf0095 	.word	0x03bf0095
 8005194:	023003bf 	.word	0x023003bf
 8005198:	4638      	mov	r0, r7
 800519a:	4649      	mov	r1, r9
 800519c:	f001 f95a 	bl	8006454 <__swsetup_r>
 80051a0:	b9a0      	cbnz	r0, 80051cc <_vfprintf_r+0x1d8>
 80051a2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80051a6:	f003 031a 	and.w	r3, r3, #26
 80051aa:	2b0a      	cmp	r3, #10
 80051ac:	f47f af54 	bne.w	8005058 <_vfprintf_r+0x64>
 80051b0:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f6ff af4f 	blt.w	8005058 <_vfprintf_r+0x64>
 80051ba:	4638      	mov	r0, r7
 80051bc:	4649      	mov	r1, r9
 80051be:	9a08      	ldr	r2, [sp, #32]
 80051c0:	4623      	mov	r3, r4
 80051c2:	f001 f90b 	bl	80063dc <__sbprintf>
 80051c6:	b03f      	add	sp, #252	; 0xfc
 80051c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	b03f      	add	sp, #252	; 0xfc
 80051d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d6:	4640      	mov	r0, r8
 80051d8:	4649      	mov	r1, r9
 80051da:	aa21      	add	r2, sp, #132	; 0x84
 80051dc:	f7ff f8c0 	bl	8004360 <__sprint_r>
 80051e0:	b940      	cbnz	r0, 80051f4 <_vfprintf_r+0x200>
 80051e2:	ac2e      	add	r4, sp, #184	; 0xb8
 80051e4:	e765      	b.n	80050b2 <_vfprintf_r+0xbe>
 80051e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051e8:	b123      	cbz	r3, 80051f4 <_vfprintf_r+0x200>
 80051ea:	4640      	mov	r0, r8
 80051ec:	4649      	mov	r1, r9
 80051ee:	aa21      	add	r2, sp, #132	; 0x84
 80051f0:	f7ff f8b6 	bl	8004360 <__sprint_r>
 80051f4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80051f8:	065a      	lsls	r2, r3, #25
 80051fa:	d4e7      	bmi.n	80051cc <_vfprintf_r+0x1d8>
 80051fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051fe:	b03f      	add	sp, #252	; 0xfc
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	4638      	mov	r0, r7
 8005206:	f002 fab1 	bl	800776c <__sinit>
 800520a:	e708      	b.n	800501e <_vfprintf_r+0x2a>
 800520c:	9d08      	ldr	r5, [sp, #32]
 800520e:	e753      	b.n	80050b8 <_vfprintf_r+0xc4>
 8005210:	9308      	str	r3, [sp, #32]
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	46b2      	mov	sl, r6
 8005216:	069e      	lsls	r6, r3, #26
 8005218:	f140 8318 	bpl.w	800584c <_vfprintf_r+0x858>
 800521c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800521e:	3707      	adds	r7, #7
 8005220:	f027 0307 	bic.w	r3, r7, #7
 8005224:	f103 0208 	add.w	r2, r3, #8
 8005228:	e9d3 6700 	ldrd	r6, r7, [r3]
 800522c:	920c      	str	r2, [sp, #48]	; 0x30
 800522e:	2301      	movs	r3, #1
 8005230:	f04f 0c00 	mov.w	ip, #0
 8005234:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8005238:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 800523c:	f1ba 0f00 	cmp.w	sl, #0
 8005240:	db03      	blt.n	800524a <_vfprintf_r+0x256>
 8005242:	9a06      	ldr	r2, [sp, #24]
 8005244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005248:	9206      	str	r2, [sp, #24]
 800524a:	ea56 0207 	orrs.w	r2, r6, r7
 800524e:	f040 8319 	bne.w	8005884 <_vfprintf_r+0x890>
 8005252:	f1ba 0f00 	cmp.w	sl, #0
 8005256:	f000 8416 	beq.w	8005a86 <_vfprintf_r+0xa92>
 800525a:	2b01      	cmp	r3, #1
 800525c:	f000 831a 	beq.w	8005894 <_vfprintf_r+0x8a0>
 8005260:	2b02      	cmp	r3, #2
 8005262:	f000 844c 	beq.w	8005afe <_vfprintf_r+0xb0a>
 8005266:	a92e      	add	r1, sp, #184	; 0xb8
 8005268:	08f2      	lsrs	r2, r6, #3
 800526a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800526e:	08f8      	lsrs	r0, r7, #3
 8005270:	f006 0307 	and.w	r3, r6, #7
 8005274:	4607      	mov	r7, r0
 8005276:	4616      	mov	r6, r2
 8005278:	3330      	adds	r3, #48	; 0x30
 800527a:	ea56 0207 	orrs.w	r2, r6, r7
 800527e:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8005282:	d1f1      	bne.n	8005268 <_vfprintf_r+0x274>
 8005284:	9a06      	ldr	r2, [sp, #24]
 8005286:	910e      	str	r1, [sp, #56]	; 0x38
 8005288:	07d0      	lsls	r0, r2, #31
 800528a:	f100 850d 	bmi.w	8005ca8 <_vfprintf_r+0xcb4>
 800528e:	ab2e      	add	r3, sp, #184	; 0xb8
 8005290:	1a5b      	subs	r3, r3, r1
 8005292:	930b      	str	r3, [sp, #44]	; 0x2c
 8005294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005296:	4592      	cmp	sl, r2
 8005298:	4653      	mov	r3, sl
 800529a:	bfb8      	it	lt
 800529c:	4613      	movlt	r3, r2
 800529e:	9307      	str	r3, [sp, #28]
 80052a0:	2300      	movs	r3, #0
 80052a2:	9310      	str	r3, [sp, #64]	; 0x40
 80052a4:	f1bc 0f00 	cmp.w	ip, #0
 80052a8:	d002      	beq.n	80052b0 <_vfprintf_r+0x2bc>
 80052aa:	9b07      	ldr	r3, [sp, #28]
 80052ac:	3301      	adds	r3, #1
 80052ae:	9307      	str	r3, [sp, #28]
 80052b0:	9b06      	ldr	r3, [sp, #24]
 80052b2:	f013 0302 	ands.w	r3, r3, #2
 80052b6:	930d      	str	r3, [sp, #52]	; 0x34
 80052b8:	d002      	beq.n	80052c0 <_vfprintf_r+0x2cc>
 80052ba:	9b07      	ldr	r3, [sp, #28]
 80052bc:	3302      	adds	r3, #2
 80052be:	9307      	str	r3, [sp, #28]
 80052c0:	9b06      	ldr	r3, [sp, #24]
 80052c2:	f013 0684 	ands.w	r6, r3, #132	; 0x84
 80052c6:	f040 82da 	bne.w	800587e <_vfprintf_r+0x88a>
 80052ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052cc:	9a07      	ldr	r2, [sp, #28]
 80052ce:	ebc2 0a03 	rsb	sl, r2, r3
 80052d2:	f1ba 0f00 	cmp.w	sl, #0
 80052d6:	f340 82d2 	ble.w	800587e <_vfprintf_r+0x88a>
 80052da:	f1ba 0f10 	cmp.w	sl, #16
 80052de:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80052e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052e2:	4fb3      	ldr	r7, [pc, #716]	; (80055b0 <_vfprintf_r+0x5bc>)
 80052e4:	bfc8      	it	gt
 80052e6:	f04f 0b10 	movgt.w	fp, #16
 80052ea:	dc07      	bgt.n	80052fc <_vfprintf_r+0x308>
 80052ec:	e01e      	b.n	800532c <_vfprintf_r+0x338>
 80052ee:	f1aa 0a10 	sub.w	sl, sl, #16
 80052f2:	f1ba 0f10 	cmp.w	sl, #16
 80052f6:	f104 0408 	add.w	r4, r4, #8
 80052fa:	dd17      	ble.n	800532c <_vfprintf_r+0x338>
 80052fc:	3201      	adds	r2, #1
 80052fe:	3110      	adds	r1, #16
 8005300:	2a07      	cmp	r2, #7
 8005302:	9123      	str	r1, [sp, #140]	; 0x8c
 8005304:	9222      	str	r2, [sp, #136]	; 0x88
 8005306:	e884 0880 	stmia.w	r4, {r7, fp}
 800530a:	ddf0      	ble.n	80052ee <_vfprintf_r+0x2fa>
 800530c:	4640      	mov	r0, r8
 800530e:	4649      	mov	r1, r9
 8005310:	aa21      	add	r2, sp, #132	; 0x84
 8005312:	f7ff f825 	bl	8004360 <__sprint_r>
 8005316:	2800      	cmp	r0, #0
 8005318:	f47f af6c 	bne.w	80051f4 <_vfprintf_r+0x200>
 800531c:	f1aa 0a10 	sub.w	sl, sl, #16
 8005320:	f1ba 0f10 	cmp.w	sl, #16
 8005324:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8005326:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005328:	ac2e      	add	r4, sp, #184	; 0xb8
 800532a:	dce7      	bgt.n	80052fc <_vfprintf_r+0x308>
 800532c:	3201      	adds	r2, #1
 800532e:	eb0a 0b01 	add.w	fp, sl, r1
 8005332:	2a07      	cmp	r2, #7
 8005334:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005338:	9222      	str	r2, [sp, #136]	; 0x88
 800533a:	e884 0480 	stmia.w	r4, {r7, sl}
 800533e:	f300 8443 	bgt.w	8005bc8 <_vfprintf_r+0xbd4>
 8005342:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005346:	3408      	adds	r4, #8
 8005348:	f1bc 0f00 	cmp.w	ip, #0
 800534c:	d00f      	beq.n	800536e <_vfprintf_r+0x37a>
 800534e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005350:	3301      	adds	r3, #1
 8005352:	f10b 0b01 	add.w	fp, fp, #1
 8005356:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 800535a:	2201      	movs	r2, #1
 800535c:	2b07      	cmp	r3, #7
 800535e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005362:	9322      	str	r3, [sp, #136]	; 0x88
 8005364:	e884 0006 	stmia.w	r4, {r1, r2}
 8005368:	f300 83b7 	bgt.w	8005ada <_vfprintf_r+0xae6>
 800536c:	3408      	adds	r4, #8
 800536e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005370:	b173      	cbz	r3, 8005390 <_vfprintf_r+0x39c>
 8005372:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005374:	3301      	adds	r3, #1
 8005376:	f10b 0b02 	add.w	fp, fp, #2
 800537a:	a91a      	add	r1, sp, #104	; 0x68
 800537c:	2202      	movs	r2, #2
 800537e:	2b07      	cmp	r3, #7
 8005380:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005384:	9322      	str	r3, [sp, #136]	; 0x88
 8005386:	e884 0006 	stmia.w	r4, {r1, r2}
 800538a:	f300 839a 	bgt.w	8005ac2 <_vfprintf_r+0xace>
 800538e:	3408      	adds	r4, #8
 8005390:	2e80      	cmp	r6, #128	; 0x80
 8005392:	f000 82ea 	beq.w	800596a <_vfprintf_r+0x976>
 8005396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800539a:	ebc2 0a03 	rsb	sl, r2, r3
 800539e:	f1ba 0f00 	cmp.w	sl, #0
 80053a2:	dd32      	ble.n	800540a <_vfprintf_r+0x416>
 80053a4:	f1ba 0f10 	cmp.w	sl, #16
 80053a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053aa:	4f82      	ldr	r7, [pc, #520]	; (80055b4 <_vfprintf_r+0x5c0>)
 80053ac:	dd22      	ble.n	80053f4 <_vfprintf_r+0x400>
 80053ae:	2610      	movs	r6, #16
 80053b0:	465b      	mov	r3, fp
 80053b2:	e006      	b.n	80053c2 <_vfprintf_r+0x3ce>
 80053b4:	f1aa 0a10 	sub.w	sl, sl, #16
 80053b8:	f1ba 0f10 	cmp.w	sl, #16
 80053bc:	f104 0408 	add.w	r4, r4, #8
 80053c0:	dd17      	ble.n	80053f2 <_vfprintf_r+0x3fe>
 80053c2:	3201      	adds	r2, #1
 80053c4:	3310      	adds	r3, #16
 80053c6:	2a07      	cmp	r2, #7
 80053c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80053ca:	9222      	str	r2, [sp, #136]	; 0x88
 80053cc:	6027      	str	r7, [r4, #0]
 80053ce:	6066      	str	r6, [r4, #4]
 80053d0:	ddf0      	ble.n	80053b4 <_vfprintf_r+0x3c0>
 80053d2:	4640      	mov	r0, r8
 80053d4:	4649      	mov	r1, r9
 80053d6:	aa21      	add	r2, sp, #132	; 0x84
 80053d8:	f7fe ffc2 	bl	8004360 <__sprint_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f47f af09 	bne.w	80051f4 <_vfprintf_r+0x200>
 80053e2:	f1aa 0a10 	sub.w	sl, sl, #16
 80053e6:	f1ba 0f10 	cmp.w	sl, #16
 80053ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053ee:	ac2e      	add	r4, sp, #184	; 0xb8
 80053f0:	dce7      	bgt.n	80053c2 <_vfprintf_r+0x3ce>
 80053f2:	469b      	mov	fp, r3
 80053f4:	3201      	adds	r2, #1
 80053f6:	44d3      	add	fp, sl
 80053f8:	2a07      	cmp	r2, #7
 80053fa:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80053fe:	9222      	str	r2, [sp, #136]	; 0x88
 8005400:	e884 0480 	stmia.w	r4, {r7, sl}
 8005404:	f300 8351 	bgt.w	8005aaa <_vfprintf_r+0xab6>
 8005408:	3408      	adds	r4, #8
 800540a:	9b06      	ldr	r3, [sp, #24]
 800540c:	05db      	lsls	r3, r3, #23
 800540e:	f100 8255 	bmi.w	80058bc <_vfprintf_r+0x8c8>
 8005412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005418:	6022      	str	r2, [r4, #0]
 800541a:	3301      	adds	r3, #1
 800541c:	448b      	add	fp, r1
 800541e:	2b07      	cmp	r3, #7
 8005420:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005424:	6061      	str	r1, [r4, #4]
 8005426:	9322      	str	r3, [sp, #136]	; 0x88
 8005428:	f300 8317 	bgt.w	8005a5a <_vfprintf_r+0xa66>
 800542c:	3408      	adds	r4, #8
 800542e:	9b06      	ldr	r3, [sp, #24]
 8005430:	0759      	lsls	r1, r3, #29
 8005432:	d53a      	bpl.n	80054aa <_vfprintf_r+0x4b6>
 8005434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005436:	9a07      	ldr	r2, [sp, #28]
 8005438:	1a9d      	subs	r5, r3, r2
 800543a:	2d00      	cmp	r5, #0
 800543c:	dd35      	ble.n	80054aa <_vfprintf_r+0x4b6>
 800543e:	2d10      	cmp	r5, #16
 8005440:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005442:	4f5b      	ldr	r7, [pc, #364]	; (80055b0 <_vfprintf_r+0x5bc>)
 8005444:	dd1e      	ble.n	8005484 <_vfprintf_r+0x490>
 8005446:	2610      	movs	r6, #16
 8005448:	465a      	mov	r2, fp
 800544a:	e004      	b.n	8005456 <_vfprintf_r+0x462>
 800544c:	3d10      	subs	r5, #16
 800544e:	2d10      	cmp	r5, #16
 8005450:	f104 0408 	add.w	r4, r4, #8
 8005454:	dd15      	ble.n	8005482 <_vfprintf_r+0x48e>
 8005456:	3301      	adds	r3, #1
 8005458:	3210      	adds	r2, #16
 800545a:	2b07      	cmp	r3, #7
 800545c:	9223      	str	r2, [sp, #140]	; 0x8c
 800545e:	9322      	str	r3, [sp, #136]	; 0x88
 8005460:	6027      	str	r7, [r4, #0]
 8005462:	6066      	str	r6, [r4, #4]
 8005464:	ddf2      	ble.n	800544c <_vfprintf_r+0x458>
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	aa21      	add	r2, sp, #132	; 0x84
 800546c:	f7fe ff78 	bl	8004360 <__sprint_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	f47f aebf 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005476:	3d10      	subs	r5, #16
 8005478:	2d10      	cmp	r5, #16
 800547a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800547c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800547e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005480:	dce9      	bgt.n	8005456 <_vfprintf_r+0x462>
 8005482:	4693      	mov	fp, r2
 8005484:	3301      	adds	r3, #1
 8005486:	44ab      	add	fp, r5
 8005488:	2b07      	cmp	r3, #7
 800548a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800548e:	9322      	str	r3, [sp, #136]	; 0x88
 8005490:	6027      	str	r7, [r4, #0]
 8005492:	6065      	str	r5, [r4, #4]
 8005494:	dd09      	ble.n	80054aa <_vfprintf_r+0x4b6>
 8005496:	4640      	mov	r0, r8
 8005498:	4649      	mov	r1, r9
 800549a:	aa21      	add	r2, sp, #132	; 0x84
 800549c:	f7fe ff60 	bl	8004360 <__sprint_r>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	f47f aea7 	bne.w	80051f4 <_vfprintf_r+0x200>
 80054a6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	9a07      	ldr	r2, [sp, #28]
 80054ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054b0:	428a      	cmp	r2, r1
 80054b2:	bfac      	ite	ge
 80054b4:	189b      	addge	r3, r3, r2
 80054b6:	185b      	addlt	r3, r3, r1
 80054b8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ba:	f1bb 0f00 	cmp.w	fp, #0
 80054be:	f040 82d8 	bne.w	8005a72 <_vfprintf_r+0xa7e>
 80054c2:	2300      	movs	r3, #0
 80054c4:	9322      	str	r3, [sp, #136]	; 0x88
 80054c6:	ac2e      	add	r4, sp, #184	; 0xb8
 80054c8:	e5d5      	b.n	8005076 <_vfprintf_r+0x82>
 80054ca:	4619      	mov	r1, r3
 80054cc:	9806      	ldr	r0, [sp, #24]
 80054ce:	781d      	ldrb	r5, [r3, #0]
 80054d0:	f040 0004 	orr.w	r0, r0, #4
 80054d4:	9006      	str	r0, [sp, #24]
 80054d6:	e5fe      	b.n	80050d6 <_vfprintf_r+0xe2>
 80054d8:	9308      	str	r3, [sp, #32]
 80054da:	9b06      	ldr	r3, [sp, #24]
 80054dc:	f013 0320 	ands.w	r3, r3, #32
 80054e0:	46b2      	mov	sl, r6
 80054e2:	f000 816d 	beq.w	80057c0 <_vfprintf_r+0x7cc>
 80054e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80054e8:	3707      	adds	r7, #7
 80054ea:	f027 0307 	bic.w	r3, r7, #7
 80054ee:	f103 0208 	add.w	r2, r3, #8
 80054f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80054f6:	920c      	str	r2, [sp, #48]	; 0x30
 80054f8:	2300      	movs	r3, #0
 80054fa:	e699      	b.n	8005230 <_vfprintf_r+0x23c>
 80054fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054fe:	9308      	str	r3, [sp, #32]
 8005500:	6813      	ldr	r3, [r2, #0]
 8005502:	930e      	str	r3, [sp, #56]	; 0x38
 8005504:	f04f 0b00 	mov.w	fp, #0
 8005508:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 800550c:	1d17      	adds	r7, r2, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 864f 	beq.w	80061b2 <_vfprintf_r+0x11be>
 8005514:	2e00      	cmp	r6, #0
 8005516:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005518:	f2c0 8601 	blt.w	800611e <_vfprintf_r+0x112a>
 800551c:	4659      	mov	r1, fp
 800551e:	4632      	mov	r2, r6
 8005520:	f002 ff78 	bl	8008414 <memchr>
 8005524:	2800      	cmp	r0, #0
 8005526:	f000 8680 	beq.w	800622a <_vfprintf_r+0x1236>
 800552a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800552c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8005530:	1ac3      	subs	r3, r0, r3
 8005532:	930b      	str	r3, [sp, #44]	; 0x2c
 8005534:	970c      	str	r7, [sp, #48]	; 0x30
 8005536:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800553a:	9307      	str	r3, [sp, #28]
 800553c:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 8005540:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005544:	e6ae      	b.n	80052a4 <_vfprintf_r+0x2b0>
 8005546:	9308      	str	r3, [sp, #32]
 8005548:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <_vfprintf_r+0x5c4>)
 800554a:	9314      	str	r3, [sp, #80]	; 0x50
 800554c:	9b06      	ldr	r3, [sp, #24]
 800554e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005552:	0699      	lsls	r1, r3, #26
 8005554:	46b2      	mov	sl, r6
 8005556:	f140 814f 	bpl.w	80057f8 <_vfprintf_r+0x804>
 800555a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800555c:	3707      	adds	r7, #7
 800555e:	f027 0307 	bic.w	r3, r7, #7
 8005562:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005566:	f103 0208 	add.w	r2, r3, #8
 800556a:	920c      	str	r2, [sp, #48]	; 0x30
 800556c:	9b06      	ldr	r3, [sp, #24]
 800556e:	07db      	lsls	r3, r3, #31
 8005570:	f140 82de 	bpl.w	8005b30 <_vfprintf_r+0xb3c>
 8005574:	ea56 0307 	orrs.w	r3, r6, r7
 8005578:	f000 82da 	beq.w	8005b30 <_vfprintf_r+0xb3c>
 800557c:	9a06      	ldr	r2, [sp, #24]
 800557e:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8005582:	2330      	movs	r3, #48	; 0x30
 8005584:	f042 0202 	orr.w	r2, r2, #2
 8005588:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800558c:	9206      	str	r2, [sp, #24]
 800558e:	2302      	movs	r3, #2
 8005590:	e64e      	b.n	8005230 <_vfprintf_r+0x23c>
 8005592:	781d      	ldrb	r5, [r3, #0]
 8005594:	4619      	mov	r1, r3
 8005596:	2a00      	cmp	r2, #0
 8005598:	f47f ad9d 	bne.w	80050d6 <_vfprintf_r+0xe2>
 800559c:	2220      	movs	r2, #32
 800559e:	e59a      	b.n	80050d6 <_vfprintf_r+0xe2>
 80055a0:	9906      	ldr	r1, [sp, #24]
 80055a2:	f041 0120 	orr.w	r1, r1, #32
 80055a6:	9106      	str	r1, [sp, #24]
 80055a8:	781d      	ldrb	r5, [r3, #0]
 80055aa:	4619      	mov	r1, r3
 80055ac:	e593      	b.n	80050d6 <_vfprintf_r+0xe2>
 80055ae:	bf00      	nop
 80055b0:	08009ef0 	.word	0x08009ef0
 80055b4:	08009ecc 	.word	0x08009ecc
 80055b8:	08009eb0 	.word	0x08009eb0
 80055bc:	9308      	str	r3, [sp, #32]
 80055be:	9b06      	ldr	r3, [sp, #24]
 80055c0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80055c4:	f043 0310 	orr.w	r3, r3, #16
 80055c8:	9306      	str	r3, [sp, #24]
 80055ca:	9b06      	ldr	r3, [sp, #24]
 80055cc:	0699      	lsls	r1, r3, #26
 80055ce:	46b2      	mov	sl, r6
 80055d0:	f140 809c 	bpl.w	800570c <_vfprintf_r+0x718>
 80055d4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80055d6:	3707      	adds	r7, #7
 80055d8:	f027 0707 	bic.w	r7, r7, #7
 80055dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e0:	f107 0108 	add.w	r1, r7, #8
 80055e4:	910c      	str	r1, [sp, #48]	; 0x30
 80055e6:	4616      	mov	r6, r2
 80055e8:	461f      	mov	r7, r3
 80055ea:	2a00      	cmp	r2, #0
 80055ec:	f173 0300 	sbcs.w	r3, r3, #0
 80055f0:	f2c0 8415 	blt.w	8005e1e <_vfprintf_r+0xe2a>
 80055f4:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 80055f8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80055fc:	2301      	movs	r3, #1
 80055fe:	e61d      	b.n	800523c <_vfprintf_r+0x248>
 8005600:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005602:	9308      	str	r3, [sp, #32]
 8005604:	3707      	adds	r7, #7
 8005606:	f027 0307 	bic.w	r3, r7, #7
 800560a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800560e:	f103 0208 	add.w	r2, r3, #8
 8005612:	920c      	str	r2, [sp, #48]	; 0x30
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	9212      	str	r2, [sp, #72]	; 0x48
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	9313      	str	r3, [sp, #76]	; 0x4c
 800561c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800561e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005620:	f003 fce2 	bl	8008fe8 <__fpclassifyd>
 8005624:	2801      	cmp	r0, #1
 8005626:	46b3      	mov	fp, r6
 8005628:	9812      	ldr	r0, [sp, #72]	; 0x48
 800562a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800562c:	f040 8406 	bne.w	8005e3c <_vfprintf_r+0xe48>
 8005630:	2200      	movs	r2, #0
 8005632:	2300      	movs	r3, #0
 8005634:	f7fb fa74 	bl	8000b20 <__aeabi_dcmplt>
 8005638:	2800      	cmp	r0, #0
 800563a:	f040 85ee 	bne.w	800621a <_vfprintf_r+0x1226>
 800563e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005642:	9e06      	ldr	r6, [sp, #24]
 8005644:	4a99      	ldr	r2, [pc, #612]	; (80058ac <_vfprintf_r+0x8b8>)
 8005646:	4b9a      	ldr	r3, [pc, #616]	; (80058b0 <_vfprintf_r+0x8bc>)
 8005648:	2103      	movs	r1, #3
 800564a:	2000      	movs	r0, #0
 800564c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8005650:	2d47      	cmp	r5, #71	; 0x47
 8005652:	bfd8      	it	le
 8005654:	461a      	movle	r2, r3
 8005656:	9107      	str	r1, [sp, #28]
 8005658:	900f      	str	r0, [sp, #60]	; 0x3c
 800565a:	9606      	str	r6, [sp, #24]
 800565c:	920e      	str	r2, [sp, #56]	; 0x38
 800565e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005660:	9010      	str	r0, [sp, #64]	; 0x40
 8005662:	e61f      	b.n	80052a4 <_vfprintf_r+0x2b0>
 8005664:	9906      	ldr	r1, [sp, #24]
 8005666:	f041 0108 	orr.w	r1, r1, #8
 800566a:	9106      	str	r1, [sp, #24]
 800566c:	781d      	ldrb	r5, [r3, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	e531      	b.n	80050d6 <_vfprintf_r+0xe2>
 8005672:	781d      	ldrb	r5, [r3, #0]
 8005674:	4619      	mov	r1, r3
 8005676:	222b      	movs	r2, #43	; 0x2b
 8005678:	e52d      	b.n	80050d6 <_vfprintf_r+0xe2>
 800567a:	9906      	ldr	r1, [sp, #24]
 800567c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005680:	9106      	str	r1, [sp, #24]
 8005682:	781d      	ldrb	r5, [r3, #0]
 8005684:	4619      	mov	r1, r3
 8005686:	e526      	b.n	80050d6 <_vfprintf_r+0xe2>
 8005688:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800568c:	2100      	movs	r1, #0
 800568e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005692:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005696:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800569a:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 800569e:	2809      	cmp	r0, #9
 80056a0:	d9f5      	bls.n	800568e <_vfprintf_r+0x69a>
 80056a2:	910a      	str	r1, [sp, #40]	; 0x28
 80056a4:	e518      	b.n	80050d8 <_vfprintf_r+0xe4>
 80056a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056a8:	9308      	str	r3, [sp, #32]
 80056aa:	2330      	movs	r3, #48	; 0x30
 80056ac:	9a06      	ldr	r2, [sp, #24]
 80056ae:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80056b2:	460b      	mov	r3, r1
 80056b4:	3304      	adds	r3, #4
 80056b6:	2578      	movs	r5, #120	; 0x78
 80056b8:	f042 0202 	orr.w	r2, r2, #2
 80056bc:	930c      	str	r3, [sp, #48]	; 0x30
 80056be:	4b7d      	ldr	r3, [pc, #500]	; (80058b4 <_vfprintf_r+0x8c0>)
 80056c0:	9314      	str	r3, [sp, #80]	; 0x50
 80056c2:	46b2      	mov	sl, r6
 80056c4:	9206      	str	r2, [sp, #24]
 80056c6:	680e      	ldr	r6, [r1, #0]
 80056c8:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 80056cc:	2700      	movs	r7, #0
 80056ce:	2302      	movs	r3, #2
 80056d0:	e5ae      	b.n	8005230 <_vfprintf_r+0x23c>
 80056d2:	9906      	ldr	r1, [sp, #24]
 80056d4:	f041 0101 	orr.w	r1, r1, #1
 80056d8:	9106      	str	r1, [sp, #24]
 80056da:	781d      	ldrb	r5, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	e4fa      	b.n	80050d6 <_vfprintf_r+0xe2>
 80056e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056e2:	6829      	ldr	r1, [r5, #0]
 80056e4:	910a      	str	r1, [sp, #40]	; 0x28
 80056e6:	4608      	mov	r0, r1
 80056e8:	2800      	cmp	r0, #0
 80056ea:	4629      	mov	r1, r5
 80056ec:	f101 0104 	add.w	r1, r1, #4
 80056f0:	f2c0 84e3 	blt.w	80060ba <_vfprintf_r+0x10c6>
 80056f4:	910c      	str	r1, [sp, #48]	; 0x30
 80056f6:	781d      	ldrb	r5, [r3, #0]
 80056f8:	4619      	mov	r1, r3
 80056fa:	e4ec      	b.n	80050d6 <_vfprintf_r+0xe2>
 80056fc:	9308      	str	r3, [sp, #32]
 80056fe:	9b06      	ldr	r3, [sp, #24]
 8005700:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005704:	0699      	lsls	r1, r3, #26
 8005706:	46b2      	mov	sl, r6
 8005708:	f53f af64 	bmi.w	80055d4 <_vfprintf_r+0x5e0>
 800570c:	9b06      	ldr	r3, [sp, #24]
 800570e:	06da      	lsls	r2, r3, #27
 8005710:	f100 8292 	bmi.w	8005c38 <_vfprintf_r+0xc44>
 8005714:	9b06      	ldr	r3, [sp, #24]
 8005716:	065b      	lsls	r3, r3, #25
 8005718:	f140 828e 	bpl.w	8005c38 <_vfprintf_r+0xc44>
 800571c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800571e:	f9b1 6000 	ldrsh.w	r6, [r1]
 8005722:	3104      	adds	r1, #4
 8005724:	17f7      	asrs	r7, r6, #31
 8005726:	4632      	mov	r2, r6
 8005728:	463b      	mov	r3, r7
 800572a:	910c      	str	r1, [sp, #48]	; 0x30
 800572c:	e75d      	b.n	80055ea <_vfprintf_r+0x5f6>
 800572e:	9906      	ldr	r1, [sp, #24]
 8005730:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005734:	9106      	str	r1, [sp, #24]
 8005736:	781d      	ldrb	r5, [r3, #0]
 8005738:	4619      	mov	r1, r3
 800573a:	e4cc      	b.n	80050d6 <_vfprintf_r+0xe2>
 800573c:	781d      	ldrb	r5, [r3, #0]
 800573e:	9906      	ldr	r1, [sp, #24]
 8005740:	2d6c      	cmp	r5, #108	; 0x6c
 8005742:	f000 84b3 	beq.w	80060ac <_vfprintf_r+0x10b8>
 8005746:	f041 0110 	orr.w	r1, r1, #16
 800574a:	9106      	str	r1, [sp, #24]
 800574c:	4619      	mov	r1, r3
 800574e:	e4c2      	b.n	80050d6 <_vfprintf_r+0xe2>
 8005750:	9308      	str	r3, [sp, #32]
 8005752:	9b06      	ldr	r3, [sp, #24]
 8005754:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8005758:	069a      	lsls	r2, r3, #26
 800575a:	f140 8400 	bpl.w	8005f5e <_vfprintf_r+0xf6a>
 800575e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	17cf      	asrs	r7, r1, #31
 8005766:	4608      	mov	r0, r1
 8005768:	3204      	adds	r2, #4
 800576a:	4639      	mov	r1, r7
 800576c:	920c      	str	r2, [sp, #48]	; 0x30
 800576e:	e9c3 0100 	strd	r0, r1, [r3]
 8005772:	e480      	b.n	8005076 <_vfprintf_r+0x82>
 8005774:	781d      	ldrb	r5, [r3, #0]
 8005776:	2d2a      	cmp	r5, #42	; 0x2a
 8005778:	f103 0101 	add.w	r1, r3, #1
 800577c:	f000 860e 	beq.w	800639c <_vfprintf_r+0x13a8>
 8005780:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8005784:	2809      	cmp	r0, #9
 8005786:	460b      	mov	r3, r1
 8005788:	f04f 0600 	mov.w	r6, #0
 800578c:	f63f aca4 	bhi.w	80050d8 <_vfprintf_r+0xe4>
 8005790:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005794:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005798:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800579c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 80057a0:	2809      	cmp	r0, #9
 80057a2:	d9f5      	bls.n	8005790 <_vfprintf_r+0x79c>
 80057a4:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80057a8:	e496      	b.n	80050d8 <_vfprintf_r+0xe4>
 80057aa:	9308      	str	r3, [sp, #32]
 80057ac:	9b06      	ldr	r3, [sp, #24]
 80057ae:	f043 0310 	orr.w	r3, r3, #16
 80057b2:	9306      	str	r3, [sp, #24]
 80057b4:	9b06      	ldr	r3, [sp, #24]
 80057b6:	f013 0320 	ands.w	r3, r3, #32
 80057ba:	46b2      	mov	sl, r6
 80057bc:	f47f ae93 	bne.w	80054e6 <_vfprintf_r+0x4f2>
 80057c0:	9a06      	ldr	r2, [sp, #24]
 80057c2:	f012 0210 	ands.w	r2, r2, #16
 80057c6:	f040 8240 	bne.w	8005c4a <_vfprintf_r+0xc56>
 80057ca:	9b06      	ldr	r3, [sp, #24]
 80057cc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80057d0:	f000 823b 	beq.w	8005c4a <_vfprintf_r+0xc56>
 80057d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80057d6:	4613      	mov	r3, r2
 80057d8:	460a      	mov	r2, r1
 80057da:	3204      	adds	r2, #4
 80057dc:	880e      	ldrh	r6, [r1, #0]
 80057de:	920c      	str	r2, [sp, #48]	; 0x30
 80057e0:	2700      	movs	r7, #0
 80057e2:	e525      	b.n	8005230 <_vfprintf_r+0x23c>
 80057e4:	9308      	str	r3, [sp, #32]
 80057e6:	4b34      	ldr	r3, [pc, #208]	; (80058b8 <_vfprintf_r+0x8c4>)
 80057e8:	9314      	str	r3, [sp, #80]	; 0x50
 80057ea:	9b06      	ldr	r3, [sp, #24]
 80057ec:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80057f0:	0699      	lsls	r1, r3, #26
 80057f2:	46b2      	mov	sl, r6
 80057f4:	f53f aeb1 	bmi.w	800555a <_vfprintf_r+0x566>
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	06da      	lsls	r2, r3, #27
 80057fc:	f140 83c6 	bpl.w	8005f8c <_vfprintf_r+0xf98>
 8005800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005802:	4613      	mov	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	6816      	ldr	r6, [r2, #0]
 8005808:	930c      	str	r3, [sp, #48]	; 0x30
 800580a:	2700      	movs	r7, #0
 800580c:	e6ae      	b.n	800556c <_vfprintf_r+0x578>
 800580e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005810:	9308      	str	r3, [sp, #32]
 8005812:	680a      	ldr	r2, [r1, #0]
 8005814:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8005818:	2300      	movs	r3, #0
 800581a:	2201      	movs	r2, #1
 800581c:	3104      	adds	r1, #4
 800581e:	469c      	mov	ip, r3
 8005820:	9207      	str	r2, [sp, #28]
 8005822:	910c      	str	r1, [sp, #48]	; 0x30
 8005824:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005828:	ab24      	add	r3, sp, #144	; 0x90
 800582a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800582e:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005832:	920b      	str	r2, [sp, #44]	; 0x2c
 8005834:	930e      	str	r3, [sp, #56]	; 0x38
 8005836:	e53b      	b.n	80052b0 <_vfprintf_r+0x2bc>
 8005838:	9308      	str	r3, [sp, #32]
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	f043 0310 	orr.w	r3, r3, #16
 8005840:	9306      	str	r3, [sp, #24]
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	46b2      	mov	sl, r6
 8005846:	069e      	lsls	r6, r3, #26
 8005848:	f53f ace8 	bmi.w	800521c <_vfprintf_r+0x228>
 800584c:	9b06      	ldr	r3, [sp, #24]
 800584e:	06d8      	lsls	r0, r3, #27
 8005850:	f140 8377 	bpl.w	8005f42 <_vfprintf_r+0xf4e>
 8005854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005856:	4613      	mov	r3, r2
 8005858:	3204      	adds	r2, #4
 800585a:	681e      	ldr	r6, [r3, #0]
 800585c:	920c      	str	r2, [sp, #48]	; 0x30
 800585e:	2301      	movs	r3, #1
 8005860:	2700      	movs	r7, #0
 8005862:	e4e5      	b.n	8005230 <_vfprintf_r+0x23c>
 8005864:	9308      	str	r3, [sp, #32]
 8005866:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800586a:	2d00      	cmp	r5, #0
 800586c:	f43f acbb 	beq.w	80051e6 <_vfprintf_r+0x1f2>
 8005870:	2300      	movs	r3, #0
 8005872:	2201      	movs	r2, #1
 8005874:	469c      	mov	ip, r3
 8005876:	9207      	str	r2, [sp, #28]
 8005878:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 800587c:	e7d2      	b.n	8005824 <_vfprintf_r+0x830>
 800587e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005882:	e561      	b.n	8005348 <_vfprintf_r+0x354>
 8005884:	2b01      	cmp	r3, #1
 8005886:	f47f aceb 	bne.w	8005260 <_vfprintf_r+0x26c>
 800588a:	2f00      	cmp	r7, #0
 800588c:	bf08      	it	eq
 800588e:	2e0a      	cmpeq	r6, #10
 8005890:	f080 81ef 	bcs.w	8005c72 <_vfprintf_r+0xc7e>
 8005894:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8005898:	3630      	adds	r6, #48	; 0x30
 800589a:	f80b 6d41 	strb.w	r6, [fp, #-65]!
 800589e:	ab2e      	add	r3, sp, #184	; 0xb8
 80058a0:	ebcb 0303 	rsb	r3, fp, r3
 80058a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058a6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80058aa:	e4f3      	b.n	8005294 <_vfprintf_r+0x2a0>
 80058ac:	08009ee0 	.word	0x08009ee0
 80058b0:	08009edc 	.word	0x08009edc
 80058b4:	08009eb0 	.word	0x08009eb0
 80058b8:	08009e9c 	.word	0x08009e9c
 80058bc:	2d65      	cmp	r5, #101	; 0x65
 80058be:	f340 808a 	ble.w	80059d6 <_vfprintf_r+0x9e2>
 80058c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80058c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80058c6:	2200      	movs	r2, #0
 80058c8:	2300      	movs	r3, #0
 80058ca:	f7fb f91f 	bl	8000b0c <__aeabi_dcmpeq>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f000 8131 	beq.w	8005b36 <_vfprintf_r+0xb42>
 80058d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058d6:	4aba      	ldr	r2, [pc, #744]	; (8005bc0 <_vfprintf_r+0xbcc>)
 80058d8:	6022      	str	r2, [r4, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	f10b 0b01 	add.w	fp, fp, #1
 80058e0:	2201      	movs	r2, #1
 80058e2:	2b07      	cmp	r3, #7
 80058e4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80058e8:	9322      	str	r3, [sp, #136]	; 0x88
 80058ea:	6062      	str	r2, [r4, #4]
 80058ec:	f300 8367 	bgt.w	8005fbe <_vfprintf_r+0xfca>
 80058f0:	3408      	adds	r4, #8
 80058f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80058f6:	4293      	cmp	r3, r2
 80058f8:	db03      	blt.n	8005902 <_vfprintf_r+0x90e>
 80058fa:	9b06      	ldr	r3, [sp, #24]
 80058fc:	07df      	lsls	r7, r3, #31
 80058fe:	f57f ad96 	bpl.w	800542e <_vfprintf_r+0x43a>
 8005902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005904:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005906:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005908:	6022      	str	r2, [r4, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	448b      	add	fp, r1
 800590e:	2b07      	cmp	r3, #7
 8005910:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005914:	6061      	str	r1, [r4, #4]
 8005916:	9322      	str	r3, [sp, #136]	; 0x88
 8005918:	f300 83d6 	bgt.w	80060c8 <_vfprintf_r+0x10d4>
 800591c:	3408      	adds	r4, #8
 800591e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005920:	1e5d      	subs	r5, r3, #1
 8005922:	2d00      	cmp	r5, #0
 8005924:	f77f ad83 	ble.w	800542e <_vfprintf_r+0x43a>
 8005928:	2d10      	cmp	r5, #16
 800592a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800592c:	4fa5      	ldr	r7, [pc, #660]	; (8005bc4 <_vfprintf_r+0xbd0>)
 800592e:	f340 8195 	ble.w	8005c5c <_vfprintf_r+0xc68>
 8005932:	2610      	movs	r6, #16
 8005934:	465a      	mov	r2, fp
 8005936:	e004      	b.n	8005942 <_vfprintf_r+0x94e>
 8005938:	3408      	adds	r4, #8
 800593a:	3d10      	subs	r5, #16
 800593c:	2d10      	cmp	r5, #16
 800593e:	f340 818c 	ble.w	8005c5a <_vfprintf_r+0xc66>
 8005942:	3301      	adds	r3, #1
 8005944:	3210      	adds	r2, #16
 8005946:	2b07      	cmp	r3, #7
 8005948:	9223      	str	r2, [sp, #140]	; 0x8c
 800594a:	9322      	str	r3, [sp, #136]	; 0x88
 800594c:	6027      	str	r7, [r4, #0]
 800594e:	6066      	str	r6, [r4, #4]
 8005950:	ddf2      	ble.n	8005938 <_vfprintf_r+0x944>
 8005952:	4640      	mov	r0, r8
 8005954:	4649      	mov	r1, r9
 8005956:	aa21      	add	r2, sp, #132	; 0x84
 8005958:	f7fe fd02 	bl	8004360 <__sprint_r>
 800595c:	2800      	cmp	r0, #0
 800595e:	f47f ac49 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005962:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005966:	ac2e      	add	r4, sp, #184	; 0xb8
 8005968:	e7e7      	b.n	800593a <_vfprintf_r+0x946>
 800596a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596c:	9a07      	ldr	r2, [sp, #28]
 800596e:	1a9e      	subs	r6, r3, r2
 8005970:	2e00      	cmp	r6, #0
 8005972:	f77f ad10 	ble.w	8005396 <_vfprintf_r+0x3a2>
 8005976:	2e10      	cmp	r6, #16
 8005978:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800597a:	4f92      	ldr	r7, [pc, #584]	; (8005bc4 <_vfprintf_r+0xbd0>)
 800597c:	dd1f      	ble.n	80059be <_vfprintf_r+0x9ca>
 800597e:	f04f 0a10 	mov.w	sl, #16
 8005982:	465b      	mov	r3, fp
 8005984:	e004      	b.n	8005990 <_vfprintf_r+0x99c>
 8005986:	3e10      	subs	r6, #16
 8005988:	2e10      	cmp	r6, #16
 800598a:	f104 0408 	add.w	r4, r4, #8
 800598e:	dd15      	ble.n	80059bc <_vfprintf_r+0x9c8>
 8005990:	3201      	adds	r2, #1
 8005992:	3310      	adds	r3, #16
 8005994:	2a07      	cmp	r2, #7
 8005996:	9323      	str	r3, [sp, #140]	; 0x8c
 8005998:	9222      	str	r2, [sp, #136]	; 0x88
 800599a:	e884 0480 	stmia.w	r4, {r7, sl}
 800599e:	ddf2      	ble.n	8005986 <_vfprintf_r+0x992>
 80059a0:	4640      	mov	r0, r8
 80059a2:	4649      	mov	r1, r9
 80059a4:	aa21      	add	r2, sp, #132	; 0x84
 80059a6:	f7fe fcdb 	bl	8004360 <__sprint_r>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f47f ac22 	bne.w	80051f4 <_vfprintf_r+0x200>
 80059b0:	3e10      	subs	r6, #16
 80059b2:	2e10      	cmp	r6, #16
 80059b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059b8:	ac2e      	add	r4, sp, #184	; 0xb8
 80059ba:	dce9      	bgt.n	8005990 <_vfprintf_r+0x99c>
 80059bc:	469b      	mov	fp, r3
 80059be:	3201      	adds	r2, #1
 80059c0:	44b3      	add	fp, r6
 80059c2:	2a07      	cmp	r2, #7
 80059c4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80059c8:	9222      	str	r2, [sp, #136]	; 0x88
 80059ca:	6027      	str	r7, [r4, #0]
 80059cc:	6066      	str	r6, [r4, #4]
 80059ce:	f300 8219 	bgt.w	8005e04 <_vfprintf_r+0xe10>
 80059d2:	3408      	adds	r4, #8
 80059d4:	e4df      	b.n	8005396 <_vfprintf_r+0x3a2>
 80059d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059d8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80059da:	2b01      	cmp	r3, #1
 80059dc:	f340 81d4 	ble.w	8005d88 <_vfprintf_r+0xd94>
 80059e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	3501      	adds	r5, #1
 80059e6:	f10b 0601 	add.w	r6, fp, #1
 80059ea:	2301      	movs	r3, #1
 80059ec:	2d07      	cmp	r5, #7
 80059ee:	9623      	str	r6, [sp, #140]	; 0x8c
 80059f0:	9522      	str	r5, [sp, #136]	; 0x88
 80059f2:	6063      	str	r3, [r4, #4]
 80059f4:	f300 81e4 	bgt.w	8005dc0 <_vfprintf_r+0xdcc>
 80059f8:	3408      	adds	r4, #8
 80059fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80059fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059fe:	6023      	str	r3, [r4, #0]
 8005a00:	3501      	adds	r5, #1
 8005a02:	4416      	add	r6, r2
 8005a04:	2d07      	cmp	r5, #7
 8005a06:	9623      	str	r6, [sp, #140]	; 0x8c
 8005a08:	9522      	str	r5, [sp, #136]	; 0x88
 8005a0a:	6062      	str	r2, [r4, #4]
 8005a0c:	f300 81e4 	bgt.w	8005dd8 <_vfprintf_r+0xde4>
 8005a10:	3408      	adds	r4, #8
 8005a12:	2300      	movs	r3, #0
 8005a14:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005a16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f7fb f877 	bl	8000b0c <__aeabi_dcmpeq>
 8005a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a20:	2800      	cmp	r0, #0
 8005a22:	f040 80e0 	bne.w	8005be6 <_vfprintf_r+0xbf2>
 8005a26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	3501      	adds	r5, #1
 8005a2c:	3201      	adds	r2, #1
 8005a2e:	441e      	add	r6, r3
 8005a30:	2d07      	cmp	r5, #7
 8005a32:	9522      	str	r5, [sp, #136]	; 0x88
 8005a34:	9623      	str	r6, [sp, #140]	; 0x8c
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	f300 81b5 	bgt.w	8005da8 <_vfprintf_r+0xdb4>
 8005a3e:	3408      	adds	r4, #8
 8005a40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a42:	6062      	str	r2, [r4, #4]
 8005a44:	3501      	adds	r5, #1
 8005a46:	eb06 0b02 	add.w	fp, r6, r2
 8005a4a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a4c:	2d07      	cmp	r5, #7
 8005a4e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005a52:	9522      	str	r5, [sp, #136]	; 0x88
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	f77f ace9 	ble.w	800542c <_vfprintf_r+0x438>
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	aa21      	add	r2, sp, #132	; 0x84
 8005a60:	f7fe fc7e 	bl	8004360 <__sprint_r>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	f47f abc5 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005a6a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005a6e:	ac2e      	add	r4, sp, #184	; 0xb8
 8005a70:	e4dd      	b.n	800542e <_vfprintf_r+0x43a>
 8005a72:	4640      	mov	r0, r8
 8005a74:	4649      	mov	r1, r9
 8005a76:	aa21      	add	r2, sp, #132	; 0x84
 8005a78:	f7fe fc72 	bl	8004360 <__sprint_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f43f ad20 	beq.w	80054c2 <_vfprintf_r+0x4ce>
 8005a82:	f7ff bbb7 	b.w	80051f4 <_vfprintf_r+0x200>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d133      	bne.n	8005af2 <_vfprintf_r+0xafe>
 8005a8a:	9b06      	ldr	r3, [sp, #24]
 8005a8c:	07da      	lsls	r2, r3, #31
 8005a8e:	d530      	bpl.n	8005af2 <_vfprintf_r+0xafe>
 8005a90:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8005a94:	2330      	movs	r3, #48	; 0x30
 8005a96:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8005a9a:	ab2e      	add	r3, sp, #184	; 0xb8
 8005a9c:	ebcb 0303 	rsb	r3, fp, r3
 8005aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005aa6:	f7ff bbf5 	b.w	8005294 <_vfprintf_r+0x2a0>
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	aa21      	add	r2, sp, #132	; 0x84
 8005ab0:	f7fe fc56 	bl	8004360 <__sprint_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f47f ab9d 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005aba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005abe:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ac0:	e4a3      	b.n	800540a <_vfprintf_r+0x416>
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	aa21      	add	r2, sp, #132	; 0x84
 8005ac8:	f7fe fc4a 	bl	8004360 <__sprint_r>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f47f ab91 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005ad2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005ad6:	ac2e      	add	r4, sp, #184	; 0xb8
 8005ad8:	e45a      	b.n	8005390 <_vfprintf_r+0x39c>
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	aa21      	add	r2, sp, #132	; 0x84
 8005ae0:	f7fe fc3e 	bl	8004360 <__sprint_r>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f47f ab85 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005aea:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005aee:	ac2e      	add	r4, sp, #184	; 0xb8
 8005af0:	e43d      	b.n	800536e <_vfprintf_r+0x37a>
 8005af2:	ab2e      	add	r3, sp, #184	; 0xb8
 8005af4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005af8:	930e      	str	r3, [sp, #56]	; 0x38
 8005afa:	f7ff bbcb 	b.w	8005294 <_vfprintf_r+0x2a0>
 8005afe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005b00:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 8005b04:	0933      	lsrs	r3, r6, #4
 8005b06:	f006 010f 	and.w	r1, r6, #15
 8005b0a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005b0e:	093a      	lsrs	r2, r7, #4
 8005b10:	461e      	mov	r6, r3
 8005b12:	4617      	mov	r7, r2
 8005b14:	5c43      	ldrb	r3, [r0, r1]
 8005b16:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8005b1a:	ea56 0307 	orrs.w	r3, r6, r7
 8005b1e:	d1f1      	bne.n	8005b04 <_vfprintf_r+0xb10>
 8005b20:	465a      	mov	r2, fp
 8005b22:	ab2e      	add	r3, sp, #184	; 0xb8
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b2c:	f7ff bbb2 	b.w	8005294 <_vfprintf_r+0x2a0>
 8005b30:	2302      	movs	r3, #2
 8005b32:	f7ff bb7d 	b.w	8005230 <_vfprintf_r+0x23c>
 8005b36:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	f340 824c 	ble.w	8005fd6 <_vfprintf_r+0xfe2>
 8005b3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b40:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b42:	428a      	cmp	r2, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	bfa8      	it	ge
 8005b48:	460b      	movge	r3, r1
 8005b4a:	461d      	mov	r5, r3
 8005b4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	eb01 0a02 	add.w	sl, r1, r2
 8005b54:	dd0b      	ble.n	8005b6e <_vfprintf_r+0xb7a>
 8005b56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b58:	6021      	str	r1, [r4, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	44ab      	add	fp, r5
 8005b5e:	2b07      	cmp	r3, #7
 8005b60:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005b64:	6065      	str	r5, [r4, #4]
 8005b66:	9322      	str	r3, [sp, #136]	; 0x88
 8005b68:	f300 8300 	bgt.w	800616c <_vfprintf_r+0x1178>
 8005b6c:	3408      	adds	r4, #8
 8005b6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b70:	2d00      	cmp	r5, #0
 8005b72:	bfa8      	it	ge
 8005b74:	1b5b      	subge	r3, r3, r5
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	461d      	mov	r5, r3
 8005b7a:	f340 80af 	ble.w	8005cdc <_vfprintf_r+0xce8>
 8005b7e:	2d10      	cmp	r5, #16
 8005b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b82:	4f10      	ldr	r7, [pc, #64]	; (8005bc4 <_vfprintf_r+0xbd0>)
 8005b84:	f340 820f 	ble.w	8005fa6 <_vfprintf_r+0xfb2>
 8005b88:	2610      	movs	r6, #16
 8005b8a:	465a      	mov	r2, fp
 8005b8c:	e004      	b.n	8005b98 <_vfprintf_r+0xba4>
 8005b8e:	3408      	adds	r4, #8
 8005b90:	3d10      	subs	r5, #16
 8005b92:	2d10      	cmp	r5, #16
 8005b94:	f340 8206 	ble.w	8005fa4 <_vfprintf_r+0xfb0>
 8005b98:	3301      	adds	r3, #1
 8005b9a:	3210      	adds	r2, #16
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ba0:	9322      	str	r3, [sp, #136]	; 0x88
 8005ba2:	6027      	str	r7, [r4, #0]
 8005ba4:	6066      	str	r6, [r4, #4]
 8005ba6:	ddf2      	ble.n	8005b8e <_vfprintf_r+0xb9a>
 8005ba8:	4640      	mov	r0, r8
 8005baa:	4649      	mov	r1, r9
 8005bac:	aa21      	add	r2, sp, #132	; 0x84
 8005bae:	f7fe fbd7 	bl	8004360 <__sprint_r>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f47f ab1e 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005bb8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bbc:	ac2e      	add	r4, sp, #184	; 0xb8
 8005bbe:	e7e7      	b.n	8005b90 <_vfprintf_r+0xb9c>
 8005bc0:	08009eec 	.word	0x08009eec
 8005bc4:	08009ecc 	.word	0x08009ecc
 8005bc8:	4640      	mov	r0, r8
 8005bca:	4649      	mov	r1, r9
 8005bcc:	aa21      	add	r2, sp, #132	; 0x84
 8005bce:	f7fe fbc7 	bl	8004360 <__sprint_r>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	f47f ab0e 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005bd8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005bdc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005be0:	ac2e      	add	r4, sp, #184	; 0xb8
 8005be2:	f7ff bbb1 	b.w	8005348 <_vfprintf_r+0x354>
 8005be6:	f103 3aff 	add.w	sl, r3, #4294967295
 8005bea:	f1ba 0f00 	cmp.w	sl, #0
 8005bee:	f77f af27 	ble.w	8005a40 <_vfprintf_r+0xa4c>
 8005bf2:	f1ba 0f10 	cmp.w	sl, #16
 8005bf6:	4f90      	ldr	r7, [pc, #576]	; (8005e38 <_vfprintf_r+0xe44>)
 8005bf8:	bfc8      	it	gt
 8005bfa:	f04f 0b10 	movgt.w	fp, #16
 8005bfe:	dc07      	bgt.n	8005c10 <_vfprintf_r+0xc1c>
 8005c00:	e0f6      	b.n	8005df0 <_vfprintf_r+0xdfc>
 8005c02:	3408      	adds	r4, #8
 8005c04:	f1aa 0a10 	sub.w	sl, sl, #16
 8005c08:	f1ba 0f10 	cmp.w	sl, #16
 8005c0c:	f340 80f0 	ble.w	8005df0 <_vfprintf_r+0xdfc>
 8005c10:	3501      	adds	r5, #1
 8005c12:	3610      	adds	r6, #16
 8005c14:	2d07      	cmp	r5, #7
 8005c16:	9623      	str	r6, [sp, #140]	; 0x8c
 8005c18:	9522      	str	r5, [sp, #136]	; 0x88
 8005c1a:	e884 0880 	stmia.w	r4, {r7, fp}
 8005c1e:	ddf0      	ble.n	8005c02 <_vfprintf_r+0xc0e>
 8005c20:	4640      	mov	r0, r8
 8005c22:	4649      	mov	r1, r9
 8005c24:	aa21      	add	r2, sp, #132	; 0x84
 8005c26:	f7fe fb9b 	bl	8004360 <__sprint_r>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f47f aae2 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005c30:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8005c32:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8005c34:	ac2e      	add	r4, sp, #184	; 0xb8
 8005c36:	e7e5      	b.n	8005c04 <_vfprintf_r+0xc10>
 8005c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c3a:	6816      	ldr	r6, [r2, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	3304      	adds	r3, #4
 8005c40:	17f7      	asrs	r7, r6, #31
 8005c42:	930c      	str	r3, [sp, #48]	; 0x30
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	e4cf      	b.n	80055ea <_vfprintf_r+0x5f6>
 8005c4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c4c:	460a      	mov	r2, r1
 8005c4e:	3204      	adds	r2, #4
 8005c50:	680e      	ldr	r6, [r1, #0]
 8005c52:	920c      	str	r2, [sp, #48]	; 0x30
 8005c54:	2700      	movs	r7, #0
 8005c56:	f7ff baeb 	b.w	8005230 <_vfprintf_r+0x23c>
 8005c5a:	4693      	mov	fp, r2
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	44ab      	add	fp, r5
 8005c60:	2b07      	cmp	r3, #7
 8005c62:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005c66:	9322      	str	r3, [sp, #136]	; 0x88
 8005c68:	6027      	str	r7, [r4, #0]
 8005c6a:	6065      	str	r5, [r4, #4]
 8005c6c:	f77f abde 	ble.w	800542c <_vfprintf_r+0x438>
 8005c70:	e6f3      	b.n	8005a5a <_vfprintf_r+0xa66>
 8005c72:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
 8005c76:	f8cd c01c 	str.w	ip, [sp, #28]
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	220a      	movs	r2, #10
 8005c80:	2300      	movs	r3, #0
 8005c82:	f7fa ff9d 	bl	8000bc0 <__aeabi_uldivmod>
 8005c86:	3230      	adds	r2, #48	; 0x30
 8005c88:	4630      	mov	r0, r6
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8005c90:	2300      	movs	r3, #0
 8005c92:	220a      	movs	r2, #10
 8005c94:	f7fa ff94 	bl	8000bc0 <__aeabi_uldivmod>
 8005c98:	4606      	mov	r6, r0
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	ea56 0307 	orrs.w	r3, r6, r7
 8005ca0:	d1eb      	bne.n	8005c7a <_vfprintf_r+0xc86>
 8005ca2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005ca6:	e73b      	b.n	8005b20 <_vfprintf_r+0xb2c>
 8005ca8:	2b30      	cmp	r3, #48	; 0x30
 8005caa:	f000 8219 	beq.w	80060e0 <_vfprintf_r+0x10ec>
 8005cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	a82e      	add	r0, sp, #184	; 0xb8
 8005cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8005cb8:	1a82      	subs	r2, r0, r2
 8005cba:	2330      	movs	r3, #48	; 0x30
 8005cbc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cbe:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005cc2:	f7ff bae7 	b.w	8005294 <_vfprintf_r+0x2a0>
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	4649      	mov	r1, r9
 8005cca:	aa21      	add	r2, sp, #132	; 0x84
 8005ccc:	f7fe fb48 	bl	8004360 <__sprint_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	f47f aa8f 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005cd6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005cda:	ac2e      	add	r4, sp, #184	; 0xb8
 8005cdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cde:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005ce0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ce2:	440a      	add	r2, r1
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	db3e      	blt.n	8005d6a <_vfprintf_r+0xd76>
 8005cec:	9a06      	ldr	r2, [sp, #24]
 8005cee:	07d5      	lsls	r5, r2, #31
 8005cf0:	d43b      	bmi.n	8005d6a <_vfprintf_r+0xd76>
 8005cf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005cf4:	ebc6 050a 	rsb	r5, r6, sl
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	429d      	cmp	r5, r3
 8005cfc:	bfa8      	it	ge
 8005cfe:	461d      	movge	r5, r3
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	462f      	mov	r7, r5
 8005d04:	dd0b      	ble.n	8005d1e <_vfprintf_r+0xd2a>
 8005d06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d08:	6026      	str	r6, [r4, #0]
 8005d0a:	3201      	adds	r2, #1
 8005d0c:	44ab      	add	fp, r5
 8005d0e:	2a07      	cmp	r2, #7
 8005d10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005d14:	6065      	str	r5, [r4, #4]
 8005d16:	9222      	str	r2, [sp, #136]	; 0x88
 8005d18:	f300 825e 	bgt.w	80061d8 <_vfprintf_r+0x11e4>
 8005d1c:	3408      	adds	r4, #8
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	bfac      	ite	ge
 8005d22:	1bdd      	subge	r5, r3, r7
 8005d24:	461d      	movlt	r5, r3
 8005d26:	2d00      	cmp	r5, #0
 8005d28:	f77f ab81 	ble.w	800542e <_vfprintf_r+0x43a>
 8005d2c:	2d10      	cmp	r5, #16
 8005d2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d30:	4f41      	ldr	r7, [pc, #260]	; (8005e38 <_vfprintf_r+0xe44>)
 8005d32:	dd93      	ble.n	8005c5c <_vfprintf_r+0xc68>
 8005d34:	2610      	movs	r6, #16
 8005d36:	465a      	mov	r2, fp
 8005d38:	e003      	b.n	8005d42 <_vfprintf_r+0xd4e>
 8005d3a:	3408      	adds	r4, #8
 8005d3c:	3d10      	subs	r5, #16
 8005d3e:	2d10      	cmp	r5, #16
 8005d40:	dd8b      	ble.n	8005c5a <_vfprintf_r+0xc66>
 8005d42:	3301      	adds	r3, #1
 8005d44:	3210      	adds	r2, #16
 8005d46:	2b07      	cmp	r3, #7
 8005d48:	9223      	str	r2, [sp, #140]	; 0x8c
 8005d4a:	9322      	str	r3, [sp, #136]	; 0x88
 8005d4c:	6027      	str	r7, [r4, #0]
 8005d4e:	6066      	str	r6, [r4, #4]
 8005d50:	ddf3      	ble.n	8005d3a <_vfprintf_r+0xd46>
 8005d52:	4640      	mov	r0, r8
 8005d54:	4649      	mov	r1, r9
 8005d56:	aa21      	add	r2, sp, #132	; 0x84
 8005d58:	f7fe fb02 	bl	8004360 <__sprint_r>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f47f aa49 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005d62:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005d64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d66:	ac2e      	add	r4, sp, #184	; 0xb8
 8005d68:	e7e8      	b.n	8005d3c <_vfprintf_r+0xd48>
 8005d6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d6c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005d6e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005d70:	6021      	str	r1, [r4, #0]
 8005d72:	3201      	adds	r2, #1
 8005d74:	4483      	add	fp, r0
 8005d76:	2a07      	cmp	r2, #7
 8005d78:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005d7c:	6060      	str	r0, [r4, #4]
 8005d7e:	9222      	str	r2, [sp, #136]	; 0x88
 8005d80:	f300 820a 	bgt.w	8006198 <_vfprintf_r+0x11a4>
 8005d84:	3408      	adds	r4, #8
 8005d86:	e7b4      	b.n	8005cf2 <_vfprintf_r+0xcfe>
 8005d88:	9b06      	ldr	r3, [sp, #24]
 8005d8a:	07d8      	lsls	r0, r3, #31
 8005d8c:	f53f ae28 	bmi.w	80059e0 <_vfprintf_r+0x9ec>
 8005d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	3501      	adds	r5, #1
 8005d96:	f10b 0601 	add.w	r6, fp, #1
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	2d07      	cmp	r5, #7
 8005d9e:	9623      	str	r6, [sp, #140]	; 0x8c
 8005da0:	9522      	str	r5, [sp, #136]	; 0x88
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	f77f ae4b 	ble.w	8005a3e <_vfprintf_r+0xa4a>
 8005da8:	4640      	mov	r0, r8
 8005daa:	4649      	mov	r1, r9
 8005dac:	aa21      	add	r2, sp, #132	; 0x84
 8005dae:	f7fe fad7 	bl	8004360 <__sprint_r>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f47f aa1e 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005db8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8005dba:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8005dbc:	ac2e      	add	r4, sp, #184	; 0xb8
 8005dbe:	e63f      	b.n	8005a40 <_vfprintf_r+0xa4c>
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	aa21      	add	r2, sp, #132	; 0x84
 8005dc6:	f7fe facb 	bl	8004360 <__sprint_r>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	f47f aa12 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005dd0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8005dd2:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8005dd4:	ac2e      	add	r4, sp, #184	; 0xb8
 8005dd6:	e610      	b.n	80059fa <_vfprintf_r+0xa06>
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	aa21      	add	r2, sp, #132	; 0x84
 8005dde:	f7fe fabf 	bl	8004360 <__sprint_r>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	f47f aa06 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005de8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8005dea:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8005dec:	ac2e      	add	r4, sp, #184	; 0xb8
 8005dee:	e610      	b.n	8005a12 <_vfprintf_r+0xa1e>
 8005df0:	3501      	adds	r5, #1
 8005df2:	4456      	add	r6, sl
 8005df4:	2d07      	cmp	r5, #7
 8005df6:	9623      	str	r6, [sp, #140]	; 0x8c
 8005df8:	9522      	str	r5, [sp, #136]	; 0x88
 8005dfa:	e884 0480 	stmia.w	r4, {r7, sl}
 8005dfe:	f77f ae1e 	ble.w	8005a3e <_vfprintf_r+0xa4a>
 8005e02:	e7d1      	b.n	8005da8 <_vfprintf_r+0xdb4>
 8005e04:	4640      	mov	r0, r8
 8005e06:	4649      	mov	r1, r9
 8005e08:	aa21      	add	r2, sp, #132	; 0x84
 8005e0a:	f7fe faa9 	bl	8004360 <__sprint_r>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f47f a9f0 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005e14:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005e18:	ac2e      	add	r4, sp, #184	; 0xb8
 8005e1a:	f7ff babc 	b.w	8005396 <_vfprintf_r+0x3a2>
 8005e1e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8005e22:	4276      	negs	r6, r6
 8005e24:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005e28:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8005e2c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8005e30:	2301      	movs	r3, #1
 8005e32:	f7ff ba03 	b.w	800523c <_vfprintf_r+0x248>
 8005e36:	bf00      	nop
 8005e38:	08009ecc 	.word	0x08009ecc
 8005e3c:	f003 f8d4 	bl	8008fe8 <__fpclassifyd>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	f000 810d 	beq.w	8006060 <_vfprintf_r+0x106c>
 8005e46:	f025 0320 	bic.w	r3, r5, #32
 8005e4a:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e50:	f000 8258 	beq.w	8006304 <_vfprintf_r+0x1310>
 8005e54:	2b47      	cmp	r3, #71	; 0x47
 8005e56:	d104      	bne.n	8005e62 <_vfprintf_r+0xe6e>
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	bf14      	ite	ne
 8005e5c:	46b3      	movne	fp, r6
 8005e5e:	f04f 0b01 	moveq.w	fp, #1
 8005e62:	9b06      	ldr	r3, [sp, #24]
 8005e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e6c:	f1b3 0a00 	subs.w	sl, r3, #0
 8005e70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e72:	9307      	str	r3, [sp, #28]
 8005e74:	bfbb      	ittet	lt
 8005e76:	4653      	movlt	r3, sl
 8005e78:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
 8005e7c:	2300      	movge	r3, #0
 8005e7e:	232d      	movlt	r3, #45	; 0x2d
 8005e80:	2d66      	cmp	r5, #102	; 0x66
 8005e82:	930d      	str	r3, [sp, #52]	; 0x34
 8005e84:	f000 8154 	beq.w	8006130 <_vfprintf_r+0x113c>
 8005e88:	2d46      	cmp	r5, #70	; 0x46
 8005e8a:	f000 8151 	beq.w	8006130 <_vfprintf_r+0x113c>
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e90:	9a07      	ldr	r2, [sp, #28]
 8005e92:	2b45      	cmp	r3, #69	; 0x45
 8005e94:	bf0c      	ite	eq
 8005e96:	f10b 0701 	addeq.w	r7, fp, #1
 8005e9a:	465f      	movne	r7, fp
 8005e9c:	2002      	movs	r0, #2
 8005e9e:	a91b      	add	r1, sp, #108	; 0x6c
 8005ea0:	e88d 0081 	stmia.w	sp, {r0, r7}
 8005ea4:	9102      	str	r1, [sp, #8]
 8005ea6:	a81c      	add	r0, sp, #112	; 0x70
 8005ea8:	a91f      	add	r1, sp, #124	; 0x7c
 8005eaa:	9003      	str	r0, [sp, #12]
 8005eac:	4653      	mov	r3, sl
 8005eae:	9104      	str	r1, [sp, #16]
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	f000 fbd1 	bl	8006658 <_dtoa_r>
 8005eb6:	2d67      	cmp	r5, #103	; 0x67
 8005eb8:	900e      	str	r0, [sp, #56]	; 0x38
 8005eba:	d002      	beq.n	8005ec2 <_vfprintf_r+0xece>
 8005ebc:	2d47      	cmp	r5, #71	; 0x47
 8005ebe:	f040 8147 	bne.w	8006150 <_vfprintf_r+0x115c>
 8005ec2:	9b06      	ldr	r3, [sp, #24]
 8005ec4:	07db      	lsls	r3, r3, #31
 8005ec6:	f140 823a 	bpl.w	800633e <_vfprintf_r+0x134a>
 8005eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ecc:	19de      	adds	r6, r3, r7
 8005ece:	9807      	ldr	r0, [sp, #28]
 8005ed0:	4651      	mov	r1, sl
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f7fa fe19 	bl	8000b0c <__aeabi_dcmpeq>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	f040 81a3 	bne.w	8006226 <_vfprintf_r+0x1232>
 8005ee0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ee2:	429e      	cmp	r6, r3
 8005ee4:	d906      	bls.n	8005ef4 <_vfprintf_r+0xf00>
 8005ee6:	2130      	movs	r1, #48	; 0x30
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	921f      	str	r2, [sp, #124]	; 0x7c
 8005eec:	7019      	strb	r1, [r3, #0]
 8005eee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ef0:	429e      	cmp	r6, r3
 8005ef2:	d8f9      	bhi.n	8005ee8 <_vfprintf_r+0xef4>
 8005ef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	9311      	str	r3, [sp, #68]	; 0x44
 8005efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005efc:	2b47      	cmp	r3, #71	; 0x47
 8005efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f00:	f000 8179 	beq.w	80061f6 <_vfprintf_r+0x1202>
 8005f04:	2d65      	cmp	r5, #101	; 0x65
 8005f06:	f340 819c 	ble.w	8006242 <_vfprintf_r+0x124e>
 8005f0a:	2d66      	cmp	r5, #102	; 0x66
 8005f0c:	9310      	str	r3, [sp, #64]	; 0x40
 8005f0e:	f000 8209 	beq.w	8006324 <_vfprintf_r+0x1330>
 8005f12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f16:	4293      	cmp	r3, r2
 8005f18:	f300 81f7 	bgt.w	800630a <_vfprintf_r+0x1316>
 8005f1c:	9b06      	ldr	r3, [sp, #24]
 8005f1e:	07d9      	lsls	r1, r3, #31
 8005f20:	f100 8217 	bmi.w	8006352 <_vfprintf_r+0x135e>
 8005f24:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005f28:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f2c:	2a00      	cmp	r2, #0
 8005f2e:	f040 8169 	bne.w	8006204 <_vfprintf_r+0x1210>
 8005f32:	9307      	str	r3, [sp, #28]
 8005f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f36:	9306      	str	r3, [sp, #24]
 8005f38:	920f      	str	r2, [sp, #60]	; 0x3c
 8005f3a:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8005f3e:	f7ff b9b1 	b.w	80052a4 <_vfprintf_r+0x2b0>
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f46:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	f43f ac84 	beq.w	8005858 <_vfprintf_r+0x864>
 8005f50:	8816      	ldrh	r6, [r2, #0]
 8005f52:	3204      	adds	r2, #4
 8005f54:	2700      	movs	r7, #0
 8005f56:	2301      	movs	r3, #1
 8005f58:	920c      	str	r2, [sp, #48]	; 0x30
 8005f5a:	f7ff b969 	b.w	8005230 <_vfprintf_r+0x23c>
 8005f5e:	9b06      	ldr	r3, [sp, #24]
 8005f60:	06db      	lsls	r3, r3, #27
 8005f62:	d40b      	bmi.n	8005f7c <_vfprintf_r+0xf88>
 8005f64:	9b06      	ldr	r3, [sp, #24]
 8005f66:	065f      	lsls	r7, r3, #25
 8005f68:	d508      	bpl.n	8005f7c <_vfprintf_r+0xf88>
 8005f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f6c:	6813      	ldr	r3, [r2, #0]
 8005f6e:	3204      	adds	r2, #4
 8005f70:	920c      	str	r2, [sp, #48]	; 0x30
 8005f72:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	f7ff b87d 	b.w	8005076 <_vfprintf_r+0x82>
 8005f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	3204      	adds	r2, #4
 8005f82:	920c      	str	r2, [sp, #48]	; 0x30
 8005f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f7ff b875 	b.w	8005076 <_vfprintf_r+0x82>
 8005f8c:	9b06      	ldr	r3, [sp, #24]
 8005f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f94:	4613      	mov	r3, r2
 8005f96:	d076      	beq.n	8006086 <_vfprintf_r+0x1092>
 8005f98:	3304      	adds	r3, #4
 8005f9a:	8816      	ldrh	r6, [r2, #0]
 8005f9c:	930c      	str	r3, [sp, #48]	; 0x30
 8005f9e:	2700      	movs	r7, #0
 8005fa0:	f7ff bae4 	b.w	800556c <_vfprintf_r+0x578>
 8005fa4:	4693      	mov	fp, r2
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	44ab      	add	fp, r5
 8005faa:	2b07      	cmp	r3, #7
 8005fac:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005fb0:	9322      	str	r3, [sp, #136]	; 0x88
 8005fb2:	6027      	str	r7, [r4, #0]
 8005fb4:	6065      	str	r5, [r4, #4]
 8005fb6:	f73f ae86 	bgt.w	8005cc6 <_vfprintf_r+0xcd2>
 8005fba:	3408      	adds	r4, #8
 8005fbc:	e68e      	b.n	8005cdc <_vfprintf_r+0xce8>
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	aa21      	add	r2, sp, #132	; 0x84
 8005fc4:	f7fe f9cc 	bl	8004360 <__sprint_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f47f a913 	bne.w	80051f4 <_vfprintf_r+0x200>
 8005fce:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005fd2:	ac2e      	add	r4, sp, #184	; 0xb8
 8005fd4:	e48d      	b.n	80058f2 <_vfprintf_r+0x8fe>
 8005fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fd8:	4ab0      	ldr	r2, [pc, #704]	; (800629c <_vfprintf_r+0x12a8>)
 8005fda:	6022      	str	r2, [r4, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	f10b 0b01 	add.w	fp, fp, #1
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	2b07      	cmp	r3, #7
 8005fe6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005fea:	9322      	str	r3, [sp, #136]	; 0x88
 8005fec:	6062      	str	r2, [r4, #4]
 8005fee:	dc50      	bgt.n	8006092 <_vfprintf_r+0x109e>
 8005ff0:	3408      	adds	r4, #8
 8005ff2:	b92d      	cbnz	r5, 8006000 <_vfprintf_r+0x100c>
 8005ff4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ff6:	b91b      	cbnz	r3, 8006000 <_vfprintf_r+0x100c>
 8005ff8:	9b06      	ldr	r3, [sp, #24]
 8005ffa:	07de      	lsls	r6, r3, #31
 8005ffc:	f57f aa17 	bpl.w	800542e <_vfprintf_r+0x43a>
 8006000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006002:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006004:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006006:	6022      	str	r2, [r4, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	eb0b 0201 	add.w	r2, fp, r1
 800600e:	2b07      	cmp	r3, #7
 8006010:	9223      	str	r2, [sp, #140]	; 0x8c
 8006012:	6061      	str	r1, [r4, #4]
 8006014:	9322      	str	r3, [sp, #136]	; 0x88
 8006016:	f300 8168 	bgt.w	80062ea <_vfprintf_r+0x12f6>
 800601a:	3408      	adds	r4, #8
 800601c:	426d      	negs	r5, r5
 800601e:	2d00      	cmp	r5, #0
 8006020:	dd6f      	ble.n	8006102 <_vfprintf_r+0x110e>
 8006022:	2d10      	cmp	r5, #16
 8006024:	4f9e      	ldr	r7, [pc, #632]	; (80062a0 <_vfprintf_r+0x12ac>)
 8006026:	bfc8      	it	gt
 8006028:	2610      	movgt	r6, #16
 800602a:	dc05      	bgt.n	8006038 <_vfprintf_r+0x1044>
 800602c:	e0aa      	b.n	8006184 <_vfprintf_r+0x1190>
 800602e:	3408      	adds	r4, #8
 8006030:	3d10      	subs	r5, #16
 8006032:	2d10      	cmp	r5, #16
 8006034:	f340 80a6 	ble.w	8006184 <_vfprintf_r+0x1190>
 8006038:	3301      	adds	r3, #1
 800603a:	3210      	adds	r2, #16
 800603c:	2b07      	cmp	r3, #7
 800603e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006040:	9322      	str	r3, [sp, #136]	; 0x88
 8006042:	6027      	str	r7, [r4, #0]
 8006044:	6066      	str	r6, [r4, #4]
 8006046:	ddf2      	ble.n	800602e <_vfprintf_r+0x103a>
 8006048:	4640      	mov	r0, r8
 800604a:	4649      	mov	r1, r9
 800604c:	aa21      	add	r2, sp, #132	; 0x84
 800604e:	f7fe f987 	bl	8004360 <__sprint_r>
 8006052:	2800      	cmp	r0, #0
 8006054:	f47f a8ce 	bne.w	80051f4 <_vfprintf_r+0x200>
 8006058:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800605a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800605c:	ac2e      	add	r4, sp, #184	; 0xb8
 800605e:	e7e7      	b.n	8006030 <_vfprintf_r+0x103c>
 8006060:	9e06      	ldr	r6, [sp, #24]
 8006062:	4a90      	ldr	r2, [pc, #576]	; (80062a4 <_vfprintf_r+0x12b0>)
 8006064:	4b90      	ldr	r3, [pc, #576]	; (80062a8 <_vfprintf_r+0x12b4>)
 8006066:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800606a:	900f      	str	r0, [sp, #60]	; 0x3c
 800606c:	2103      	movs	r1, #3
 800606e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8006072:	2d47      	cmp	r5, #71	; 0x47
 8006074:	bfd8      	it	le
 8006076:	461a      	movle	r2, r3
 8006078:	9107      	str	r1, [sp, #28]
 800607a:	9606      	str	r6, [sp, #24]
 800607c:	9010      	str	r0, [sp, #64]	; 0x40
 800607e:	920e      	str	r2, [sp, #56]	; 0x38
 8006080:	910b      	str	r1, [sp, #44]	; 0x2c
 8006082:	f7ff b90f 	b.w	80052a4 <_vfprintf_r+0x2b0>
 8006086:	3304      	adds	r3, #4
 8006088:	6816      	ldr	r6, [r2, #0]
 800608a:	930c      	str	r3, [sp, #48]	; 0x30
 800608c:	2700      	movs	r7, #0
 800608e:	f7ff ba6d 	b.w	800556c <_vfprintf_r+0x578>
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	aa21      	add	r2, sp, #132	; 0x84
 8006098:	f7fe f962 	bl	8004360 <__sprint_r>
 800609c:	2800      	cmp	r0, #0
 800609e:	f47f a8a9 	bne.w	80051f4 <_vfprintf_r+0x200>
 80060a2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80060a4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80060a8:	ac2e      	add	r4, sp, #184	; 0xb8
 80060aa:	e7a2      	b.n	8005ff2 <_vfprintf_r+0xffe>
 80060ac:	f041 0120 	orr.w	r1, r1, #32
 80060b0:	9106      	str	r1, [sp, #24]
 80060b2:	785d      	ldrb	r5, [r3, #1]
 80060b4:	1c59      	adds	r1, r3, #1
 80060b6:	f7ff b80e 	b.w	80050d6 <_vfprintf_r+0xe2>
 80060ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060bc:	910c      	str	r1, [sp, #48]	; 0x30
 80060be:	4240      	negs	r0, r0
 80060c0:	900a      	str	r0, [sp, #40]	; 0x28
 80060c2:	4619      	mov	r1, r3
 80060c4:	f7ff ba02 	b.w	80054cc <_vfprintf_r+0x4d8>
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	aa21      	add	r2, sp, #132	; 0x84
 80060ce:	f7fe f947 	bl	8004360 <__sprint_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	f47f a88e 	bne.w	80051f4 <_vfprintf_r+0x200>
 80060d8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80060dc:	ac2e      	add	r4, sp, #184	; 0xb8
 80060de:	e41e      	b.n	800591e <_vfprintf_r+0x92a>
 80060e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060e2:	ab2e      	add	r3, sp, #184	; 0xb8
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80060e8:	f7ff b8d4 	b.w	8005294 <_vfprintf_r+0x2a0>
 80060ec:	4640      	mov	r0, r8
 80060ee:	4649      	mov	r1, r9
 80060f0:	aa21      	add	r2, sp, #132	; 0x84
 80060f2:	f7fe f935 	bl	8004360 <__sprint_r>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f47f a87c 	bne.w	80051f4 <_vfprintf_r+0x200>
 80060fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80060fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006100:	ac2e      	add	r4, sp, #184	; 0xb8
 8006102:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006104:	6060      	str	r0, [r4, #4]
 8006106:	3301      	adds	r3, #1
 8006108:	eb02 0b00 	add.w	fp, r2, r0
 800610c:	2b07      	cmp	r3, #7
 800610e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006110:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006114:	9322      	str	r3, [sp, #136]	; 0x88
 8006116:	6022      	str	r2, [r4, #0]
 8006118:	f77f a988 	ble.w	800542c <_vfprintf_r+0x438>
 800611c:	e49d      	b.n	8005a5a <_vfprintf_r+0xa66>
 800611e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8006122:	f7fe f8b3 	bl	800428c <strlen>
 8006126:	970c      	str	r7, [sp, #48]	; 0x30
 8006128:	900b      	str	r0, [sp, #44]	; 0x2c
 800612a:	4603      	mov	r3, r0
 800612c:	f7ff ba03 	b.w	8005536 <_vfprintf_r+0x542>
 8006130:	2003      	movs	r0, #3
 8006132:	a91b      	add	r1, sp, #108	; 0x6c
 8006134:	e88d 0801 	stmia.w	sp, {r0, fp}
 8006138:	9102      	str	r1, [sp, #8]
 800613a:	a81c      	add	r0, sp, #112	; 0x70
 800613c:	a91f      	add	r1, sp, #124	; 0x7c
 800613e:	9003      	str	r0, [sp, #12]
 8006140:	9a07      	ldr	r2, [sp, #28]
 8006142:	9104      	str	r1, [sp, #16]
 8006144:	4653      	mov	r3, sl
 8006146:	4640      	mov	r0, r8
 8006148:	f000 fa86 	bl	8006658 <_dtoa_r>
 800614c:	465f      	mov	r7, fp
 800614e:	900e      	str	r0, [sp, #56]	; 0x38
 8006150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006152:	19de      	adds	r6, r3, r7
 8006154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006156:	2b46      	cmp	r3, #70	; 0x46
 8006158:	f47f aeb9 	bne.w	8005ece <_vfprintf_r+0xeda>
 800615c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b30      	cmp	r3, #48	; 0x30
 8006162:	f000 80fc 	beq.w	800635e <_vfprintf_r+0x136a>
 8006166:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006168:	443e      	add	r6, r7
 800616a:	e6b0      	b.n	8005ece <_vfprintf_r+0xeda>
 800616c:	4640      	mov	r0, r8
 800616e:	4649      	mov	r1, r9
 8006170:	aa21      	add	r2, sp, #132	; 0x84
 8006172:	f7fe f8f5 	bl	8004360 <__sprint_r>
 8006176:	2800      	cmp	r0, #0
 8006178:	f47f a83c 	bne.w	80051f4 <_vfprintf_r+0x200>
 800617c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006180:	ac2e      	add	r4, sp, #184	; 0xb8
 8006182:	e4f4      	b.n	8005b6e <_vfprintf_r+0xb7a>
 8006184:	3301      	adds	r3, #1
 8006186:	442a      	add	r2, r5
 8006188:	2b07      	cmp	r3, #7
 800618a:	9223      	str	r2, [sp, #140]	; 0x8c
 800618c:	9322      	str	r3, [sp, #136]	; 0x88
 800618e:	6027      	str	r7, [r4, #0]
 8006190:	6065      	str	r5, [r4, #4]
 8006192:	dcab      	bgt.n	80060ec <_vfprintf_r+0x10f8>
 8006194:	3408      	adds	r4, #8
 8006196:	e7b4      	b.n	8006102 <_vfprintf_r+0x110e>
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	aa21      	add	r2, sp, #132	; 0x84
 800619e:	f7fe f8df 	bl	8004360 <__sprint_r>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	f47f a826 	bne.w	80051f4 <_vfprintf_r+0x200>
 80061a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80061ae:	ac2e      	add	r4, sp, #184	; 0xb8
 80061b0:	e59f      	b.n	8005cf2 <_vfprintf_r+0xcfe>
 80061b2:	2e06      	cmp	r6, #6
 80061b4:	4633      	mov	r3, r6
 80061b6:	bf28      	it	cs
 80061b8:	2306      	movcs	r3, #6
 80061ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80061bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80061c0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80061c4:	9307      	str	r3, [sp, #28]
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <_vfprintf_r+0x12b8>)
 80061c8:	970c      	str	r7, [sp, #48]	; 0x30
 80061ca:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80061ce:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80061d2:	930e      	str	r3, [sp, #56]	; 0x38
 80061d4:	f7ff b866 	b.w	80052a4 <_vfprintf_r+0x2b0>
 80061d8:	4640      	mov	r0, r8
 80061da:	4649      	mov	r1, r9
 80061dc:	aa21      	add	r2, sp, #132	; 0x84
 80061de:	f7fe f8bf 	bl	8004360 <__sprint_r>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f47f a806 	bne.w	80051f4 <_vfprintf_r+0x200>
 80061e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80061ec:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	ac2e      	add	r4, sp, #184	; 0xb8
 80061f4:	e593      	b.n	8005d1e <_vfprintf_r+0xd2a>
 80061f6:	1cdf      	adds	r7, r3, #3
 80061f8:	db22      	blt.n	8006240 <_vfprintf_r+0x124c>
 80061fa:	459b      	cmp	fp, r3
 80061fc:	db20      	blt.n	8006240 <_vfprintf_r+0x124c>
 80061fe:	9310      	str	r3, [sp, #64]	; 0x40
 8006200:	2567      	movs	r5, #103	; 0x67
 8006202:	e686      	b.n	8005f12 <_vfprintf_r+0xf1e>
 8006204:	9307      	str	r3, [sp, #28]
 8006206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006208:	9306      	str	r3, [sp, #24]
 800620a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800620e:	2300      	movs	r3, #0
 8006210:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8006214:	930f      	str	r3, [sp, #60]	; 0x3c
 8006216:	f7ff b848 	b.w	80052aa <_vfprintf_r+0x2b6>
 800621a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800621e:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8006222:	f7ff ba0e 	b.w	8005642 <_vfprintf_r+0x64e>
 8006226:	4633      	mov	r3, r6
 8006228:	e664      	b.n	8005ef4 <_vfprintf_r+0xf00>
 800622a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 800622e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006230:	970c      	str	r7, [sp, #48]	; 0x30
 8006232:	9010      	str	r0, [sp, #64]	; 0x40
 8006234:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	960b      	str	r6, [sp, #44]	; 0x2c
 800623c:	f7ff b832 	b.w	80052a4 <_vfprintf_r+0x2b0>
 8006240:	3d02      	subs	r5, #2
 8006242:	3b01      	subs	r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	931b      	str	r3, [sp, #108]	; 0x6c
 8006248:	bfba      	itte	lt
 800624a:	425b      	neglt	r3, r3
 800624c:	222d      	movlt	r2, #45	; 0x2d
 800624e:	222b      	movge	r2, #43	; 0x2b
 8006250:	2b09      	cmp	r3, #9
 8006252:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8006256:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800625a:	dd72      	ble.n	8006342 <_vfprintf_r+0x134e>
 800625c:	f10d 0683 	add.w	r6, sp, #131	; 0x83
 8006260:	4630      	mov	r0, r6
 8006262:	4a13      	ldr	r2, [pc, #76]	; (80062b0 <_vfprintf_r+0x12bc>)
 8006264:	fb82 2103 	smull	r2, r1, r2, r3
 8006268:	17da      	asrs	r2, r3, #31
 800626a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800626e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006272:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8006276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800627a:	2a09      	cmp	r2, #9
 800627c:	4613      	mov	r3, r2
 800627e:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8006282:	dcee      	bgt.n	8006262 <_vfprintf_r+0x126e>
 8006284:	4602      	mov	r2, r0
 8006286:	3330      	adds	r3, #48	; 0x30
 8006288:	b2d9      	uxtb	r1, r3
 800628a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800628e:	4296      	cmp	r6, r2
 8006290:	f240 80a0 	bls.w	80063d4 <_vfprintf_r+0x13e0>
 8006294:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8006298:	4603      	mov	r3, r0
 800629a:	e00d      	b.n	80062b8 <_vfprintf_r+0x12c4>
 800629c:	08009eec 	.word	0x08009eec
 80062a0:	08009ecc 	.word	0x08009ecc
 80062a4:	08009ee8 	.word	0x08009ee8
 80062a8:	08009ee4 	.word	0x08009ee4
 80062ac:	08009ec4 	.word	0x08009ec4
 80062b0:	66666667 	.word	0x66666667
 80062b4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80062b8:	f802 1b01 	strb.w	r1, [r2], #1
 80062bc:	42b3      	cmp	r3, r6
 80062be:	d1f9      	bne.n	80062b4 <_vfprintf_r+0x12c0>
 80062c0:	ab21      	add	r3, sp, #132	; 0x84
 80062c2:	1a1b      	subs	r3, r3, r0
 80062c4:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 80062c8:	4413      	add	r3, r2
 80062ca:	aa1d      	add	r2, sp, #116	; 0x74
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80062d2:	2a01      	cmp	r2, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062d8:	dd6d      	ble.n	80063b6 <_vfprintf_r+0x13c2>
 80062da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062dc:	2200      	movs	r2, #0
 80062de:	3301      	adds	r3, #1
 80062e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e2:	9210      	str	r2, [sp, #64]	; 0x40
 80062e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80062e8:	e61f      	b.n	8005f2a <_vfprintf_r+0xf36>
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	aa21      	add	r2, sp, #132	; 0x84
 80062f0:	f7fe f836 	bl	8004360 <__sprint_r>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f47e af7d 	bne.w	80051f4 <_vfprintf_r+0x200>
 80062fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80062fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80062fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006300:	ac2e      	add	r4, sp, #184	; 0xb8
 8006302:	e68b      	b.n	800601c <_vfprintf_r+0x1028>
 8006304:	f04f 0b06 	mov.w	fp, #6
 8006308:	e5ab      	b.n	8005e62 <_vfprintf_r+0xe6e>
 800630a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	bfd8      	it	le
 8006310:	f1c3 0602 	rsble	r6, r3, #2
 8006314:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006316:	bfc8      	it	gt
 8006318:	2601      	movgt	r6, #1
 800631a:	18f3      	adds	r3, r6, r3
 800631c:	930b      	str	r3, [sp, #44]	; 0x2c
 800631e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006322:	e602      	b.n	8005f2a <_vfprintf_r+0xf36>
 8006324:	2b00      	cmp	r3, #0
 8006326:	dd30      	ble.n	800638a <_vfprintf_r+0x1396>
 8006328:	f1bb 0f00 	cmp.w	fp, #0
 800632c:	d125      	bne.n	800637a <_vfprintf_r+0x1386>
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	07de      	lsls	r6, r3, #31
 8006332:	d422      	bmi.n	800637a <_vfprintf_r+0x1386>
 8006334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006336:	920b      	str	r2, [sp, #44]	; 0x2c
 8006338:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800633c:	e5f5      	b.n	8005f2a <_vfprintf_r+0xf36>
 800633e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006340:	e5d8      	b.n	8005ef4 <_vfprintf_r+0xf00>
 8006342:	3330      	adds	r3, #48	; 0x30
 8006344:	2230      	movs	r2, #48	; 0x30
 8006346:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800634a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800634e:	ab1e      	add	r3, sp, #120	; 0x78
 8006350:	e7bb      	b.n	80062ca <_vfprintf_r+0x12d6>
 8006352:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006354:	3301      	adds	r3, #1
 8006356:	930b      	str	r3, [sp, #44]	; 0x2c
 8006358:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800635c:	e5e5      	b.n	8005f2a <_vfprintf_r+0xf36>
 800635e:	9807      	ldr	r0, [sp, #28]
 8006360:	4651      	mov	r1, sl
 8006362:	2200      	movs	r2, #0
 8006364:	2300      	movs	r3, #0
 8006366:	f7fa fbd1 	bl	8000b0c <__aeabi_dcmpeq>
 800636a:	2800      	cmp	r0, #0
 800636c:	f47f aefb 	bne.w	8006166 <_vfprintf_r+0x1172>
 8006370:	f1c7 0701 	rsb	r7, r7, #1
 8006374:	971b      	str	r7, [sp, #108]	; 0x6c
 8006376:	443e      	add	r6, r7
 8006378:	e5a9      	b.n	8005ece <_vfprintf_r+0xeda>
 800637a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800637c:	f10b 0601 	add.w	r6, fp, #1
 8006380:	4433      	add	r3, r6
 8006382:	930b      	str	r3, [sp, #44]	; 0x2c
 8006384:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006388:	e5cf      	b.n	8005f2a <_vfprintf_r+0xf36>
 800638a:	f1bb 0f00 	cmp.w	fp, #0
 800638e:	d11b      	bne.n	80063c8 <_vfprintf_r+0x13d4>
 8006390:	9b06      	ldr	r3, [sp, #24]
 8006392:	07d8      	lsls	r0, r3, #31
 8006394:	d418      	bmi.n	80063c8 <_vfprintf_r+0x13d4>
 8006396:	2301      	movs	r3, #1
 8006398:	930b      	str	r3, [sp, #44]	; 0x2c
 800639a:	e5c6      	b.n	8005f2a <_vfprintf_r+0xf36>
 800639c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800639e:	682e      	ldr	r6, [r5, #0]
 80063a0:	4628      	mov	r0, r5
 80063a2:	3004      	adds	r0, #4
 80063a4:	2e00      	cmp	r6, #0
 80063a6:	785d      	ldrb	r5, [r3, #1]
 80063a8:	900c      	str	r0, [sp, #48]	; 0x30
 80063aa:	f6be ae94 	bge.w	80050d6 <_vfprintf_r+0xe2>
 80063ae:	f04f 36ff 	mov.w	r6, #4294967295
 80063b2:	f7fe be90 	b.w	80050d6 <_vfprintf_r+0xe2>
 80063b6:	9b06      	ldr	r3, [sp, #24]
 80063b8:	f013 0301 	ands.w	r3, r3, #1
 80063bc:	d18d      	bne.n	80062da <_vfprintf_r+0x12e6>
 80063be:	9310      	str	r3, [sp, #64]	; 0x40
 80063c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063c6:	e5b0      	b.n	8005f2a <_vfprintf_r+0xf36>
 80063c8:	f10b 0302 	add.w	r3, fp, #2
 80063cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063d2:	e5aa      	b.n	8005f2a <_vfprintf_r+0xf36>
 80063d4:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80063d8:	e777      	b.n	80062ca <_vfprintf_r+0x12d6>
 80063da:	bf00      	nop

080063dc <__sbprintf>:
 80063dc:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80063e0:	460c      	mov	r4, r1
 80063e2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80063e6:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 80063ea:	69e7      	ldr	r7, [r4, #28]
 80063ec:	6e49      	ldr	r1, [r1, #100]	; 0x64
 80063ee:	f8b4 900e 	ldrh.w	r9, [r4, #14]
 80063f2:	9119      	str	r1, [sp, #100]	; 0x64
 80063f4:	ad1a      	add	r5, sp, #104	; 0x68
 80063f6:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80063fa:	f02e 0e02 	bic.w	lr, lr, #2
 80063fe:	f04f 0c00 	mov.w	ip, #0
 8006402:	9707      	str	r7, [sp, #28]
 8006404:	4669      	mov	r1, sp
 8006406:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006408:	9500      	str	r5, [sp, #0]
 800640a:	9504      	str	r5, [sp, #16]
 800640c:	9602      	str	r6, [sp, #8]
 800640e:	9605      	str	r6, [sp, #20]
 8006410:	f8ad e00c 	strh.w	lr, [sp, #12]
 8006414:	f8ad 900e 	strh.w	r9, [sp, #14]
 8006418:	9709      	str	r7, [sp, #36]	; 0x24
 800641a:	f8cd c018 	str.w	ip, [sp, #24]
 800641e:	4606      	mov	r6, r0
 8006420:	f7fe fde8 	bl	8004ff4 <_vfprintf_r>
 8006424:	1e05      	subs	r5, r0, #0
 8006426:	db07      	blt.n	8006438 <__sbprintf+0x5c>
 8006428:	4630      	mov	r0, r6
 800642a:	4669      	mov	r1, sp
 800642c:	f001 f90a 	bl	8007644 <_fflush_r>
 8006430:	2800      	cmp	r0, #0
 8006432:	bf18      	it	ne
 8006434:	f04f 35ff 	movne.w	r5, #4294967295
 8006438:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800643c:	065b      	lsls	r3, r3, #25
 800643e:	d503      	bpl.n	8006448 <__sbprintf+0x6c>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006446:	81a3      	strh	r3, [r4, #12]
 8006448:	4628      	mov	r0, r5
 800644a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800644e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8006452:	bf00      	nop

08006454 <__swsetup_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <__swsetup_r+0xc0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4605      	mov	r5, r0
 800645c:	460c      	mov	r4, r1
 800645e:	b113      	cbz	r3, 8006466 <__swsetup_r+0x12>
 8006460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006462:	2a00      	cmp	r2, #0
 8006464:	d036      	beq.n	80064d4 <__swsetup_r+0x80>
 8006466:	89a2      	ldrh	r2, [r4, #12]
 8006468:	b293      	uxth	r3, r2
 800646a:	0718      	lsls	r0, r3, #28
 800646c:	d50c      	bpl.n	8006488 <__swsetup_r+0x34>
 800646e:	6920      	ldr	r0, [r4, #16]
 8006470:	b1a8      	cbz	r0, 800649e <__swsetup_r+0x4a>
 8006472:	f013 0201 	ands.w	r2, r3, #1
 8006476:	d01e      	beq.n	80064b6 <__swsetup_r+0x62>
 8006478:	6963      	ldr	r3, [r4, #20]
 800647a:	2200      	movs	r2, #0
 800647c:	425b      	negs	r3, r3
 800647e:	61a3      	str	r3, [r4, #24]
 8006480:	60a2      	str	r2, [r4, #8]
 8006482:	b1f0      	cbz	r0, 80064c2 <__swsetup_r+0x6e>
 8006484:	2000      	movs	r0, #0
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	06d9      	lsls	r1, r3, #27
 800648a:	d53b      	bpl.n	8006504 <__swsetup_r+0xb0>
 800648c:	0758      	lsls	r0, r3, #29
 800648e:	d425      	bmi.n	80064dc <__swsetup_r+0x88>
 8006490:	6920      	ldr	r0, [r4, #16]
 8006492:	f042 0308 	orr.w	r3, r2, #8
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	b29b      	uxth	r3, r3
 800649a:	2800      	cmp	r0, #0
 800649c:	d1e9      	bne.n	8006472 <__swsetup_r+0x1e>
 800649e:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80064a2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80064a6:	d0e4      	beq.n	8006472 <__swsetup_r+0x1e>
 80064a8:	4628      	mov	r0, r5
 80064aa:	4621      	mov	r1, r4
 80064ac:	f001 fcb4 	bl	8007e18 <__smakebuf_r>
 80064b0:	89a3      	ldrh	r3, [r4, #12]
 80064b2:	6920      	ldr	r0, [r4, #16]
 80064b4:	e7dd      	b.n	8006472 <__swsetup_r+0x1e>
 80064b6:	0799      	lsls	r1, r3, #30
 80064b8:	bf58      	it	pl
 80064ba:	6962      	ldrpl	r2, [r4, #20]
 80064bc:	60a2      	str	r2, [r4, #8]
 80064be:	2800      	cmp	r0, #0
 80064c0:	d1e0      	bne.n	8006484 <__swsetup_r+0x30>
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	061a      	lsls	r2, r3, #24
 80064c6:	d5de      	bpl.n	8006486 <__swsetup_r+0x32>
 80064c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 f949 	bl	800776c <__sinit>
 80064da:	e7c4      	b.n	8006466 <__swsetup_r+0x12>
 80064dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80064de:	b149      	cbz	r1, 80064f4 <__swsetup_r+0xa0>
 80064e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80064e4:	4299      	cmp	r1, r3
 80064e6:	d003      	beq.n	80064f0 <__swsetup_r+0x9c>
 80064e8:	4628      	mov	r0, r5
 80064ea:	f001 f9f9 	bl	80078e0 <_free_r>
 80064ee:	89a2      	ldrh	r2, [r4, #12]
 80064f0:	2300      	movs	r3, #0
 80064f2:	6323      	str	r3, [r4, #48]	; 0x30
 80064f4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80064f8:	2300      	movs	r3, #0
 80064fa:	6920      	ldr	r0, [r4, #16]
 80064fc:	6063      	str	r3, [r4, #4]
 80064fe:	b292      	uxth	r2, r2
 8006500:	6020      	str	r0, [r4, #0]
 8006502:	e7c6      	b.n	8006492 <__swsetup_r+0x3e>
 8006504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006508:	2309      	movs	r3, #9
 800650a:	602b      	str	r3, [r5, #0]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	81a2      	strh	r2, [r4, #12]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	20000430 	.word	0x20000430

08006518 <abort>:
 8006518:	b508      	push	{r3, lr}
 800651a:	2006      	movs	r0, #6
 800651c:	f002 fdce 	bl	80090bc <raise>
 8006520:	2001      	movs	r0, #1
 8006522:	f7fb faaf 	bl	8001a84 <_exit>
 8006526:	bf00      	nop

08006528 <quorem>:
 8006528:	6902      	ldr	r2, [r0, #16]
 800652a:	690b      	ldr	r3, [r1, #16]
 800652c:	4293      	cmp	r3, r2
 800652e:	f300 808f 	bgt.w	8006650 <quorem+0x128>
 8006532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006536:	f103 38ff 	add.w	r8, r3, #4294967295
 800653a:	f101 0714 	add.w	r7, r1, #20
 800653e:	f100 0b14 	add.w	fp, r0, #20
 8006542:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8006546:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800654a:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800654e:	b083      	sub	sp, #12
 8006550:	3201      	adds	r2, #1
 8006552:	fbb3 f9f2 	udiv	r9, r3, r2
 8006556:	eb0b 0304 	add.w	r3, fp, r4
 800655a:	9400      	str	r4, [sp, #0]
 800655c:	eb07 0a04 	add.w	sl, r7, r4
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	f1b9 0f00 	cmp.w	r9, #0
 8006566:	d03b      	beq.n	80065e0 <quorem+0xb8>
 8006568:	2600      	movs	r6, #0
 800656a:	4632      	mov	r2, r6
 800656c:	46bc      	mov	ip, r7
 800656e:	46de      	mov	lr, fp
 8006570:	4634      	mov	r4, r6
 8006572:	f85c 6b04 	ldr.w	r6, [ip], #4
 8006576:	f8de 5000 	ldr.w	r5, [lr]
 800657a:	b2b3      	uxth	r3, r6
 800657c:	0c36      	lsrs	r6, r6, #16
 800657e:	fb03 4409 	mla	r4, r3, r9, r4
 8006582:	fb06 f609 	mul.w	r6, r6, r9
 8006586:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 800658a:	b2a3      	uxth	r3, r4
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	b2b4      	uxth	r4, r6
 8006590:	fa13 f385 	uxtah	r3, r3, r5
 8006594:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8006598:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800659c:	b29b      	uxth	r3, r3
 800659e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065a2:	45e2      	cmp	sl, ip
 80065a4:	ea4f 4224 	mov.w	r2, r4, asr #16
 80065a8:	f84e 3b04 	str.w	r3, [lr], #4
 80065ac:	ea4f 4416 	mov.w	r4, r6, lsr #16
 80065b0:	d2df      	bcs.n	8006572 <quorem+0x4a>
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	f85b 3003 	ldr.w	r3, [fp, r3]
 80065b8:	b993      	cbnz	r3, 80065e0 <quorem+0xb8>
 80065ba:	9c01      	ldr	r4, [sp, #4]
 80065bc:	1f23      	subs	r3, r4, #4
 80065be:	459b      	cmp	fp, r3
 80065c0:	d20c      	bcs.n	80065dc <quorem+0xb4>
 80065c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80065c6:	b94b      	cbnz	r3, 80065dc <quorem+0xb4>
 80065c8:	f1a4 0308 	sub.w	r3, r4, #8
 80065cc:	e002      	b.n	80065d4 <quorem+0xac>
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	b91a      	cbnz	r2, 80065dc <quorem+0xb4>
 80065d4:	459b      	cmp	fp, r3
 80065d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80065da:	d3f8      	bcc.n	80065ce <quorem+0xa6>
 80065dc:	f8c0 8010 	str.w	r8, [r0, #16]
 80065e0:	4604      	mov	r4, r0
 80065e2:	f002 fa21 	bl	8008a28 <__mcmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	db2e      	blt.n	8006648 <quorem+0x120>
 80065ea:	f109 0901 	add.w	r9, r9, #1
 80065ee:	465d      	mov	r5, fp
 80065f0:	2300      	movs	r3, #0
 80065f2:	f857 1b04 	ldr.w	r1, [r7], #4
 80065f6:	6828      	ldr	r0, [r5, #0]
 80065f8:	b28a      	uxth	r2, r1
 80065fa:	1a9a      	subs	r2, r3, r2
 80065fc:	0c09      	lsrs	r1, r1, #16
 80065fe:	fa12 f280 	uxtah	r2, r2, r0
 8006602:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8006606:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800660a:	b291      	uxth	r1, r2
 800660c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006610:	45ba      	cmp	sl, r7
 8006612:	f845 1b04 	str.w	r1, [r5], #4
 8006616:	ea4f 4323 	mov.w	r3, r3, asr #16
 800661a:	d2ea      	bcs.n	80065f2 <quorem+0xca>
 800661c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8006620:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8006624:	b982      	cbnz	r2, 8006648 <quorem+0x120>
 8006626:	1f1a      	subs	r2, r3, #4
 8006628:	4593      	cmp	fp, r2
 800662a:	d20b      	bcs.n	8006644 <quorem+0x11c>
 800662c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8006630:	b942      	cbnz	r2, 8006644 <quorem+0x11c>
 8006632:	3b08      	subs	r3, #8
 8006634:	e002      	b.n	800663c <quorem+0x114>
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	3b04      	subs	r3, #4
 800663a:	b91a      	cbnz	r2, 8006644 <quorem+0x11c>
 800663c:	459b      	cmp	fp, r3
 800663e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006642:	d3f8      	bcc.n	8006636 <quorem+0x10e>
 8006644:	f8c4 8010 	str.w	r8, [r4, #16]
 8006648:	4648      	mov	r0, r9
 800664a:	b003      	add	sp, #12
 800664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006650:	2000      	movs	r0, #0
 8006652:	4770      	bx	lr
 8006654:	0000      	movs	r0, r0
	...

08006658 <_dtoa_r>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800665e:	b097      	sub	sp, #92	; 0x5c
 8006660:	4604      	mov	r4, r0
 8006662:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8006664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006668:	b141      	cbz	r1, 800667c <_dtoa_r+0x24>
 800666a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800666c:	604a      	str	r2, [r1, #4]
 800666e:	2301      	movs	r3, #1
 8006670:	4093      	lsls	r3, r2
 8006672:	608b      	str	r3, [r1, #8]
 8006674:	f001 fff4 	bl	8008660 <_Bfree>
 8006678:	2300      	movs	r3, #0
 800667a:	6423      	str	r3, [r4, #64]	; 0x40
 800667c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	4699      	mov	r9, r3
 8006684:	db36      	blt.n	80066f4 <_dtoa_r+0x9c>
 8006686:	2300      	movs	r3, #0
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	4ba5      	ldr	r3, [pc, #660]	; (8006920 <_dtoa_r+0x2c8>)
 800668c:	461a      	mov	r2, r3
 800668e:	ea09 0303 	and.w	r3, r9, r3
 8006692:	4293      	cmp	r3, r2
 8006694:	d017      	beq.n	80066c6 <_dtoa_r+0x6e>
 8006696:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800669a:	2200      	movs	r2, #0
 800669c:	4630      	mov	r0, r6
 800669e:	4639      	mov	r1, r7
 80066a0:	2300      	movs	r3, #0
 80066a2:	f7fa fa33 	bl	8000b0c <__aeabi_dcmpeq>
 80066a6:	4680      	mov	r8, r0
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d02b      	beq.n	8006704 <_dtoa_r+0xac>
 80066ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066ae:	2301      	movs	r3, #1
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80cb 	beq.w	8006850 <_dtoa_r+0x1f8>
 80066ba:	489a      	ldr	r0, [pc, #616]	; (8006924 <_dtoa_r+0x2cc>)
 80066bc:	6018      	str	r0, [r3, #0]
 80066be:	3801      	subs	r0, #1
 80066c0:	b017      	add	sp, #92	; 0x5c
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	9b02      	ldr	r3, [sp, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a6 	beq.w	8006822 <_dtoa_r+0x1ca>
 80066d6:	4894      	ldr	r0, [pc, #592]	; (8006928 <_dtoa_r+0x2d0>)
 80066d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <_dtoa_r+0x68>
 80066de:	78c3      	ldrb	r3, [r0, #3]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80b7 	beq.w	8006854 <_dtoa_r+0x1fc>
 80066e6:	f100 0308 	add.w	r3, r0, #8
 80066ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	b017      	add	sp, #92	; 0x5c
 80066f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f4:	9a03      	ldr	r2, [sp, #12]
 80066f6:	2301      	movs	r3, #1
 80066f8:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 80066fc:	602b      	str	r3, [r5, #0]
 80066fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8006702:	e7c2      	b.n	800668a <_dtoa_r+0x32>
 8006704:	aa15      	add	r2, sp, #84	; 0x54
 8006706:	ab14      	add	r3, sp, #80	; 0x50
 8006708:	e88d 000c 	stmia.w	sp, {r2, r3}
 800670c:	4620      	mov	r0, r4
 800670e:	4632      	mov	r2, r6
 8006710:	463b      	mov	r3, r7
 8006712:	f002 fa17 	bl	8008b44 <__d2b>
 8006716:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800671a:	4683      	mov	fp, r0
 800671c:	f040 808a 	bne.w	8006834 <_dtoa_r+0x1dc>
 8006720:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006724:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006726:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800672a:	4445      	add	r5, r8
 800672c:	429d      	cmp	r5, r3
 800672e:	f2c0 8297 	blt.w	8006c60 <_dtoa_r+0x608>
 8006732:	4a7e      	ldr	r2, [pc, #504]	; (800692c <_dtoa_r+0x2d4>)
 8006734:	1b52      	subs	r2, r2, r5
 8006736:	fa09 f902 	lsl.w	r9, r9, r2
 800673a:	9a02      	ldr	r2, [sp, #8]
 800673c:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8006740:	fa22 f003 	lsr.w	r0, r2, r3
 8006744:	ea49 0000 	orr.w	r0, r9, r0
 8006748:	f7f9 ff02 	bl	8000550 <__aeabi_ui2d>
 800674c:	2301      	movs	r3, #1
 800674e:	3d01      	subs	r5, #1
 8006750:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006754:	930d      	str	r3, [sp, #52]	; 0x34
 8006756:	2200      	movs	r2, #0
 8006758:	4b75      	ldr	r3, [pc, #468]	; (8006930 <_dtoa_r+0x2d8>)
 800675a:	f7f9 fdbb 	bl	80002d4 <__aeabi_dsub>
 800675e:	a36a      	add	r3, pc, #424	; (adr r3, 8006908 <_dtoa_r+0x2b0>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f7f9 ff6a 	bl	800063c <__aeabi_dmul>
 8006768:	a369      	add	r3, pc, #420	; (adr r3, 8006910 <_dtoa_r+0x2b8>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f7f9 fdb3 	bl	80002d8 <__adddf3>
 8006772:	4606      	mov	r6, r0
 8006774:	4628      	mov	r0, r5
 8006776:	460f      	mov	r7, r1
 8006778:	f7f9 fefa 	bl	8000570 <__aeabi_i2d>
 800677c:	a366      	add	r3, pc, #408	; (adr r3, 8006918 <_dtoa_r+0x2c0>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f7f9 ff5b 	bl	800063c <__aeabi_dmul>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7f9 fda3 	bl	80002d8 <__adddf3>
 8006792:	4606      	mov	r6, r0
 8006794:	460f      	mov	r7, r1
 8006796:	f7fa f9eb 	bl	8000b70 <__aeabi_d2iz>
 800679a:	4639      	mov	r1, r7
 800679c:	9004      	str	r0, [sp, #16]
 800679e:	2200      	movs	r2, #0
 80067a0:	4630      	mov	r0, r6
 80067a2:	2300      	movs	r3, #0
 80067a4:	f7fa f9bc 	bl	8000b20 <__aeabi_dcmplt>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f040 81a6 	bne.w	8006afa <_dtoa_r+0x4a2>
 80067ae:	9b04      	ldr	r3, [sp, #16]
 80067b0:	2b16      	cmp	r3, #22
 80067b2:	f200 819f 	bhi.w	8006af4 <_dtoa_r+0x49c>
 80067b6:	9a04      	ldr	r2, [sp, #16]
 80067b8:	4b5e      	ldr	r3, [pc, #376]	; (8006934 <_dtoa_r+0x2dc>)
 80067ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067c6:	f7fa f9c9 	bl	8000b5c <__aeabi_dcmpgt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f000 824e 	beq.w	8006c6c <_dtoa_r+0x614>
 80067d0:	9b04      	ldr	r3, [sp, #16]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	9304      	str	r3, [sp, #16]
 80067d6:	2300      	movs	r3, #0
 80067d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80067da:	ebc5 0508 	rsb	r5, r5, r8
 80067de:	f1b5 0a01 	subs.w	sl, r5, #1
 80067e2:	f100 81a1 	bmi.w	8006b28 <_dtoa_r+0x4d0>
 80067e6:	2300      	movs	r3, #0
 80067e8:	9305      	str	r3, [sp, #20]
 80067ea:	9b04      	ldr	r3, [sp, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f2c0 8192 	blt.w	8006b16 <_dtoa_r+0x4be>
 80067f2:	449a      	add	sl, r3
 80067f4:	930a      	str	r3, [sp, #40]	; 0x28
 80067f6:	2300      	movs	r3, #0
 80067f8:	9308      	str	r3, [sp, #32]
 80067fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	d82b      	bhi.n	8006858 <_dtoa_r+0x200>
 8006800:	2b05      	cmp	r3, #5
 8006802:	f340 8670 	ble.w	80074e6 <_dtoa_r+0xe8e>
 8006806:	3b04      	subs	r3, #4
 8006808:	9320      	str	r3, [sp, #128]	; 0x80
 800680a:	2500      	movs	r5, #0
 800680c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800680e:	3b02      	subs	r3, #2
 8006810:	2b03      	cmp	r3, #3
 8006812:	f200 864e 	bhi.w	80074b2 <_dtoa_r+0xe5a>
 8006816:	e8df f013 	tbh	[pc, r3, lsl #1]
 800681a:	03cc      	.short	0x03cc
 800681c:	02b203be 	.word	0x02b203be
 8006820:	0663      	.short	0x0663
 8006822:	4b41      	ldr	r3, [pc, #260]	; (8006928 <_dtoa_r+0x2d0>)
 8006824:	4a44      	ldr	r2, [pc, #272]	; (8006938 <_dtoa_r+0x2e0>)
 8006826:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800682a:	2800      	cmp	r0, #0
 800682c:	bf14      	ite	ne
 800682e:	4618      	movne	r0, r3
 8006830:	4610      	moveq	r0, r2
 8006832:	e751      	b.n	80066d8 <_dtoa_r+0x80>
 8006834:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006838:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800683c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006840:	4630      	mov	r0, r6
 8006842:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006846:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800684a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800684e:	e782      	b.n	8006756 <_dtoa_r+0xfe>
 8006850:	483a      	ldr	r0, [pc, #232]	; (800693c <_dtoa_r+0x2e4>)
 8006852:	e735      	b.n	80066c0 <_dtoa_r+0x68>
 8006854:	1cc3      	adds	r3, r0, #3
 8006856:	e748      	b.n	80066ea <_dtoa_r+0x92>
 8006858:	2100      	movs	r1, #0
 800685a:	6461      	str	r1, [r4, #68]	; 0x44
 800685c:	4620      	mov	r0, r4
 800685e:	9120      	str	r1, [sp, #128]	; 0x80
 8006860:	f001 fed8 	bl	8008614 <_Balloc>
 8006864:	f04f 33ff 	mov.w	r3, #4294967295
 8006868:	9306      	str	r3, [sp, #24]
 800686a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800686c:	930c      	str	r3, [sp, #48]	; 0x30
 800686e:	2301      	movs	r3, #1
 8006870:	9007      	str	r0, [sp, #28]
 8006872:	9221      	str	r2, [sp, #132]	; 0x84
 8006874:	6420      	str	r0, [r4, #64]	; 0x40
 8006876:	9309      	str	r3, [sp, #36]	; 0x24
 8006878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800687a:	2b00      	cmp	r3, #0
 800687c:	f2c0 80d2 	blt.w	8006a24 <_dtoa_r+0x3cc>
 8006880:	9a04      	ldr	r2, [sp, #16]
 8006882:	2a0e      	cmp	r2, #14
 8006884:	f300 80ce 	bgt.w	8006a24 <_dtoa_r+0x3cc>
 8006888:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <_dtoa_r+0x2dc>)
 800688a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800688e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006894:	2b00      	cmp	r3, #0
 8006896:	f2c0 838f 	blt.w	8006fb8 <_dtoa_r+0x960>
 800689a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800689e:	4642      	mov	r2, r8
 80068a0:	464b      	mov	r3, r9
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7f9 fff3 	bl	8000890 <__aeabi_ddiv>
 80068aa:	f7fa f961 	bl	8000b70 <__aeabi_d2iz>
 80068ae:	4682      	mov	sl, r0
 80068b0:	f7f9 fe5e 	bl	8000570 <__aeabi_i2d>
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	f7f9 fec0 	bl	800063c <__aeabi_dmul>
 80068bc:	460b      	mov	r3, r1
 80068be:	4602      	mov	r2, r0
 80068c0:	4639      	mov	r1, r7
 80068c2:	4630      	mov	r0, r6
 80068c4:	f7f9 fd06 	bl	80002d4 <__aeabi_dsub>
 80068c8:	9d07      	ldr	r5, [sp, #28]
 80068ca:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80068ce:	702b      	strb	r3, [r5, #0]
 80068d0:	9b06      	ldr	r3, [sp, #24]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	4606      	mov	r6, r0
 80068d6:	460f      	mov	r7, r1
 80068d8:	f105 0501 	add.w	r5, r5, #1
 80068dc:	d062      	beq.n	80069a4 <_dtoa_r+0x34c>
 80068de:	2200      	movs	r2, #0
 80068e0:	4b17      	ldr	r3, [pc, #92]	; (8006940 <_dtoa_r+0x2e8>)
 80068e2:	f7f9 feab 	bl	800063c <__aeabi_dmul>
 80068e6:	2200      	movs	r2, #0
 80068e8:	2300      	movs	r3, #0
 80068ea:	4606      	mov	r6, r0
 80068ec:	460f      	mov	r7, r1
 80068ee:	f7fa f90d 	bl	8000b0c <__aeabi_dcmpeq>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f040 8083 	bne.w	80069fe <_dtoa_r+0x3a6>
 80068f8:	f8cd b008 	str.w	fp, [sp, #8]
 80068fc:	9405      	str	r4, [sp, #20]
 80068fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006902:	9c06      	ldr	r4, [sp, #24]
 8006904:	e029      	b.n	800695a <_dtoa_r+0x302>
 8006906:	bf00      	nop
 8006908:	636f4361 	.word	0x636f4361
 800690c:	3fd287a7 	.word	0x3fd287a7
 8006910:	8b60c8b3 	.word	0x8b60c8b3
 8006914:	3fc68a28 	.word	0x3fc68a28
 8006918:	509f79fb 	.word	0x509f79fb
 800691c:	3fd34413 	.word	0x3fd34413
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	08009eed 	.word	0x08009eed
 8006928:	08009f0c 	.word	0x08009f0c
 800692c:	fffffc0e 	.word	0xfffffc0e
 8006930:	3ff80000 	.word	0x3ff80000
 8006934:	08009f20 	.word	0x08009f20
 8006938:	08009f00 	.word	0x08009f00
 800693c:	08009eec 	.word	0x08009eec
 8006940:	40240000 	.word	0x40240000
 8006944:	f7f9 fe7a 	bl	800063c <__aeabi_dmul>
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	4606      	mov	r6, r0
 800694e:	460f      	mov	r7, r1
 8006950:	f7fa f8dc 	bl	8000b0c <__aeabi_dcmpeq>
 8006954:	2800      	cmp	r0, #0
 8006956:	f040 83de 	bne.w	8007116 <_dtoa_r+0xabe>
 800695a:	4642      	mov	r2, r8
 800695c:	464b      	mov	r3, r9
 800695e:	4630      	mov	r0, r6
 8006960:	4639      	mov	r1, r7
 8006962:	f7f9 ff95 	bl	8000890 <__aeabi_ddiv>
 8006966:	f7fa f903 	bl	8000b70 <__aeabi_d2iz>
 800696a:	4682      	mov	sl, r0
 800696c:	f7f9 fe00 	bl	8000570 <__aeabi_i2d>
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	f7f9 fe62 	bl	800063c <__aeabi_dmul>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7f9 fca8 	bl	80002d4 <__aeabi_dsub>
 8006984:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8006988:	f805 eb01 	strb.w	lr, [r5], #1
 800698c:	ebcb 0e05 	rsb	lr, fp, r5
 8006990:	4574      	cmp	r4, lr
 8006992:	4606      	mov	r6, r0
 8006994:	460f      	mov	r7, r1
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	4bb5      	ldr	r3, [pc, #724]	; (8006c70 <_dtoa_r+0x618>)
 800699c:	d1d2      	bne.n	8006944 <_dtoa_r+0x2ec>
 800699e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80069a2:	9c05      	ldr	r4, [sp, #20]
 80069a4:	4632      	mov	r2, r6
 80069a6:	463b      	mov	r3, r7
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7f9 fc94 	bl	80002d8 <__adddf3>
 80069b0:	4606      	mov	r6, r0
 80069b2:	460f      	mov	r7, r1
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	4632      	mov	r2, r6
 80069ba:	463b      	mov	r3, r7
 80069bc:	f7fa f8b0 	bl	8000b20 <__aeabi_dcmplt>
 80069c0:	b948      	cbnz	r0, 80069d6 <_dtoa_r+0x37e>
 80069c2:	4640      	mov	r0, r8
 80069c4:	4649      	mov	r1, r9
 80069c6:	4632      	mov	r2, r6
 80069c8:	463b      	mov	r3, r7
 80069ca:	f7fa f89f 	bl	8000b0c <__aeabi_dcmpeq>
 80069ce:	b1b0      	cbz	r0, 80069fe <_dtoa_r+0x3a6>
 80069d0:	f01a 0f01 	tst.w	sl, #1
 80069d4:	d013      	beq.n	80069fe <_dtoa_r+0x3a6>
 80069d6:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80069da:	9907      	ldr	r1, [sp, #28]
 80069dc:	1e6b      	subs	r3, r5, #1
 80069de:	e004      	b.n	80069ea <_dtoa_r+0x392>
 80069e0:	428b      	cmp	r3, r1
 80069e2:	f000 8440 	beq.w	8007266 <_dtoa_r+0xc0e>
 80069e6:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80069ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069ee:	f103 0501 	add.w	r5, r3, #1
 80069f2:	461a      	mov	r2, r3
 80069f4:	d0f4      	beq.n	80069e0 <_dtoa_r+0x388>
 80069f6:	f108 0301 	add.w	r3, r8, #1
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	7013      	strb	r3, [r2, #0]
 80069fe:	4620      	mov	r0, r4
 8006a00:	4659      	mov	r1, fp
 8006a02:	f001 fe2d 	bl	8008660 <_Bfree>
 8006a06:	2200      	movs	r2, #0
 8006a08:	9b04      	ldr	r3, [sp, #16]
 8006a0a:	702a      	strb	r2, [r5, #0]
 8006a0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a0e:	3301      	adds	r3, #1
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8345 	beq.w	80070a4 <_dtoa_r+0xa4c>
 8006a1a:	9807      	ldr	r0, [sp, #28]
 8006a1c:	601d      	str	r5, [r3, #0]
 8006a1e:	b017      	add	sp, #92	; 0x5c
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a26:	2a00      	cmp	r2, #0
 8006a28:	f000 8084 	beq.w	8006b34 <_dtoa_r+0x4dc>
 8006a2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a2e:	2a01      	cmp	r2, #1
 8006a30:	f340 8304 	ble.w	800703c <_dtoa_r+0x9e4>
 8006a34:	9b06      	ldr	r3, [sp, #24]
 8006a36:	1e5f      	subs	r7, r3, #1
 8006a38:	9b08      	ldr	r3, [sp, #32]
 8006a3a:	42bb      	cmp	r3, r7
 8006a3c:	f2c0 83a9 	blt.w	8007192 <_dtoa_r+0xb3a>
 8006a40:	1bdf      	subs	r7, r3, r7
 8006a42:	9b06      	ldr	r3, [sp, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f2c0 849c 	blt.w	8007382 <_dtoa_r+0xd2a>
 8006a4a:	9d05      	ldr	r5, [sp, #20]
 8006a4c:	9b06      	ldr	r3, [sp, #24]
 8006a4e:	9a05      	ldr	r2, [sp, #20]
 8006a50:	4620      	mov	r0, r4
 8006a52:	441a      	add	r2, r3
 8006a54:	2101      	movs	r1, #1
 8006a56:	9205      	str	r2, [sp, #20]
 8006a58:	449a      	add	sl, r3
 8006a5a:	f001 fe9b 	bl	8008794 <__i2b>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	b165      	cbz	r5, 8006a7c <_dtoa_r+0x424>
 8006a62:	f1ba 0f00 	cmp.w	sl, #0
 8006a66:	dd09      	ble.n	8006a7c <_dtoa_r+0x424>
 8006a68:	45aa      	cmp	sl, r5
 8006a6a:	9a05      	ldr	r2, [sp, #20]
 8006a6c:	4653      	mov	r3, sl
 8006a6e:	bfa8      	it	ge
 8006a70:	462b      	movge	r3, r5
 8006a72:	1ad2      	subs	r2, r2, r3
 8006a74:	9205      	str	r2, [sp, #20]
 8006a76:	1aed      	subs	r5, r5, r3
 8006a78:	ebc3 0a0a 	rsb	sl, r3, sl
 8006a7c:	9b08      	ldr	r3, [sp, #32]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dd1a      	ble.n	8006ab8 <_dtoa_r+0x460>
 8006a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 837d 	beq.w	8007184 <_dtoa_r+0xb2c>
 8006a8a:	2f00      	cmp	r7, #0
 8006a8c:	dd10      	ble.n	8006ab0 <_dtoa_r+0x458>
 8006a8e:	4631      	mov	r1, r6
 8006a90:	463a      	mov	r2, r7
 8006a92:	4620      	mov	r0, r4
 8006a94:	f001 ff22 	bl	80088dc <__pow5mult>
 8006a98:	4606      	mov	r6, r0
 8006a9a:	465a      	mov	r2, fp
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f001 fe82 	bl	80087a8 <__multiply>
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	4680      	mov	r8, r0
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f001 fdd9 	bl	8008660 <_Bfree>
 8006aae:	46c3      	mov	fp, r8
 8006ab0:	9b08      	ldr	r3, [sp, #32]
 8006ab2:	1bda      	subs	r2, r3, r7
 8006ab4:	f040 82a2 	bne.w	8006ffc <_dtoa_r+0x9a4>
 8006ab8:	4620      	mov	r0, r4
 8006aba:	2101      	movs	r1, #1
 8006abc:	f001 fe6a 	bl	8008794 <__i2b>
 8006ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	dd39      	ble.n	8006b3c <_dtoa_r+0x4e4>
 8006ac8:	4601      	mov	r1, r0
 8006aca:	461a      	mov	r2, r3
 8006acc:	4620      	mov	r0, r4
 8006ace:	f001 ff05 	bl	80088dc <__pow5mult>
 8006ad2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	4680      	mov	r8, r0
 8006ad8:	f340 8296 	ble.w	8007008 <_dtoa_r+0x9b0>
 8006adc:	f04f 0900 	mov.w	r9, #0
 8006ae0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006ae4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8006ae8:	6918      	ldr	r0, [r3, #16]
 8006aea:	f001 fe05 	bl	80086f8 <__hi0bits>
 8006aee:	f1c0 0020 	rsb	r0, r0, #32
 8006af2:	e02d      	b.n	8006b50 <_dtoa_r+0x4f8>
 8006af4:	2301      	movs	r3, #1
 8006af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006af8:	e66f      	b.n	80067da <_dtoa_r+0x182>
 8006afa:	9804      	ldr	r0, [sp, #16]
 8006afc:	f7f9 fd38 	bl	8000570 <__aeabi_i2d>
 8006b00:	4632      	mov	r2, r6
 8006b02:	463b      	mov	r3, r7
 8006b04:	f7fa f802 	bl	8000b0c <__aeabi_dcmpeq>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f47f ae50 	bne.w	80067ae <_dtoa_r+0x156>
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	e64b      	b.n	80067ae <_dtoa_r+0x156>
 8006b16:	9a05      	ldr	r2, [sp, #20]
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	425b      	negs	r3, r3
 8006b1e:	9308      	str	r3, [sp, #32]
 8006b20:	2300      	movs	r3, #0
 8006b22:	9205      	str	r2, [sp, #20]
 8006b24:	930a      	str	r3, [sp, #40]	; 0x28
 8006b26:	e668      	b.n	80067fa <_dtoa_r+0x1a2>
 8006b28:	f1ca 0300 	rsb	r3, sl, #0
 8006b2c:	9305      	str	r3, [sp, #20]
 8006b2e:	f04f 0a00 	mov.w	sl, #0
 8006b32:	e65a      	b.n	80067ea <_dtoa_r+0x192>
 8006b34:	9f08      	ldr	r7, [sp, #32]
 8006b36:	9d05      	ldr	r5, [sp, #20]
 8006b38:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b3a:	e791      	b.n	8006a60 <_dtoa_r+0x408>
 8006b3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	f340 82b3 	ble.w	80070aa <_dtoa_r+0xa52>
 8006b44:	f04f 0900 	mov.w	r9, #0
 8006b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1c8      	bne.n	8006ae0 <_dtoa_r+0x488>
 8006b4e:	2001      	movs	r0, #1
 8006b50:	4450      	add	r0, sl
 8006b52:	f010 001f 	ands.w	r0, r0, #31
 8006b56:	f000 8081 	beq.w	8006c5c <_dtoa_r+0x604>
 8006b5a:	f1c0 0320 	rsb	r3, r0, #32
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	f340 84b8 	ble.w	80074d4 <_dtoa_r+0xe7c>
 8006b64:	f1c0 001c 	rsb	r0, r0, #28
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	4403      	add	r3, r0
 8006b6c:	9305      	str	r3, [sp, #20]
 8006b6e:	4405      	add	r5, r0
 8006b70:	4482      	add	sl, r0
 8006b72:	9b05      	ldr	r3, [sp, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd05      	ble.n	8006b84 <_dtoa_r+0x52c>
 8006b78:	4659      	mov	r1, fp
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f001 fefd 	bl	800897c <__lshift>
 8006b82:	4683      	mov	fp, r0
 8006b84:	f1ba 0f00 	cmp.w	sl, #0
 8006b88:	dd05      	ble.n	8006b96 <_dtoa_r+0x53e>
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f001 fef4 	bl	800897c <__lshift>
 8006b94:	4680      	mov	r8, r0
 8006b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 8268 	bne.w	800706e <_dtoa_r+0xa16>
 8006b9e:	9b06      	ldr	r3, [sp, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f340 8295 	ble.w	80070d0 <_dtoa_r+0xa78>
 8006ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d171      	bne.n	8006c90 <_dtoa_r+0x638>
 8006bac:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8006bb0:	9f06      	ldr	r7, [sp, #24]
 8006bb2:	464d      	mov	r5, r9
 8006bb4:	e002      	b.n	8006bbc <_dtoa_r+0x564>
 8006bb6:	f001 fd5d 	bl	8008674 <__multadd>
 8006bba:	4683      	mov	fp, r0
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f7ff fcb2 	bl	8006528 <quorem>
 8006bc4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8006bc8:	f805 cb01 	strb.w	ip, [r5], #1
 8006bcc:	ebc9 0305 	rsb	r3, r9, r5
 8006bd0:	42bb      	cmp	r3, r7
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	4659      	mov	r1, fp
 8006bd6:	f04f 020a 	mov.w	r2, #10
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	dbea      	blt.n	8006bb6 <_dtoa_r+0x55e>
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	9a06      	ldr	r2, [sp, #24]
 8006be4:	2a01      	cmp	r2, #1
 8006be6:	bfac      	ite	ge
 8006be8:	189b      	addge	r3, r3, r2
 8006bea:	3301      	addlt	r3, #1
 8006bec:	461d      	mov	r5, r3
 8006bee:	f04f 0a00 	mov.w	sl, #0
 8006bf2:	4659      	mov	r1, fp
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f8cd c008 	str.w	ip, [sp, #8]
 8006bfc:	f001 febe 	bl	800897c <__lshift>
 8006c00:	4641      	mov	r1, r8
 8006c02:	4683      	mov	fp, r0
 8006c04:	f001 ff10 	bl	8008a28 <__mcmp>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8006c0e:	f340 82f6 	ble.w	80071fe <_dtoa_r+0xba6>
 8006c12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c16:	9907      	ldr	r1, [sp, #28]
 8006c18:	1e6b      	subs	r3, r5, #1
 8006c1a:	e004      	b.n	8006c26 <_dtoa_r+0x5ce>
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	f000 8273 	beq.w	8007108 <_dtoa_r+0xab0>
 8006c22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c26:	2a39      	cmp	r2, #57	; 0x39
 8006c28:	f103 0501 	add.w	r5, r3, #1
 8006c2c:	d0f6      	beq.n	8006c1c <_dtoa_r+0x5c4>
 8006c2e:	3201      	adds	r2, #1
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	4641      	mov	r1, r8
 8006c34:	4620      	mov	r0, r4
 8006c36:	f001 fd13 	bl	8008660 <_Bfree>
 8006c3a:	2e00      	cmp	r6, #0
 8006c3c:	f43f aedf 	beq.w	80069fe <_dtoa_r+0x3a6>
 8006c40:	f1ba 0f00 	cmp.w	sl, #0
 8006c44:	d005      	beq.n	8006c52 <_dtoa_r+0x5fa>
 8006c46:	45b2      	cmp	sl, r6
 8006c48:	d003      	beq.n	8006c52 <_dtoa_r+0x5fa>
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f001 fd07 	bl	8008660 <_Bfree>
 8006c52:	4631      	mov	r1, r6
 8006c54:	4620      	mov	r0, r4
 8006c56:	f001 fd03 	bl	8008660 <_Bfree>
 8006c5a:	e6d0      	b.n	80069fe <_dtoa_r+0x3a6>
 8006c5c:	201c      	movs	r0, #28
 8006c5e:	e783      	b.n	8006b68 <_dtoa_r+0x510>
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <_dtoa_r+0x61c>)
 8006c62:	9a02      	ldr	r2, [sp, #8]
 8006c64:	1b5b      	subs	r3, r3, r5
 8006c66:	fa02 f003 	lsl.w	r0, r2, r3
 8006c6a:	e56d      	b.n	8006748 <_dtoa_r+0xf0>
 8006c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c6e:	e5b4      	b.n	80067da <_dtoa_r+0x182>
 8006c70:	40240000 	.word	0x40240000
 8006c74:	fffffbee 	.word	0xfffffbee
 8006c78:	4631      	mov	r1, r6
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	220a      	movs	r2, #10
 8006c80:	f001 fcf8 	bl	8008674 <__multadd>
 8006c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	4606      	mov	r6, r0
 8006c8a:	f340 840c 	ble.w	80074a6 <_dtoa_r+0xe4e>
 8006c8e:	9306      	str	r3, [sp, #24]
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	dd05      	ble.n	8006ca0 <_dtoa_r+0x648>
 8006c94:	4631      	mov	r1, r6
 8006c96:	462a      	mov	r2, r5
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f001 fe6f 	bl	800897c <__lshift>
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	f1b9 0f00 	cmp.w	r9, #0
 8006ca4:	f040 82e9 	bne.w	800727a <_dtoa_r+0xc22>
 8006ca8:	46b1      	mov	r9, r6
 8006caa:	9b06      	ldr	r3, [sp, #24]
 8006cac:	9a07      	ldr	r2, [sp, #28]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	18d3      	adds	r3, r2, r3
 8006cb2:	9308      	str	r3, [sp, #32]
 8006cb4:	9b02      	ldr	r3, [sp, #8]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	9309      	str	r3, [sp, #36]	; 0x24
 8006cbc:	4617      	mov	r7, r2
 8006cbe:	4641      	mov	r1, r8
 8006cc0:	4658      	mov	r0, fp
 8006cc2:	f7ff fc31 	bl	8006528 <quorem>
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4605      	mov	r5, r0
 8006cca:	4658      	mov	r0, fp
 8006ccc:	f001 feac 	bl	8008a28 <__mcmp>
 8006cd0:	464a      	mov	r2, r9
 8006cd2:	4682      	mov	sl, r0
 8006cd4:	4641      	mov	r1, r8
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f001 feca 	bl	8008a70 <__mdiff>
 8006cdc:	68c2      	ldr	r2, [r0, #12]
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	f040 81b8 	bne.w	800705a <_dtoa_r+0xa02>
 8006cea:	4619      	mov	r1, r3
 8006cec:	4658      	mov	r0, fp
 8006cee:	f8cd c018 	str.w	ip, [sp, #24]
 8006cf2:	9305      	str	r3, [sp, #20]
 8006cf4:	f001 fe98 	bl	8008a28 <__mcmp>
 8006cf8:	9b05      	ldr	r3, [sp, #20]
 8006cfa:	9002      	str	r0, [sp, #8]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4620      	mov	r0, r4
 8006d00:	f001 fcae 	bl	8008660 <_Bfree>
 8006d04:	9a02      	ldr	r2, [sp, #8]
 8006d06:	f8dd c018 	ldr.w	ip, [sp, #24]
 8006d0a:	b92a      	cbnz	r2, 8006d18 <_dtoa_r+0x6c0>
 8006d0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d0e:	b91b      	cbnz	r3, 8006d18 <_dtoa_r+0x6c0>
 8006d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 83a7 	beq.w	8007466 <_dtoa_r+0xe0e>
 8006d18:	f1ba 0f00 	cmp.w	sl, #0
 8006d1c:	f2c0 8251 	blt.w	80071c2 <_dtoa_r+0xb6a>
 8006d20:	d105      	bne.n	8006d2e <_dtoa_r+0x6d6>
 8006d22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006d24:	b91b      	cbnz	r3, 8006d2e <_dtoa_r+0x6d6>
 8006d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 824a 	beq.w	80071c2 <_dtoa_r+0xb6a>
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	f300 82b7 	bgt.w	80072a2 <_dtoa_r+0xc4a>
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	f887 c000 	strb.w	ip, [r7]
 8006d3a:	f107 0a01 	add.w	sl, r7, #1
 8006d3e:	429f      	cmp	r7, r3
 8006d40:	4655      	mov	r5, sl
 8006d42:	f000 82ba 	beq.w	80072ba <_dtoa_r+0xc62>
 8006d46:	4659      	mov	r1, fp
 8006d48:	220a      	movs	r2, #10
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f001 fc91 	bl	8008674 <__multadd>
 8006d52:	454e      	cmp	r6, r9
 8006d54:	4683      	mov	fp, r0
 8006d56:	4631      	mov	r1, r6
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f04f 020a 	mov.w	r2, #10
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	f000 8174 	beq.w	800704e <_dtoa_r+0x9f6>
 8006d66:	f001 fc85 	bl	8008674 <__multadd>
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	220a      	movs	r2, #10
 8006d70:	4620      	mov	r0, r4
 8006d72:	2300      	movs	r3, #0
 8006d74:	f001 fc7e 	bl	8008674 <__multadd>
 8006d78:	4657      	mov	r7, sl
 8006d7a:	4681      	mov	r9, r0
 8006d7c:	e79f      	b.n	8006cbe <_dtoa_r+0x666>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	9309      	str	r3, [sp, #36]	; 0x24
 8006d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f340 8213 	ble.w	80071b0 <_dtoa_r+0xb58>
 8006d8a:	461f      	mov	r7, r3
 8006d8c:	461e      	mov	r6, r3
 8006d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006d90:	9306      	str	r3, [sp, #24]
 8006d92:	2100      	movs	r1, #0
 8006d94:	2f17      	cmp	r7, #23
 8006d96:	6461      	str	r1, [r4, #68]	; 0x44
 8006d98:	d90a      	bls.n	8006db0 <_dtoa_r+0x758>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	f103 0014 	add.w	r0, r3, #20
 8006da4:	4287      	cmp	r7, r0
 8006da6:	4611      	mov	r1, r2
 8006da8:	f102 0201 	add.w	r2, r2, #1
 8006dac:	d2f7      	bcs.n	8006d9e <_dtoa_r+0x746>
 8006dae:	6461      	str	r1, [r4, #68]	; 0x44
 8006db0:	4620      	mov	r0, r4
 8006db2:	f001 fc2f 	bl	8008614 <_Balloc>
 8006db6:	2e0e      	cmp	r6, #14
 8006db8:	9007      	str	r0, [sp, #28]
 8006dba:	6420      	str	r0, [r4, #64]	; 0x40
 8006dbc:	f63f ad5c 	bhi.w	8006878 <_dtoa_r+0x220>
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	f43f ad59 	beq.w	8006878 <_dtoa_r+0x220>
 8006dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dca:	9904      	ldr	r1, [sp, #16]
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006dd2:	f340 8221 	ble.w	8007218 <_dtoa_r+0xbc0>
 8006dd6:	4bb7      	ldr	r3, [pc, #732]	; (80070b4 <_dtoa_r+0xa5c>)
 8006dd8:	f001 020f 	and.w	r2, r1, #15
 8006ddc:	110d      	asrs	r5, r1, #4
 8006dde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de2:	06e9      	lsls	r1, r5, #27
 8006de4:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006de8:	f140 81db 	bpl.w	80071a2 <_dtoa_r+0xb4a>
 8006dec:	4bb2      	ldr	r3, [pc, #712]	; (80070b8 <_dtoa_r+0xa60>)
 8006dee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006df2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006df6:	f7f9 fd4b 	bl	8000890 <__aeabi_ddiv>
 8006dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dfe:	f005 050f 	and.w	r5, r5, #15
 8006e02:	f04f 0803 	mov.w	r8, #3
 8006e06:	b18d      	cbz	r5, 8006e2c <_dtoa_r+0x7d4>
 8006e08:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80070b8 <_dtoa_r+0xa60>
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	4639      	mov	r1, r7
 8006e10:	07ea      	lsls	r2, r5, #31
 8006e12:	d505      	bpl.n	8006e20 <_dtoa_r+0x7c8>
 8006e14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e18:	f108 0801 	add.w	r8, r8, #1
 8006e1c:	f7f9 fc0e 	bl	800063c <__aeabi_dmul>
 8006e20:	106d      	asrs	r5, r5, #1
 8006e22:	f109 0908 	add.w	r9, r9, #8
 8006e26:	d1f3      	bne.n	8006e10 <_dtoa_r+0x7b8>
 8006e28:	4606      	mov	r6, r0
 8006e2a:	460f      	mov	r7, r1
 8006e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e30:	4632      	mov	r2, r6
 8006e32:	463b      	mov	r3, r7
 8006e34:	f7f9 fd2c 	bl	8000890 <__aeabi_ddiv>
 8006e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e3e:	b143      	cbz	r3, 8006e52 <_dtoa_r+0x7fa>
 8006e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	4b9d      	ldr	r3, [pc, #628]	; (80070bc <_dtoa_r+0xa64>)
 8006e48:	f7f9 fe6a 	bl	8000b20 <__aeabi_dcmplt>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f040 82ac 	bne.w	80073aa <_dtoa_r+0xd52>
 8006e52:	4640      	mov	r0, r8
 8006e54:	f7f9 fb8c 	bl	8000570 <__aeabi_i2d>
 8006e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e5c:	f7f9 fbee 	bl	800063c <__aeabi_dmul>
 8006e60:	4b97      	ldr	r3, [pc, #604]	; (80070c0 <_dtoa_r+0xa68>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	f7f9 fa38 	bl	80002d8 <__adddf3>
 8006e68:	9b06      	ldr	r3, [sp, #24]
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8162 	beq.w	800713a <_dtoa_r+0xae2>
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8006e7c:	9312      	str	r3, [sp, #72]	; 0x48
 8006e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f000 8221 	beq.w	80072c8 <_dtoa_r+0xc70>
 8006e86:	4b8b      	ldr	r3, [pc, #556]	; (80070b4 <_dtoa_r+0xa5c>)
 8006e88:	498e      	ldr	r1, [pc, #568]	; (80070c4 <_dtoa_r+0xa6c>)
 8006e8a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006e8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e92:	2000      	movs	r0, #0
 8006e94:	f7f9 fcfc 	bl	8000890 <__aeabi_ddiv>
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	f7f9 fa1a 	bl	80002d4 <__aeabi_dsub>
 8006ea0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ea4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7f9 fe60 	bl	8000b70 <__aeabi_d2iz>
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	f7f9 fb5d 	bl	8000570 <__aeabi_i2d>
 8006eb6:	3530      	adds	r5, #48	; 0x30
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 fa08 	bl	80002d4 <__aeabi_dsub>
 8006ec4:	fa5f f885 	uxtb.w	r8, r5
 8006ec8:	9d07      	ldr	r5, [sp, #28]
 8006eca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ece:	f885 8000 	strb.w	r8, [r5]
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460f      	mov	r7, r1
 8006ed6:	3501      	adds	r5, #1
 8006ed8:	f7f9 fe22 	bl	8000b20 <__aeabi_dcmplt>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 82b2 	bne.w	8007446 <_dtoa_r+0xdee>
 8006ee2:	4632      	mov	r2, r6
 8006ee4:	463b      	mov	r3, r7
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	4974      	ldr	r1, [pc, #464]	; (80070bc <_dtoa_r+0xa64>)
 8006eea:	f7f9 f9f3 	bl	80002d4 <__aeabi_dsub>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ef6:	f7f9 fe31 	bl	8000b5c <__aeabi_dcmpgt>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f040 82ac 	bne.w	8007458 <_dtoa_r+0xe00>
 8006f00:	f1b9 0f01 	cmp.w	r9, #1
 8006f04:	f340 8138 	ble.w	8007178 <_dtoa_r+0xb20>
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 8006f0e:	f8cd b008 	str.w	fp, [sp, #8]
 8006f12:	4499      	add	r9, r3
 8006f14:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8006f18:	46a0      	mov	r8, r4
 8006f1a:	e00d      	b.n	8006f38 <_dtoa_r+0x8e0>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	4967      	ldr	r1, [pc, #412]	; (80070bc <_dtoa_r+0xa64>)
 8006f20:	f7f9 f9d8 	bl	80002d4 <__aeabi_dsub>
 8006f24:	4652      	mov	r2, sl
 8006f26:	465b      	mov	r3, fp
 8006f28:	f7f9 fdfa 	bl	8000b20 <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f040 828e 	bne.w	800744e <_dtoa_r+0xdf6>
 8006f32:	454d      	cmp	r5, r9
 8006f34:	f000 811b 	beq.w	800716e <_dtoa_r+0xb16>
 8006f38:	4650      	mov	r0, sl
 8006f3a:	4659      	mov	r1, fp
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	4b62      	ldr	r3, [pc, #392]	; (80070c8 <_dtoa_r+0xa70>)
 8006f40:	f7f9 fb7c 	bl	800063c <__aeabi_dmul>
 8006f44:	2200      	movs	r2, #0
 8006f46:	4b60      	ldr	r3, [pc, #384]	; (80070c8 <_dtoa_r+0xa70>)
 8006f48:	4682      	mov	sl, r0
 8006f4a:	468b      	mov	fp, r1
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 fb74 	bl	800063c <__aeabi_dmul>
 8006f54:	460f      	mov	r7, r1
 8006f56:	4606      	mov	r6, r0
 8006f58:	f7f9 fe0a 	bl	8000b70 <__aeabi_d2iz>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	f7f9 fb07 	bl	8000570 <__aeabi_i2d>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 f9b3 	bl	80002d4 <__aeabi_dsub>
 8006f6e:	3430      	adds	r4, #48	; 0x30
 8006f70:	b2e4      	uxtb	r4, r4
 8006f72:	4652      	mov	r2, sl
 8006f74:	465b      	mov	r3, fp
 8006f76:	f805 4b01 	strb.w	r4, [r5], #1
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	460f      	mov	r7, r1
 8006f7e:	f7f9 fdcf 	bl	8000b20 <__aeabi_dcmplt>
 8006f82:	4632      	mov	r2, r6
 8006f84:	463b      	mov	r3, r7
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d0c8      	beq.n	8006f1c <_dtoa_r+0x8c4>
 8006f8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f8c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	4644      	mov	r4, r8
 8006f94:	e533      	b.n	80069fe <_dtoa_r+0x3a6>
 8006f96:	2300      	movs	r3, #0
 8006f98:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f9c:	9a04      	ldr	r2, [sp, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	930c      	str	r3, [sp, #48]	; 0x30
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	9306      	str	r3, [sp, #24]
 8006fa8:	f340 8109 	ble.w	80071be <_dtoa_r+0xb66>
 8006fac:	9e06      	ldr	r6, [sp, #24]
 8006fae:	4637      	mov	r7, r6
 8006fb0:	e6ef      	b.n	8006d92 <_dtoa_r+0x73a>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb6:	e6e4      	b.n	8006d82 <_dtoa_r+0x72a>
 8006fb8:	9b06      	ldr	r3, [sp, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f73f ac6d 	bgt.w	800689a <_dtoa_r+0x242>
 8006fc0:	f040 8262 	bne.w	8007488 <_dtoa_r+0xe30>
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4b40      	ldr	r3, [pc, #256]	; (80070cc <_dtoa_r+0xa74>)
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 fb36 	bl	800063c <__aeabi_dmul>
 8006fd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd4:	f7f9 fdb8 	bl	8000b48 <__aeabi_dcmpge>
 8006fd8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006fdc:	4646      	mov	r6, r8
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f000 808a 	beq.w	80070f8 <_dtoa_r+0xaa0>
 8006fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fe6:	9d07      	ldr	r5, [sp, #28]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	9304      	str	r3, [sp, #16]
 8006fec:	4641      	mov	r1, r8
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f001 fb36 	bl	8008660 <_Bfree>
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	f47f ae2c 	bne.w	8006c52 <_dtoa_r+0x5fa>
 8006ffa:	e500      	b.n	80069fe <_dtoa_r+0x3a6>
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	4620      	mov	r0, r4
 8007000:	f001 fc6c 	bl	80088dc <__pow5mult>
 8007004:	4683      	mov	fp, r0
 8007006:	e557      	b.n	8006ab8 <_dtoa_r+0x460>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	f47f ad66 	bne.w	8006adc <_dtoa_r+0x484>
 8007010:	9b03      	ldr	r3, [sp, #12]
 8007012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007016:	2b00      	cmp	r3, #0
 8007018:	f47f ad94 	bne.w	8006b44 <_dtoa_r+0x4ec>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8007022:	0d3f      	lsrs	r7, r7, #20
 8007024:	053f      	lsls	r7, r7, #20
 8007026:	2f00      	cmp	r7, #0
 8007028:	f000 821a 	beq.w	8007460 <_dtoa_r+0xe08>
 800702c:	9b05      	ldr	r3, [sp, #20]
 800702e:	3301      	adds	r3, #1
 8007030:	9305      	str	r3, [sp, #20]
 8007032:	f10a 0a01 	add.w	sl, sl, #1
 8007036:	f04f 0901 	mov.w	r9, #1
 800703a:	e585      	b.n	8006b48 <_dtoa_r+0x4f0>
 800703c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800703e:	2a00      	cmp	r2, #0
 8007040:	f000 81a5 	beq.w	800738e <_dtoa_r+0xd36>
 8007044:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007048:	9f08      	ldr	r7, [sp, #32]
 800704a:	9d05      	ldr	r5, [sp, #20]
 800704c:	e4ff      	b.n	8006a4e <_dtoa_r+0x3f6>
 800704e:	f001 fb11 	bl	8008674 <__multadd>
 8007052:	4657      	mov	r7, sl
 8007054:	4606      	mov	r6, r0
 8007056:	4681      	mov	r9, r0
 8007058:	e631      	b.n	8006cbe <_dtoa_r+0x666>
 800705a:	4601      	mov	r1, r0
 800705c:	4620      	mov	r0, r4
 800705e:	f8cd c008 	str.w	ip, [sp, #8]
 8007062:	f001 fafd 	bl	8008660 <_Bfree>
 8007066:	2201      	movs	r2, #1
 8007068:	f8dd c008 	ldr.w	ip, [sp, #8]
 800706c:	e654      	b.n	8006d18 <_dtoa_r+0x6c0>
 800706e:	4658      	mov	r0, fp
 8007070:	4641      	mov	r1, r8
 8007072:	f001 fcd9 	bl	8008a28 <__mcmp>
 8007076:	2800      	cmp	r0, #0
 8007078:	f6bf ad91 	bge.w	8006b9e <_dtoa_r+0x546>
 800707c:	9f04      	ldr	r7, [sp, #16]
 800707e:	4659      	mov	r1, fp
 8007080:	2300      	movs	r3, #0
 8007082:	4620      	mov	r0, r4
 8007084:	220a      	movs	r2, #10
 8007086:	3f01      	subs	r7, #1
 8007088:	9704      	str	r7, [sp, #16]
 800708a:	f001 faf3 	bl	8008674 <__multadd>
 800708e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007090:	4683      	mov	fp, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	f47f adf0 	bne.w	8006c78 <_dtoa_r+0x620>
 8007098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800709a:	2b00      	cmp	r3, #0
 800709c:	f340 81f8 	ble.w	8007490 <_dtoa_r+0xe38>
 80070a0:	9306      	str	r3, [sp, #24]
 80070a2:	e583      	b.n	8006bac <_dtoa_r+0x554>
 80070a4:	9807      	ldr	r0, [sp, #28]
 80070a6:	f7ff bb0b 	b.w	80066c0 <_dtoa_r+0x68>
 80070aa:	9b02      	ldr	r3, [sp, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f47f ad49 	bne.w	8006b44 <_dtoa_r+0x4ec>
 80070b2:	e7ad      	b.n	8007010 <_dtoa_r+0x9b8>
 80070b4:	08009f20 	.word	0x08009f20
 80070b8:	08009fe8 	.word	0x08009fe8
 80070bc:	3ff00000 	.word	0x3ff00000
 80070c0:	401c0000 	.word	0x401c0000
 80070c4:	3fe00000 	.word	0x3fe00000
 80070c8:	40240000 	.word	0x40240000
 80070cc:	40140000 	.word	0x40140000
 80070d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	f77f ad67 	ble.w	8006ba6 <_dtoa_r+0x54e>
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d182      	bne.n	8006fe4 <_dtoa_r+0x98c>
 80070de:	4641      	mov	r1, r8
 80070e0:	2205      	movs	r2, #5
 80070e2:	4620      	mov	r0, r4
 80070e4:	f001 fac6 	bl	8008674 <__multadd>
 80070e8:	4680      	mov	r8, r0
 80070ea:	4641      	mov	r1, r8
 80070ec:	4658      	mov	r0, fp
 80070ee:	f001 fc9b 	bl	8008a28 <__mcmp>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f77f af76 	ble.w	8006fe4 <_dtoa_r+0x98c>
 80070f8:	9a04      	ldr	r2, [sp, #16]
 80070fa:	9907      	ldr	r1, [sp, #28]
 80070fc:	2331      	movs	r3, #49	; 0x31
 80070fe:	3201      	adds	r2, #1
 8007100:	9204      	str	r2, [sp, #16]
 8007102:	700b      	strb	r3, [r1, #0]
 8007104:	1c4d      	adds	r5, r1, #1
 8007106:	e771      	b.n	8006fec <_dtoa_r+0x994>
 8007108:	9a04      	ldr	r2, [sp, #16]
 800710a:	3201      	adds	r2, #1
 800710c:	9204      	str	r2, [sp, #16]
 800710e:	9a07      	ldr	r2, [sp, #28]
 8007110:	2331      	movs	r3, #49	; 0x31
 8007112:	7013      	strb	r3, [r2, #0]
 8007114:	e58d      	b.n	8006c32 <_dtoa_r+0x5da>
 8007116:	f8dd b008 	ldr.w	fp, [sp, #8]
 800711a:	9c05      	ldr	r4, [sp, #20]
 800711c:	e46f      	b.n	80069fe <_dtoa_r+0x3a6>
 800711e:	4640      	mov	r0, r8
 8007120:	f7f9 fa26 	bl	8000570 <__aeabi_i2d>
 8007124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007128:	f7f9 fa88 	bl	800063c <__aeabi_dmul>
 800712c:	2200      	movs	r2, #0
 800712e:	4bbc      	ldr	r3, [pc, #752]	; (8007420 <_dtoa_r+0xdc8>)
 8007130:	f7f9 f8d2 	bl	80002d8 <__adddf3>
 8007134:	4606      	mov	r6, r0
 8007136:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800713a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800713e:	2200      	movs	r2, #0
 8007140:	4bb8      	ldr	r3, [pc, #736]	; (8007424 <_dtoa_r+0xdcc>)
 8007142:	f7f9 f8c7 	bl	80002d4 <__aeabi_dsub>
 8007146:	4632      	mov	r2, r6
 8007148:	463b      	mov	r3, r7
 800714a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800714e:	f7f9 fd05 	bl	8000b5c <__aeabi_dcmpgt>
 8007152:	4680      	mov	r8, r0
 8007154:	2800      	cmp	r0, #0
 8007156:	f040 80b3 	bne.w	80072c0 <_dtoa_r+0xc68>
 800715a:	4632      	mov	r2, r6
 800715c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007164:	f7f9 fcdc 	bl	8000b20 <__aeabi_dcmplt>
 8007168:	b130      	cbz	r0, 8007178 <_dtoa_r+0xb20>
 800716a:	4646      	mov	r6, r8
 800716c:	e73a      	b.n	8006fe4 <_dtoa_r+0x98c>
 800716e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007172:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007176:	4644      	mov	r4, r8
 8007178:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800717c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007180:	f7ff bb7a 	b.w	8006878 <_dtoa_r+0x220>
 8007184:	4659      	mov	r1, fp
 8007186:	9a08      	ldr	r2, [sp, #32]
 8007188:	4620      	mov	r0, r4
 800718a:	f001 fba7 	bl	80088dc <__pow5mult>
 800718e:	4683      	mov	fp, r0
 8007190:	e492      	b.n	8006ab8 <_dtoa_r+0x460>
 8007192:	9b08      	ldr	r3, [sp, #32]
 8007194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007196:	9708      	str	r7, [sp, #32]
 8007198:	1afb      	subs	r3, r7, r3
 800719a:	441a      	add	r2, r3
 800719c:	920a      	str	r2, [sp, #40]	; 0x28
 800719e:	2700      	movs	r7, #0
 80071a0:	e44f      	b.n	8006a42 <_dtoa_r+0x3ea>
 80071a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80071a6:	f04f 0802 	mov.w	r8, #2
 80071aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071ae:	e62a      	b.n	8006e06 <_dtoa_r+0x7ae>
 80071b0:	2601      	movs	r6, #1
 80071b2:	9621      	str	r6, [sp, #132]	; 0x84
 80071b4:	960c      	str	r6, [sp, #48]	; 0x30
 80071b6:	9606      	str	r6, [sp, #24]
 80071b8:	2100      	movs	r1, #0
 80071ba:	6461      	str	r1, [r4, #68]	; 0x44
 80071bc:	e5f8      	b.n	8006db0 <_dtoa_r+0x758>
 80071be:	461e      	mov	r6, r3
 80071c0:	e7fa      	b.n	80071b8 <_dtoa_r+0xb60>
 80071c2:	2a00      	cmp	r2, #0
 80071c4:	dd15      	ble.n	80071f2 <_dtoa_r+0xb9a>
 80071c6:	4659      	mov	r1, fp
 80071c8:	2201      	movs	r2, #1
 80071ca:	4620      	mov	r0, r4
 80071cc:	f8cd c008 	str.w	ip, [sp, #8]
 80071d0:	f001 fbd4 	bl	800897c <__lshift>
 80071d4:	4641      	mov	r1, r8
 80071d6:	4683      	mov	fp, r0
 80071d8:	f001 fc26 	bl	8008a28 <__mcmp>
 80071dc:	2800      	cmp	r0, #0
 80071de:	f8dd c008 	ldr.w	ip, [sp, #8]
 80071e2:	f340 814a 	ble.w	800747a <_dtoa_r+0xe22>
 80071e6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80071ea:	f000 8106 	beq.w	80073fa <_dtoa_r+0xda2>
 80071ee:	f10c 0c01 	add.w	ip, ip, #1
 80071f2:	46b2      	mov	sl, r6
 80071f4:	f887 c000 	strb.w	ip, [r7]
 80071f8:	1c7d      	adds	r5, r7, #1
 80071fa:	464e      	mov	r6, r9
 80071fc:	e519      	b.n	8006c32 <_dtoa_r+0x5da>
 80071fe:	d104      	bne.n	800720a <_dtoa_r+0xbb2>
 8007200:	f01c 0f01 	tst.w	ip, #1
 8007204:	d001      	beq.n	800720a <_dtoa_r+0xbb2>
 8007206:	e504      	b.n	8006c12 <_dtoa_r+0x5ba>
 8007208:	4615      	mov	r5, r2
 800720a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800720e:	2b30      	cmp	r3, #48	; 0x30
 8007210:	f105 32ff 	add.w	r2, r5, #4294967295
 8007214:	d0f8      	beq.n	8007208 <_dtoa_r+0xbb0>
 8007216:	e50c      	b.n	8006c32 <_dtoa_r+0x5da>
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	425d      	negs	r5, r3
 800721c:	2d00      	cmp	r5, #0
 800721e:	f000 80bd 	beq.w	800739c <_dtoa_r+0xd44>
 8007222:	4b81      	ldr	r3, [pc, #516]	; (8007428 <_dtoa_r+0xdd0>)
 8007224:	f005 020f 	and.w	r2, r5, #15
 8007228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007234:	f7f9 fa02 	bl	800063c <__aeabi_dmul>
 8007238:	112d      	asrs	r5, r5, #4
 800723a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800723e:	f000 812c 	beq.w	800749a <_dtoa_r+0xe42>
 8007242:	4e7a      	ldr	r6, [pc, #488]	; (800742c <_dtoa_r+0xdd4>)
 8007244:	f04f 0802 	mov.w	r8, #2
 8007248:	07eb      	lsls	r3, r5, #31
 800724a:	d505      	bpl.n	8007258 <_dtoa_r+0xc00>
 800724c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007250:	f108 0801 	add.w	r8, r8, #1
 8007254:	f7f9 f9f2 	bl	800063c <__aeabi_dmul>
 8007258:	106d      	asrs	r5, r5, #1
 800725a:	f106 0608 	add.w	r6, r6, #8
 800725e:	d1f3      	bne.n	8007248 <_dtoa_r+0xbf0>
 8007260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007264:	e5ea      	b.n	8006e3c <_dtoa_r+0x7e4>
 8007266:	9a04      	ldr	r2, [sp, #16]
 8007268:	3201      	adds	r2, #1
 800726a:	9204      	str	r2, [sp, #16]
 800726c:	9a07      	ldr	r2, [sp, #28]
 800726e:	2330      	movs	r3, #48	; 0x30
 8007270:	7013      	strb	r3, [r2, #0]
 8007272:	2331      	movs	r3, #49	; 0x31
 8007274:	7013      	strb	r3, [r2, #0]
 8007276:	f7ff bbc2 	b.w	80069fe <_dtoa_r+0x3a6>
 800727a:	6871      	ldr	r1, [r6, #4]
 800727c:	4620      	mov	r0, r4
 800727e:	f001 f9c9 	bl	8008614 <_Balloc>
 8007282:	6933      	ldr	r3, [r6, #16]
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	4605      	mov	r5, r0
 8007288:	0092      	lsls	r2, r2, #2
 800728a:	f106 010c 	add.w	r1, r6, #12
 800728e:	300c      	adds	r0, #12
 8007290:	f7f8 ff82 	bl	8000198 <memcpy>
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	2201      	movs	r2, #1
 800729a:	f001 fb6f 	bl	800897c <__lshift>
 800729e:	4681      	mov	r9, r0
 80072a0:	e503      	b.n	8006caa <_dtoa_r+0x652>
 80072a2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80072a6:	f000 80a8 	beq.w	80073fa <_dtoa_r+0xda2>
 80072aa:	f10c 0c01 	add.w	ip, ip, #1
 80072ae:	46b2      	mov	sl, r6
 80072b0:	f887 c000 	strb.w	ip, [r7]
 80072b4:	1c7d      	adds	r5, r7, #1
 80072b6:	464e      	mov	r6, r9
 80072b8:	e4bb      	b.n	8006c32 <_dtoa_r+0x5da>
 80072ba:	46b2      	mov	sl, r6
 80072bc:	464e      	mov	r6, r9
 80072be:	e498      	b.n	8006bf2 <_dtoa_r+0x59a>
 80072c0:	f04f 0800 	mov.w	r8, #0
 80072c4:	4646      	mov	r6, r8
 80072c6:	e717      	b.n	80070f8 <_dtoa_r+0xaa0>
 80072c8:	4957      	ldr	r1, [pc, #348]	; (8007428 <_dtoa_r+0xdd0>)
 80072ca:	f109 33ff 	add.w	r3, r9, #4294967295
 80072ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072d2:	4632      	mov	r2, r6
 80072d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80072d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072da:	463b      	mov	r3, r7
 80072dc:	f7f9 f9ae 	bl	800063c <__aeabi_dmul>
 80072e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072e8:	4639      	mov	r1, r7
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7f9 fc40 	bl	8000b70 <__aeabi_d2iz>
 80072f0:	4605      	mov	r5, r0
 80072f2:	f7f9 f93d 	bl	8000570 <__aeabi_i2d>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f8 ffe9 	bl	80002d4 <__aeabi_dsub>
 8007302:	9a07      	ldr	r2, [sp, #28]
 8007304:	3530      	adds	r5, #48	; 0x30
 8007306:	f1b9 0f01 	cmp.w	r9, #1
 800730a:	7015      	strb	r5, [r2, #0]
 800730c:	4606      	mov	r6, r0
 800730e:	460f      	mov	r7, r1
 8007310:	f102 0501 	add.w	r5, r2, #1
 8007314:	d023      	beq.n	800735e <_dtoa_r+0xd06>
 8007316:	9b07      	ldr	r3, [sp, #28]
 8007318:	f8cd a008 	str.w	sl, [sp, #8]
 800731c:	444b      	add	r3, r9
 800731e:	465e      	mov	r6, fp
 8007320:	469a      	mov	sl, r3
 8007322:	46ab      	mov	fp, r5
 8007324:	2200      	movs	r2, #0
 8007326:	4b42      	ldr	r3, [pc, #264]	; (8007430 <_dtoa_r+0xdd8>)
 8007328:	f7f9 f988 	bl	800063c <__aeabi_dmul>
 800732c:	4689      	mov	r9, r1
 800732e:	4680      	mov	r8, r0
 8007330:	f7f9 fc1e 	bl	8000b70 <__aeabi_d2iz>
 8007334:	4607      	mov	r7, r0
 8007336:	f7f9 f91b 	bl	8000570 <__aeabi_i2d>
 800733a:	3730      	adds	r7, #48	; 0x30
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4640      	mov	r0, r8
 8007342:	4649      	mov	r1, r9
 8007344:	f7f8 ffc6 	bl	80002d4 <__aeabi_dsub>
 8007348:	f80b 7b01 	strb.w	r7, [fp], #1
 800734c:	45d3      	cmp	fp, sl
 800734e:	d1e9      	bne.n	8007324 <_dtoa_r+0xccc>
 8007350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007352:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007356:	46b3      	mov	fp, r6
 8007358:	460f      	mov	r7, r1
 800735a:	4606      	mov	r6, r0
 800735c:	441d      	add	r5, r3
 800735e:	2200      	movs	r2, #0
 8007360:	4b34      	ldr	r3, [pc, #208]	; (8007434 <_dtoa_r+0xddc>)
 8007362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007366:	f7f8 ffb7 	bl	80002d8 <__adddf3>
 800736a:	4632      	mov	r2, r6
 800736c:	463b      	mov	r3, r7
 800736e:	f7f9 fbd7 	bl	8000b20 <__aeabi_dcmplt>
 8007372:	2800      	cmp	r0, #0
 8007374:	d047      	beq.n	8007406 <_dtoa_r+0xdae>
 8007376:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 800737e:	f7ff bb2c 	b.w	80069da <_dtoa_r+0x382>
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	9a06      	ldr	r2, [sp, #24]
 8007386:	1a9d      	subs	r5, r3, r2
 8007388:	2300      	movs	r3, #0
 800738a:	f7ff bb60 	b.w	8006a4e <_dtoa_r+0x3f6>
 800738e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007390:	9f08      	ldr	r7, [sp, #32]
 8007392:	9d05      	ldr	r5, [sp, #20]
 8007394:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007398:	f7ff bb59 	b.w	8006a4e <_dtoa_r+0x3f6>
 800739c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80073a0:	f04f 0802 	mov.w	r8, #2
 80073a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073a8:	e548      	b.n	8006e3c <_dtoa_r+0x7e4>
 80073aa:	9b06      	ldr	r3, [sp, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f43f aeb6 	beq.w	800711e <_dtoa_r+0xac6>
 80073b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	f77f aedf 	ble.w	8007178 <_dtoa_r+0xb20>
 80073ba:	2200      	movs	r2, #0
 80073bc:	4b1c      	ldr	r3, [pc, #112]	; (8007430 <_dtoa_r+0xdd8>)
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	f7f9 f93b 	bl	800063c <__aeabi_dmul>
 80073c6:	4606      	mov	r6, r0
 80073c8:	460f      	mov	r7, r1
 80073ca:	f108 0001 	add.w	r0, r8, #1
 80073ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80073d2:	f7f9 f8cd 	bl	8000570 <__aeabi_i2d>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 f92d 	bl	800063c <__aeabi_dmul>
 80073e2:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <_dtoa_r+0xdc8>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	f7f8 ff77 	bl	80002d8 <__adddf3>
 80073ea:	9b04      	ldr	r3, [sp, #16]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	4606      	mov	r6, r0
 80073f0:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 80073f4:	9312      	str	r3, [sp, #72]	; 0x48
 80073f6:	46a9      	mov	r9, r5
 80073f8:	e541      	b.n	8006e7e <_dtoa_r+0x826>
 80073fa:	2239      	movs	r2, #57	; 0x39
 80073fc:	46b2      	mov	sl, r6
 80073fe:	703a      	strb	r2, [r7, #0]
 8007400:	464e      	mov	r6, r9
 8007402:	1c7d      	adds	r5, r7, #1
 8007404:	e407      	b.n	8006c16 <_dtoa_r+0x5be>
 8007406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800740a:	2000      	movs	r0, #0
 800740c:	4909      	ldr	r1, [pc, #36]	; (8007434 <_dtoa_r+0xddc>)
 800740e:	f7f8 ff61 	bl	80002d4 <__aeabi_dsub>
 8007412:	4632      	mov	r2, r6
 8007414:	463b      	mov	r3, r7
 8007416:	f7f9 fba1 	bl	8000b5c <__aeabi_dcmpgt>
 800741a:	b970      	cbnz	r0, 800743a <_dtoa_r+0xde2>
 800741c:	e6ac      	b.n	8007178 <_dtoa_r+0xb20>
 800741e:	bf00      	nop
 8007420:	401c0000 	.word	0x401c0000
 8007424:	40140000 	.word	0x40140000
 8007428:	08009f20 	.word	0x08009f20
 800742c:	08009fe8 	.word	0x08009fe8
 8007430:	40240000 	.word	0x40240000
 8007434:	3fe00000 	.word	0x3fe00000
 8007438:	4615      	mov	r5, r2
 800743a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800743e:	2b30      	cmp	r3, #48	; 0x30
 8007440:	f105 32ff 	add.w	r2, r5, #4294967295
 8007444:	d0f8      	beq.n	8007438 <_dtoa_r+0xde0>
 8007446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	f7ff bad8 	b.w	80069fe <_dtoa_r+0x3a6>
 800744e:	4643      	mov	r3, r8
 8007450:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007454:	46a0      	mov	r8, r4
 8007456:	461c      	mov	r4, r3
 8007458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800745a:	9304      	str	r3, [sp, #16]
 800745c:	f7ff babd 	b.w	80069da <_dtoa_r+0x382>
 8007460:	46b9      	mov	r9, r7
 8007462:	f7ff bb71 	b.w	8006b48 <_dtoa_r+0x4f0>
 8007466:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800746a:	d0c6      	beq.n	80073fa <_dtoa_r+0xda2>
 800746c:	f1ba 0f00 	cmp.w	sl, #0
 8007470:	f77f aebf 	ble.w	80071f2 <_dtoa_r+0xb9a>
 8007474:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8007478:	e6bb      	b.n	80071f2 <_dtoa_r+0xb9a>
 800747a:	f47f aeba 	bne.w	80071f2 <_dtoa_r+0xb9a>
 800747e:	f01c 0f01 	tst.w	ip, #1
 8007482:	f43f aeb6 	beq.w	80071f2 <_dtoa_r+0xb9a>
 8007486:	e6ae      	b.n	80071e6 <_dtoa_r+0xb8e>
 8007488:	f04f 0800 	mov.w	r8, #0
 800748c:	4646      	mov	r6, r8
 800748e:	e5a9      	b.n	8006fe4 <_dtoa_r+0x98c>
 8007490:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007492:	2b02      	cmp	r3, #2
 8007494:	dc04      	bgt.n	80074a0 <_dtoa_r+0xe48>
 8007496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007498:	e602      	b.n	80070a0 <_dtoa_r+0xa48>
 800749a:	f04f 0802 	mov.w	r8, #2
 800749e:	e4cd      	b.n	8006e3c <_dtoa_r+0x7e4>
 80074a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	e618      	b.n	80070d8 <_dtoa_r+0xa80>
 80074a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	dcf9      	bgt.n	80074a0 <_dtoa_r+0xe48>
 80074ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ae:	f7ff bbee 	b.w	8006c8e <_dtoa_r+0x636>
 80074b2:	2500      	movs	r5, #0
 80074b4:	6465      	str	r5, [r4, #68]	; 0x44
 80074b6:	4629      	mov	r1, r5
 80074b8:	4620      	mov	r0, r4
 80074ba:	f001 f8ab 	bl	8008614 <_Balloc>
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
 80074c2:	9306      	str	r3, [sp, #24]
 80074c4:	930c      	str	r3, [sp, #48]	; 0x30
 80074c6:	2301      	movs	r3, #1
 80074c8:	9007      	str	r0, [sp, #28]
 80074ca:	9521      	str	r5, [sp, #132]	; 0x84
 80074cc:	6420      	str	r0, [r4, #64]	; 0x40
 80074ce:	9309      	str	r3, [sp, #36]	; 0x24
 80074d0:	f7ff b9d2 	b.w	8006878 <_dtoa_r+0x220>
 80074d4:	f43f ab4d 	beq.w	8006b72 <_dtoa_r+0x51a>
 80074d8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80074dc:	f7ff bb44 	b.w	8006b68 <_dtoa_r+0x510>
 80074e0:	2301      	movs	r3, #1
 80074e2:	9309      	str	r3, [sp, #36]	; 0x24
 80074e4:	e559      	b.n	8006f9a <_dtoa_r+0x942>
 80074e6:	2501      	movs	r5, #1
 80074e8:	f7ff b990 	b.w	800680c <_dtoa_r+0x1b4>
 80074ec:	f3af 8000 	nop.w

080074f0 <__sflush_r>:
 80074f0:	898b      	ldrh	r3, [r1, #12]
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f8:	460d      	mov	r5, r1
 80074fa:	0711      	lsls	r1, r2, #28
 80074fc:	4680      	mov	r8, r0
 80074fe:	d43c      	bmi.n	800757a <__sflush_r+0x8a>
 8007500:	686a      	ldr	r2, [r5, #4]
 8007502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007506:	2a00      	cmp	r2, #0
 8007508:	81ab      	strh	r3, [r5, #12]
 800750a:	dd65      	ble.n	80075d8 <__sflush_r+0xe8>
 800750c:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800750e:	2e00      	cmp	r6, #0
 8007510:	d04b      	beq.n	80075aa <__sflush_r+0xba>
 8007512:	b29b      	uxth	r3, r3
 8007514:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007518:	2100      	movs	r1, #0
 800751a:	b292      	uxth	r2, r2
 800751c:	f8d8 4000 	ldr.w	r4, [r8]
 8007520:	f8c8 1000 	str.w	r1, [r8]
 8007524:	2a00      	cmp	r2, #0
 8007526:	d05b      	beq.n	80075e0 <__sflush_r+0xf0>
 8007528:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800752a:	075f      	lsls	r7, r3, #29
 800752c:	d505      	bpl.n	800753a <__sflush_r+0x4a>
 800752e:	6869      	ldr	r1, [r5, #4]
 8007530:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007532:	1a52      	subs	r2, r2, r1
 8007534:	b10b      	cbz	r3, 800753a <__sflush_r+0x4a>
 8007536:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007538:	1ad2      	subs	r2, r2, r3
 800753a:	4640      	mov	r0, r8
 800753c:	69e9      	ldr	r1, [r5, #28]
 800753e:	2300      	movs	r3, #0
 8007540:	47b0      	blx	r6
 8007542:	1c46      	adds	r6, r0, #1
 8007544:	d056      	beq.n	80075f4 <__sflush_r+0x104>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	692a      	ldr	r2, [r5, #16]
 800754a:	602a      	str	r2, [r5, #0]
 800754c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007550:	b29b      	uxth	r3, r3
 8007552:	2200      	movs	r2, #0
 8007554:	606a      	str	r2, [r5, #4]
 8007556:	04da      	lsls	r2, r3, #19
 8007558:	81ab      	strh	r3, [r5, #12]
 800755a:	d43b      	bmi.n	80075d4 <__sflush_r+0xe4>
 800755c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800755e:	f8c8 4000 	str.w	r4, [r8]
 8007562:	b311      	cbz	r1, 80075aa <__sflush_r+0xba>
 8007564:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007568:	4299      	cmp	r1, r3
 800756a:	d002      	beq.n	8007572 <__sflush_r+0x82>
 800756c:	4640      	mov	r0, r8
 800756e:	f000 f9b7 	bl	80078e0 <_free_r>
 8007572:	2000      	movs	r0, #0
 8007574:	6328      	str	r0, [r5, #48]	; 0x30
 8007576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757a:	692e      	ldr	r6, [r5, #16]
 800757c:	b1ae      	cbz	r6, 80075aa <__sflush_r+0xba>
 800757e:	682c      	ldr	r4, [r5, #0]
 8007580:	602e      	str	r6, [r5, #0]
 8007582:	0791      	lsls	r1, r2, #30
 8007584:	bf0c      	ite	eq
 8007586:	696b      	ldreq	r3, [r5, #20]
 8007588:	2300      	movne	r3, #0
 800758a:	1ba4      	subs	r4, r4, r6
 800758c:	60ab      	str	r3, [r5, #8]
 800758e:	e00a      	b.n	80075a6 <__sflush_r+0xb6>
 8007590:	4632      	mov	r2, r6
 8007592:	4623      	mov	r3, r4
 8007594:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007596:	69e9      	ldr	r1, [r5, #28]
 8007598:	4640      	mov	r0, r8
 800759a:	47b8      	blx	r7
 800759c:	2800      	cmp	r0, #0
 800759e:	eba4 0400 	sub.w	r4, r4, r0
 80075a2:	4406      	add	r6, r0
 80075a4:	dd04      	ble.n	80075b0 <__sflush_r+0xc0>
 80075a6:	2c00      	cmp	r4, #0
 80075a8:	dcf2      	bgt.n	8007590 <__sflush_r+0xa0>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b0:	89ab      	ldrh	r3, [r5, #12]
 80075b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b6:	81ab      	strh	r3, [r5, #12]
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c0:	89ab      	ldrh	r3, [r5, #12]
 80075c2:	692a      	ldr	r2, [r5, #16]
 80075c4:	6069      	str	r1, [r5, #4]
 80075c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	81ab      	strh	r3, [r5, #12]
 80075ce:	04db      	lsls	r3, r3, #19
 80075d0:	602a      	str	r2, [r5, #0]
 80075d2:	d5c3      	bpl.n	800755c <__sflush_r+0x6c>
 80075d4:	6528      	str	r0, [r5, #80]	; 0x50
 80075d6:	e7c1      	b.n	800755c <__sflush_r+0x6c>
 80075d8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80075da:	2a00      	cmp	r2, #0
 80075dc:	dc96      	bgt.n	800750c <__sflush_r+0x1c>
 80075de:	e7e4      	b.n	80075aa <__sflush_r+0xba>
 80075e0:	2301      	movs	r3, #1
 80075e2:	4640      	mov	r0, r8
 80075e4:	69e9      	ldr	r1, [r5, #28]
 80075e6:	47b0      	blx	r6
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	4602      	mov	r2, r0
 80075ec:	d019      	beq.n	8007622 <__sflush_r+0x132>
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80075f2:	e79a      	b.n	800752a <__sflush_r+0x3a>
 80075f4:	f8d8 1000 	ldr.w	r1, [r8]
 80075f8:	2900      	cmp	r1, #0
 80075fa:	d0e1      	beq.n	80075c0 <__sflush_r+0xd0>
 80075fc:	291d      	cmp	r1, #29
 80075fe:	d007      	beq.n	8007610 <__sflush_r+0x120>
 8007600:	2916      	cmp	r1, #22
 8007602:	d005      	beq.n	8007610 <__sflush_r+0x120>
 8007604:	89ab      	ldrh	r3, [r5, #12]
 8007606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760a:	81ab      	strh	r3, [r5, #12]
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	89ab      	ldrh	r3, [r5, #12]
 8007612:	692a      	ldr	r2, [r5, #16]
 8007614:	602a      	str	r2, [r5, #0]
 8007616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800761a:	2200      	movs	r2, #0
 800761c:	81ab      	strh	r3, [r5, #12]
 800761e:	606a      	str	r2, [r5, #4]
 8007620:	e79c      	b.n	800755c <__sflush_r+0x6c>
 8007622:	f8d8 3000 	ldr.w	r3, [r8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0e1      	beq.n	80075ee <__sflush_r+0xfe>
 800762a:	2b1d      	cmp	r3, #29
 800762c:	d007      	beq.n	800763e <__sflush_r+0x14e>
 800762e:	2b16      	cmp	r3, #22
 8007630:	d005      	beq.n	800763e <__sflush_r+0x14e>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007638:	81ab      	strh	r3, [r5, #12]
 800763a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763e:	f8c8 4000 	str.w	r4, [r8]
 8007642:	e7b2      	b.n	80075aa <__sflush_r+0xba>

08007644 <_fflush_r>:
 8007644:	b510      	push	{r4, lr}
 8007646:	4604      	mov	r4, r0
 8007648:	b082      	sub	sp, #8
 800764a:	b108      	cbz	r0, 8007650 <_fflush_r+0xc>
 800764c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800764e:	b153      	cbz	r3, 8007666 <_fflush_r+0x22>
 8007650:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8007654:	b908      	cbnz	r0, 800765a <_fflush_r+0x16>
 8007656:	b002      	add	sp, #8
 8007658:	bd10      	pop	{r4, pc}
 800765a:	4620      	mov	r0, r4
 800765c:	b002      	add	sp, #8
 800765e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007662:	f7ff bf45 	b.w	80074f0 <__sflush_r>
 8007666:	9101      	str	r1, [sp, #4]
 8007668:	f000 f880 	bl	800776c <__sinit>
 800766c:	9901      	ldr	r1, [sp, #4]
 800766e:	e7ef      	b.n	8007650 <_fflush_r+0xc>

08007670 <_cleanup_r>:
 8007670:	4901      	ldr	r1, [pc, #4]	; (8007678 <_cleanup_r+0x8>)
 8007672:	f000 bb99 	b.w	8007da8 <_fwalk_reent>
 8007676:	bf00      	nop
 8007678:	08009341 	.word	0x08009341

0800767c <__sinit.part.1>:
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <__sinit.part.1+0xdc>)
 8007682:	6845      	ldr	r5, [r0, #4]
 8007684:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007686:	2400      	movs	r4, #0
 8007688:	4607      	mov	r7, r0
 800768a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800768e:	2304      	movs	r3, #4
 8007690:	2103      	movs	r1, #3
 8007692:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8007696:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 800769a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800769e:	b083      	sub	sp, #12
 80076a0:	602c      	str	r4, [r5, #0]
 80076a2:	606c      	str	r4, [r5, #4]
 80076a4:	60ac      	str	r4, [r5, #8]
 80076a6:	666c      	str	r4, [r5, #100]	; 0x64
 80076a8:	81ec      	strh	r4, [r5, #14]
 80076aa:	612c      	str	r4, [r5, #16]
 80076ac:	616c      	str	r4, [r5, #20]
 80076ae:	61ac      	str	r4, [r5, #24]
 80076b0:	81ab      	strh	r3, [r5, #12]
 80076b2:	4621      	mov	r1, r4
 80076b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80076b8:	2208      	movs	r2, #8
 80076ba:	f000 ff59 	bl	8008570 <memset>
 80076be:	68be      	ldr	r6, [r7, #8]
 80076c0:	f8df b098 	ldr.w	fp, [pc, #152]	; 800775c <__sinit.part.1+0xe0>
 80076c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007760 <__sinit.part.1+0xe4>
 80076c8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8007764 <__sinit.part.1+0xe8>
 80076cc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007768 <__sinit.part.1+0xec>
 80076d0:	f8c5 b020 	str.w	fp, [r5, #32]
 80076d4:	2301      	movs	r3, #1
 80076d6:	2209      	movs	r2, #9
 80076d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80076dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80076e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80076e4:	61ed      	str	r5, [r5, #28]
 80076e6:	4621      	mov	r1, r4
 80076e8:	81f3      	strh	r3, [r6, #14]
 80076ea:	81b2      	strh	r2, [r6, #12]
 80076ec:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80076f0:	6034      	str	r4, [r6, #0]
 80076f2:	6074      	str	r4, [r6, #4]
 80076f4:	60b4      	str	r4, [r6, #8]
 80076f6:	6674      	str	r4, [r6, #100]	; 0x64
 80076f8:	6134      	str	r4, [r6, #16]
 80076fa:	6174      	str	r4, [r6, #20]
 80076fc:	61b4      	str	r4, [r6, #24]
 80076fe:	2208      	movs	r2, #8
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	f000 ff35 	bl	8008570 <memset>
 8007706:	68fd      	ldr	r5, [r7, #12]
 8007708:	61f6      	str	r6, [r6, #28]
 800770a:	2012      	movs	r0, #18
 800770c:	2202      	movs	r2, #2
 800770e:	f8c6 b020 	str.w	fp, [r6, #32]
 8007712:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8007716:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 800771a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 800771e:	4621      	mov	r1, r4
 8007720:	81a8      	strh	r0, [r5, #12]
 8007722:	81ea      	strh	r2, [r5, #14]
 8007724:	602c      	str	r4, [r5, #0]
 8007726:	606c      	str	r4, [r5, #4]
 8007728:	60ac      	str	r4, [r5, #8]
 800772a:	666c      	str	r4, [r5, #100]	; 0x64
 800772c:	612c      	str	r4, [r5, #16]
 800772e:	616c      	str	r4, [r5, #20]
 8007730:	61ac      	str	r4, [r5, #24]
 8007732:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007736:	2208      	movs	r2, #8
 8007738:	f000 ff1a 	bl	8008570 <memset>
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	61ed      	str	r5, [r5, #28]
 8007740:	f8c5 b020 	str.w	fp, [r5, #32]
 8007744:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007748:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 800774c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007750:	63bb      	str	r3, [r7, #56]	; 0x38
 8007752:	b003      	add	sp, #12
 8007754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007758:	08007671 	.word	0x08007671
 800775c:	080090f9 	.word	0x080090f9
 8007760:	0800911d 	.word	0x0800911d
 8007764:	08009155 	.word	0x08009155
 8007768:	08009175 	.word	0x08009175

0800776c <__sinit>:
 800776c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800776e:	b103      	cbz	r3, 8007772 <__sinit+0x6>
 8007770:	4770      	bx	lr
 8007772:	f7ff bf83 	b.w	800767c <__sinit.part.1>
 8007776:	bf00      	nop

08007778 <__sfp_lock_acquire>:
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <__sfp_lock_release>:
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop

08007780 <_fputwc_r>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	8993      	ldrh	r3, [r2, #12]
 8007786:	4614      	mov	r4, r2
 8007788:	049a      	lsls	r2, r3, #18
 800778a:	b082      	sub	sp, #8
 800778c:	4607      	mov	r7, r0
 800778e:	460e      	mov	r6, r1
 8007790:	d406      	bmi.n	80077a0 <_fputwc_r+0x20>
 8007792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007794:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	6662      	str	r2, [r4, #100]	; 0x64
 80077a0:	f000 fb30 	bl	8007e04 <__locale_mb_cur_max>
 80077a4:	2801      	cmp	r0, #1
 80077a6:	d041      	beq.n	800782c <_fputwc_r+0xac>
 80077a8:	4638      	mov	r0, r7
 80077aa:	a901      	add	r1, sp, #4
 80077ac:	4632      	mov	r2, r6
 80077ae:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80077b2:	f001 fd37 	bl	8009224 <_wcrtomb_r>
 80077b6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077ba:	4680      	mov	r8, r0
 80077bc:	d02f      	beq.n	800781e <_fputwc_r+0x9e>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d03c      	beq.n	800783c <_fputwc_r+0xbc>
 80077c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80077c6:	2500      	movs	r5, #0
 80077c8:	e009      	b.n	80077de <_fputwc_r+0x5e>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	7019      	strb	r1, [r3, #0]
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	3501      	adds	r5, #1
 80077d6:	45a8      	cmp	r8, r5
 80077d8:	d930      	bls.n	800783c <_fputwc_r+0xbc>
 80077da:	ab01      	add	r3, sp, #4
 80077dc:	5d59      	ldrb	r1, [r3, r5]
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	daf0      	bge.n	80077ca <_fputwc_r+0x4a>
 80077e8:	69a2      	ldr	r2, [r4, #24]
 80077ea:	4293      	cmp	r3, r2
 80077ec:	db07      	blt.n	80077fe <_fputwc_r+0x7e>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	7019      	strb	r1, [r3, #0]
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	7819      	ldrb	r1, [r3, #0]
 80077f6:	290a      	cmp	r1, #10
 80077f8:	f103 0301 	add.w	r3, r3, #1
 80077fc:	d1e9      	bne.n	80077d2 <_fputwc_r+0x52>
 80077fe:	4638      	mov	r0, r7
 8007800:	4622      	mov	r2, r4
 8007802:	f001 fcbb 	bl	800917c <__swbuf_r>
 8007806:	f1a0 30ff 	sub.w	r0, r0, #4294967295
 800780a:	fab0 f080 	clz	r0, r0
 800780e:	0940      	lsrs	r0, r0, #5
 8007810:	2800      	cmp	r0, #0
 8007812:	d0df      	beq.n	80077d4 <_fputwc_r+0x54>
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	b002      	add	sp, #8
 800781a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	b002      	add	sp, #8
 8007828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800782c:	1e73      	subs	r3, r6, #1
 800782e:	2bfe      	cmp	r3, #254	; 0xfe
 8007830:	d8ba      	bhi.n	80077a8 <_fputwc_r+0x28>
 8007832:	b2f1      	uxtb	r1, r6
 8007834:	4680      	mov	r8, r0
 8007836:	f88d 1004 	strb.w	r1, [sp, #4]
 800783a:	e7c4      	b.n	80077c6 <_fputwc_r+0x46>
 800783c:	4630      	mov	r0, r6
 800783e:	b002      	add	sp, #8
 8007840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007844 <_malloc_trim_r>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	4f23      	ldr	r7, [pc, #140]	; (80078d4 <_malloc_trim_r+0x90>)
 8007848:	460c      	mov	r4, r1
 800784a:	4606      	mov	r6, r0
 800784c:	f000 fede 	bl	800860c <__malloc_lock>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	685d      	ldr	r5, [r3, #4]
 8007854:	f025 0503 	bic.w	r5, r5, #3
 8007858:	1b29      	subs	r1, r5, r4
 800785a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 800785e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007862:	f021 010f 	bic.w	r1, r1, #15
 8007866:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800786a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800786e:	db07      	blt.n	8007880 <_malloc_trim_r+0x3c>
 8007870:	4630      	mov	r0, r6
 8007872:	2100      	movs	r1, #0
 8007874:	f001 fbe4 	bl	8009040 <_sbrk_r>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	442b      	add	r3, r5
 800787c:	4298      	cmp	r0, r3
 800787e:	d004      	beq.n	800788a <_malloc_trim_r+0x46>
 8007880:	4630      	mov	r0, r6
 8007882:	f000 fec5 	bl	8008610 <__malloc_unlock>
 8007886:	2000      	movs	r0, #0
 8007888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788a:	4630      	mov	r0, r6
 800788c:	4261      	negs	r1, r4
 800788e:	f001 fbd7 	bl	8009040 <_sbrk_r>
 8007892:	3001      	adds	r0, #1
 8007894:	d00d      	beq.n	80078b2 <_malloc_trim_r+0x6e>
 8007896:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <_malloc_trim_r+0x94>)
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	1b2d      	subs	r5, r5, r4
 800789e:	f045 0501 	orr.w	r5, r5, #1
 80078a2:	4630      	mov	r0, r6
 80078a4:	1b09      	subs	r1, r1, r4
 80078a6:	6055      	str	r5, [r2, #4]
 80078a8:	6019      	str	r1, [r3, #0]
 80078aa:	f000 feb1 	bl	8008610 <__malloc_unlock>
 80078ae:	2001      	movs	r0, #1
 80078b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078b2:	4630      	mov	r0, r6
 80078b4:	2100      	movs	r1, #0
 80078b6:	f001 fbc3 	bl	8009040 <_sbrk_r>
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	1a83      	subs	r3, r0, r2
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	ddde      	ble.n	8007880 <_malloc_trim_r+0x3c>
 80078c2:	4c06      	ldr	r4, [pc, #24]	; (80078dc <_malloc_trim_r+0x98>)
 80078c4:	4904      	ldr	r1, [pc, #16]	; (80078d8 <_malloc_trim_r+0x94>)
 80078c6:	6824      	ldr	r4, [r4, #0]
 80078c8:	f043 0301 	orr.w	r3, r3, #1
 80078cc:	1b00      	subs	r0, r0, r4
 80078ce:	6053      	str	r3, [r2, #4]
 80078d0:	6008      	str	r0, [r1, #0]
 80078d2:	e7d5      	b.n	8007880 <_malloc_trim_r+0x3c>
 80078d4:	20000490 	.word	0x20000490
 80078d8:	2000a134 	.word	0x2000a134
 80078dc:	2000089c 	.word	0x2000089c

080078e0 <_free_r>:
 80078e0:	2900      	cmp	r1, #0
 80078e2:	d04e      	beq.n	8007982 <_free_r+0xa2>
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	460c      	mov	r4, r1
 80078ea:	4680      	mov	r8, r0
 80078ec:	f000 fe8e 	bl	800860c <__malloc_lock>
 80078f0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80078f4:	4962      	ldr	r1, [pc, #392]	; (8007a80 <_free_r+0x1a0>)
 80078f6:	f027 0201 	bic.w	r2, r7, #1
 80078fa:	f1a4 0508 	sub.w	r5, r4, #8
 80078fe:	18ab      	adds	r3, r5, r2
 8007900:	688e      	ldr	r6, [r1, #8]
 8007902:	6858      	ldr	r0, [r3, #4]
 8007904:	429e      	cmp	r6, r3
 8007906:	f020 0003 	bic.w	r0, r0, #3
 800790a:	d05a      	beq.n	80079c2 <_free_r+0xe2>
 800790c:	07fe      	lsls	r6, r7, #31
 800790e:	6058      	str	r0, [r3, #4]
 8007910:	d40b      	bmi.n	800792a <_free_r+0x4a>
 8007912:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8007916:	1bed      	subs	r5, r5, r7
 8007918:	f101 0e08 	add.w	lr, r1, #8
 800791c:	68ac      	ldr	r4, [r5, #8]
 800791e:	4574      	cmp	r4, lr
 8007920:	443a      	add	r2, r7
 8007922:	d067      	beq.n	80079f4 <_free_r+0x114>
 8007924:	68ef      	ldr	r7, [r5, #12]
 8007926:	60e7      	str	r7, [r4, #12]
 8007928:	60bc      	str	r4, [r7, #8]
 800792a:	181c      	adds	r4, r3, r0
 800792c:	6864      	ldr	r4, [r4, #4]
 800792e:	07e4      	lsls	r4, r4, #31
 8007930:	d40c      	bmi.n	800794c <_free_r+0x6c>
 8007932:	4f54      	ldr	r7, [pc, #336]	; (8007a84 <_free_r+0x1a4>)
 8007934:	689c      	ldr	r4, [r3, #8]
 8007936:	42bc      	cmp	r4, r7
 8007938:	4402      	add	r2, r0
 800793a:	d07c      	beq.n	8007a36 <_free_r+0x156>
 800793c:	68d8      	ldr	r0, [r3, #12]
 800793e:	60e0      	str	r0, [r4, #12]
 8007940:	f042 0301 	orr.w	r3, r2, #1
 8007944:	6084      	str	r4, [r0, #8]
 8007946:	606b      	str	r3, [r5, #4]
 8007948:	50aa      	str	r2, [r5, r2]
 800794a:	e003      	b.n	8007954 <_free_r+0x74>
 800794c:	f042 0301 	orr.w	r3, r2, #1
 8007950:	606b      	str	r3, [r5, #4]
 8007952:	50aa      	str	r2, [r5, r2]
 8007954:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007958:	d214      	bcs.n	8007984 <_free_r+0xa4>
 800795a:	08d2      	lsrs	r2, r2, #3
 800795c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8007960:	6848      	ldr	r0, [r1, #4]
 8007962:	689f      	ldr	r7, [r3, #8]
 8007964:	60af      	str	r7, [r5, #8]
 8007966:	1092      	asrs	r2, r2, #2
 8007968:	2401      	movs	r4, #1
 800796a:	fa04 f202 	lsl.w	r2, r4, r2
 800796e:	4310      	orrs	r0, r2
 8007970:	60eb      	str	r3, [r5, #12]
 8007972:	6048      	str	r0, [r1, #4]
 8007974:	609d      	str	r5, [r3, #8]
 8007976:	60fd      	str	r5, [r7, #12]
 8007978:	4640      	mov	r0, r8
 800797a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800797e:	f000 be47 	b.w	8008610 <__malloc_unlock>
 8007982:	4770      	bx	lr
 8007984:	0a53      	lsrs	r3, r2, #9
 8007986:	2b04      	cmp	r3, #4
 8007988:	d847      	bhi.n	8007a1a <_free_r+0x13a>
 800798a:	0993      	lsrs	r3, r2, #6
 800798c:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8007990:	0060      	lsls	r0, r4, #1
 8007992:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8007996:	493a      	ldr	r1, [pc, #232]	; (8007a80 <_free_r+0x1a0>)
 8007998:	6883      	ldr	r3, [r0, #8]
 800799a:	4283      	cmp	r3, r0
 800799c:	d043      	beq.n	8007a26 <_free_r+0x146>
 800799e:	6859      	ldr	r1, [r3, #4]
 80079a0:	f021 0103 	bic.w	r1, r1, #3
 80079a4:	4291      	cmp	r1, r2
 80079a6:	d902      	bls.n	80079ae <_free_r+0xce>
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4298      	cmp	r0, r3
 80079ac:	d1f7      	bne.n	800799e <_free_r+0xbe>
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	60ea      	str	r2, [r5, #12]
 80079b2:	60ab      	str	r3, [r5, #8]
 80079b4:	4640      	mov	r0, r8
 80079b6:	6095      	str	r5, [r2, #8]
 80079b8:	60dd      	str	r5, [r3, #12]
 80079ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079be:	f000 be27 	b.w	8008610 <__malloc_unlock>
 80079c2:	07ff      	lsls	r7, r7, #31
 80079c4:	4402      	add	r2, r0
 80079c6:	d407      	bmi.n	80079d8 <_free_r+0xf8>
 80079c8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80079cc:	1aed      	subs	r5, r5, r3
 80079ce:	441a      	add	r2, r3
 80079d0:	68a8      	ldr	r0, [r5, #8]
 80079d2:	68eb      	ldr	r3, [r5, #12]
 80079d4:	60c3      	str	r3, [r0, #12]
 80079d6:	6098      	str	r0, [r3, #8]
 80079d8:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <_free_r+0x1a8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f042 0001 	orr.w	r0, r2, #1
 80079e0:	429a      	cmp	r2, r3
 80079e2:	6068      	str	r0, [r5, #4]
 80079e4:	608d      	str	r5, [r1, #8]
 80079e6:	d3c7      	bcc.n	8007978 <_free_r+0x98>
 80079e8:	4b28      	ldr	r3, [pc, #160]	; (8007a8c <_free_r+0x1ac>)
 80079ea:	4640      	mov	r0, r8
 80079ec:	6819      	ldr	r1, [r3, #0]
 80079ee:	f7ff ff29 	bl	8007844 <_malloc_trim_r>
 80079f2:	e7c1      	b.n	8007978 <_free_r+0x98>
 80079f4:	1819      	adds	r1, r3, r0
 80079f6:	6849      	ldr	r1, [r1, #4]
 80079f8:	07c9      	lsls	r1, r1, #31
 80079fa:	d409      	bmi.n	8007a10 <_free_r+0x130>
 80079fc:	68d9      	ldr	r1, [r3, #12]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	4402      	add	r2, r0
 8007a02:	f042 0001 	orr.w	r0, r2, #1
 8007a06:	60d9      	str	r1, [r3, #12]
 8007a08:	608b      	str	r3, [r1, #8]
 8007a0a:	6068      	str	r0, [r5, #4]
 8007a0c:	50aa      	str	r2, [r5, r2]
 8007a0e:	e7b3      	b.n	8007978 <_free_r+0x98>
 8007a10:	f042 0301 	orr.w	r3, r2, #1
 8007a14:	606b      	str	r3, [r5, #4]
 8007a16:	50aa      	str	r2, [r5, r2]
 8007a18:	e7ae      	b.n	8007978 <_free_r+0x98>
 8007a1a:	2b14      	cmp	r3, #20
 8007a1c:	d814      	bhi.n	8007a48 <_free_r+0x168>
 8007a1e:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8007a22:	0060      	lsls	r0, r4, #1
 8007a24:	e7b5      	b.n	8007992 <_free_r+0xb2>
 8007a26:	684a      	ldr	r2, [r1, #4]
 8007a28:	10a4      	asrs	r4, r4, #2
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	40a0      	lsls	r0, r4
 8007a2e:	4302      	orrs	r2, r0
 8007a30:	604a      	str	r2, [r1, #4]
 8007a32:	461a      	mov	r2, r3
 8007a34:	e7bc      	b.n	80079b0 <_free_r+0xd0>
 8007a36:	f042 0301 	orr.w	r3, r2, #1
 8007a3a:	614d      	str	r5, [r1, #20]
 8007a3c:	610d      	str	r5, [r1, #16]
 8007a3e:	60ec      	str	r4, [r5, #12]
 8007a40:	60ac      	str	r4, [r5, #8]
 8007a42:	606b      	str	r3, [r5, #4]
 8007a44:	50aa      	str	r2, [r5, r2]
 8007a46:	e797      	b.n	8007978 <_free_r+0x98>
 8007a48:	2b54      	cmp	r3, #84	; 0x54
 8007a4a:	d804      	bhi.n	8007a56 <_free_r+0x176>
 8007a4c:	0b13      	lsrs	r3, r2, #12
 8007a4e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8007a52:	0060      	lsls	r0, r4, #1
 8007a54:	e79d      	b.n	8007992 <_free_r+0xb2>
 8007a56:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007a5a:	d804      	bhi.n	8007a66 <_free_r+0x186>
 8007a5c:	0bd3      	lsrs	r3, r2, #15
 8007a5e:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8007a62:	0060      	lsls	r0, r4, #1
 8007a64:	e795      	b.n	8007992 <_free_r+0xb2>
 8007a66:	f240 5054 	movw	r0, #1364	; 0x554
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	d804      	bhi.n	8007a78 <_free_r+0x198>
 8007a6e:	0c93      	lsrs	r3, r2, #18
 8007a70:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8007a74:	0060      	lsls	r0, r4, #1
 8007a76:	e78c      	b.n	8007992 <_free_r+0xb2>
 8007a78:	20fc      	movs	r0, #252	; 0xfc
 8007a7a:	247e      	movs	r4, #126	; 0x7e
 8007a7c:	e789      	b.n	8007992 <_free_r+0xb2>
 8007a7e:	bf00      	nop
 8007a80:	20000490 	.word	0x20000490
 8007a84:	20000498 	.word	0x20000498
 8007a88:	20000898 	.word	0x20000898
 8007a8c:	2000a130 	.word	0x2000a130

08007a90 <__sfvwrite_r>:
 8007a90:	6893      	ldr	r3, [r2, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d07a      	beq.n	8007b8c <__sfvwrite_r+0xfc>
 8007a96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
 8007a9e:	f01e 0f08 	tst.w	lr, #8
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	4681      	mov	r9, r0
 8007aa8:	4616      	mov	r6, r2
 8007aaa:	d026      	beq.n	8007afa <__sfvwrite_r+0x6a>
 8007aac:	690b      	ldr	r3, [r1, #16]
 8007aae:	b323      	cbz	r3, 8007afa <__sfvwrite_r+0x6a>
 8007ab0:	f00e 0802 	and.w	r8, lr, #2
 8007ab4:	fa1f f088 	uxth.w	r0, r8
 8007ab8:	6835      	ldr	r5, [r6, #0]
 8007aba:	b370      	cbz	r0, 8007b1a <__sfvwrite_r+0x8a>
 8007abc:	f04f 0a00 	mov.w	sl, #0
 8007ac0:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 8007da4 <__sfvwrite_r+0x314>
 8007ac4:	46d0      	mov	r8, sl
 8007ac6:	45d8      	cmp	r8, fp
 8007ac8:	4643      	mov	r3, r8
 8007aca:	4652      	mov	r2, sl
 8007acc:	bf28      	it	cs
 8007ace:	465b      	movcs	r3, fp
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f1b8 0f00 	cmp.w	r8, #0
 8007ad6:	d053      	beq.n	8007b80 <__sfvwrite_r+0xf0>
 8007ad8:	69e1      	ldr	r1, [r4, #28]
 8007ada:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007adc:	47b8      	blx	r7
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	dd73      	ble.n	8007bca <__sfvwrite_r+0x13a>
 8007ae2:	68b3      	ldr	r3, [r6, #8]
 8007ae4:	1a1b      	subs	r3, r3, r0
 8007ae6:	4482      	add	sl, r0
 8007ae8:	ebc0 0808 	rsb	r8, r0, r8
 8007aec:	60b3      	str	r3, [r6, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e9      	bne.n	8007ac6 <__sfvwrite_r+0x36>
 8007af2:	2000      	movs	r0, #0
 8007af4:	b003      	add	sp, #12
 8007af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afa:	4648      	mov	r0, r9
 8007afc:	4621      	mov	r1, r4
 8007afe:	f7fe fca9 	bl	8006454 <__swsetup_r>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	f040 8145 	bne.w	8007d92 <__sfvwrite_r+0x302>
 8007b08:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8007b0c:	6835      	ldr	r5, [r6, #0]
 8007b0e:	f00e 0802 	and.w	r8, lr, #2
 8007b12:	fa1f f088 	uxth.w	r0, r8
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d1d0      	bne.n	8007abc <__sfvwrite_r+0x2c>
 8007b1a:	f01e 0b01 	ands.w	fp, lr, #1
 8007b1e:	d15d      	bne.n	8007bdc <__sfvwrite_r+0x14c>
 8007b20:	46d8      	mov	r8, fp
 8007b22:	f1b8 0f00 	cmp.w	r8, #0
 8007b26:	d025      	beq.n	8007b74 <__sfvwrite_r+0xe4>
 8007b28:	f41e 7f00 	tst.w	lr, #512	; 0x200
 8007b2c:	68a7      	ldr	r7, [r4, #8]
 8007b2e:	d02f      	beq.n	8007b90 <__sfvwrite_r+0x100>
 8007b30:	45b8      	cmp	r8, r7
 8007b32:	46ba      	mov	sl, r7
 8007b34:	f0c0 80a9 	bcc.w	8007c8a <__sfvwrite_r+0x1fa>
 8007b38:	f41e 6f90 	tst.w	lr, #1152	; 0x480
 8007b3c:	f040 80b6 	bne.w	8007cac <__sfvwrite_r+0x21c>
 8007b40:	6820      	ldr	r0, [r4, #0]
 8007b42:	4652      	mov	r2, sl
 8007b44:	4659      	mov	r1, fp
 8007b46:	f000 fcaf 	bl	80084a8 <memmove>
 8007b4a:	68a0      	ldr	r0, [r4, #8]
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	1bc0      	subs	r0, r0, r7
 8007b50:	eb02 030a 	add.w	r3, r2, sl
 8007b54:	60a0      	str	r0, [r4, #8]
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	4640      	mov	r0, r8
 8007b5a:	68b3      	ldr	r3, [r6, #8]
 8007b5c:	1a1b      	subs	r3, r3, r0
 8007b5e:	4483      	add	fp, r0
 8007b60:	ebc0 0808 	rsb	r8, r0, r8
 8007b64:	60b3      	str	r3, [r6, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0c3      	beq.n	8007af2 <__sfvwrite_r+0x62>
 8007b6a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
 8007b6e:	f1b8 0f00 	cmp.w	r8, #0
 8007b72:	d1d9      	bne.n	8007b28 <__sfvwrite_r+0x98>
 8007b74:	f8d5 b000 	ldr.w	fp, [r5]
 8007b78:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007b7c:	3508      	adds	r5, #8
 8007b7e:	e7d0      	b.n	8007b22 <__sfvwrite_r+0x92>
 8007b80:	f8d5 a000 	ldr.w	sl, [r5]
 8007b84:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007b88:	3508      	adds	r5, #8
 8007b8a:	e79c      	b.n	8007ac6 <__sfvwrite_r+0x36>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	4770      	bx	lr
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	4298      	cmp	r0, r3
 8007b96:	d803      	bhi.n	8007ba0 <__sfvwrite_r+0x110>
 8007b98:	6962      	ldr	r2, [r4, #20]
 8007b9a:	4590      	cmp	r8, r2
 8007b9c:	f080 80b9 	bcs.w	8007d12 <__sfvwrite_r+0x282>
 8007ba0:	4547      	cmp	r7, r8
 8007ba2:	bf28      	it	cs
 8007ba4:	4647      	movcs	r7, r8
 8007ba6:	463a      	mov	r2, r7
 8007ba8:	4659      	mov	r1, fp
 8007baa:	f000 fc7d 	bl	80084a8 <memmove>
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	6822      	ldr	r2, [r4, #0]
 8007bb2:	1bdb      	subs	r3, r3, r7
 8007bb4:	443a      	add	r2, r7
 8007bb6:	60a3      	str	r3, [r4, #8]
 8007bb8:	6022      	str	r2, [r4, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d14a      	bne.n	8007c54 <__sfvwrite_r+0x1c4>
 8007bbe:	4648      	mov	r0, r9
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	f7ff fd3f 	bl	8007644 <_fflush_r>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d044      	beq.n	8007c54 <__sfvwrite_r+0x1c4>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	b003      	add	sp, #12
 8007bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bdc:	4680      	mov	r8, r0
 8007bde:	9000      	str	r0, [sp, #0]
 8007be0:	4683      	mov	fp, r0
 8007be2:	4682      	mov	sl, r0
 8007be4:	f1ba 0f00 	cmp.w	sl, #0
 8007be8:	d02c      	beq.n	8007c44 <__sfvwrite_r+0x1b4>
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d050      	beq.n	8007c92 <__sfvwrite_r+0x202>
 8007bf0:	6820      	ldr	r0, [r4, #0]
 8007bf2:	6921      	ldr	r1, [r4, #16]
 8007bf4:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8007bf8:	6962      	ldr	r2, [r4, #20]
 8007bfa:	45d0      	cmp	r8, sl
 8007bfc:	4643      	mov	r3, r8
 8007bfe:	bf28      	it	cs
 8007c00:	4653      	movcs	r3, sl
 8007c02:	4288      	cmp	r0, r1
 8007c04:	461f      	mov	r7, r3
 8007c06:	d904      	bls.n	8007c12 <__sfvwrite_r+0x182>
 8007c08:	eb0e 0c02 	add.w	ip, lr, r2
 8007c0c:	4563      	cmp	r3, ip
 8007c0e:	f300 8092 	bgt.w	8007d36 <__sfvwrite_r+0x2a6>
 8007c12:	4293      	cmp	r3, r2
 8007c14:	db20      	blt.n	8007c58 <__sfvwrite_r+0x1c8>
 8007c16:	4613      	mov	r3, r2
 8007c18:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007c1a:	69e1      	ldr	r1, [r4, #28]
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	465a      	mov	r2, fp
 8007c20:	47b8      	blx	r7
 8007c22:	1e07      	subs	r7, r0, #0
 8007c24:	ddd1      	ble.n	8007bca <__sfvwrite_r+0x13a>
 8007c26:	ebb8 0807 	subs.w	r8, r8, r7
 8007c2a:	d025      	beq.n	8007c78 <__sfvwrite_r+0x1e8>
 8007c2c:	68b3      	ldr	r3, [r6, #8]
 8007c2e:	1bdb      	subs	r3, r3, r7
 8007c30:	44bb      	add	fp, r7
 8007c32:	ebc7 0a0a 	rsb	sl, r7, sl
 8007c36:	60b3      	str	r3, [r6, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f43f af5a 	beq.w	8007af2 <__sfvwrite_r+0x62>
 8007c3e:	f1ba 0f00 	cmp.w	sl, #0
 8007c42:	d1d2      	bne.n	8007bea <__sfvwrite_r+0x15a>
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8d5 b000 	ldr.w	fp, [r5]
 8007c4a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	3508      	adds	r5, #8
 8007c52:	e7c7      	b.n	8007be4 <__sfvwrite_r+0x154>
 8007c54:	4638      	mov	r0, r7
 8007c56:	e780      	b.n	8007b5a <__sfvwrite_r+0xca>
 8007c58:	461a      	mov	r2, r3
 8007c5a:	4659      	mov	r1, fp
 8007c5c:	9301      	str	r3, [sp, #4]
 8007c5e:	f000 fc23 	bl	80084a8 <memmove>
 8007c62:	68a2      	ldr	r2, [r4, #8]
 8007c64:	6821      	ldr	r1, [r4, #0]
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	ebb8 0807 	subs.w	r8, r8, r7
 8007c6c:	eba2 0203 	sub.w	r2, r2, r3
 8007c70:	440b      	add	r3, r1
 8007c72:	60a2      	str	r2, [r4, #8]
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	d1d9      	bne.n	8007c2c <__sfvwrite_r+0x19c>
 8007c78:	4648      	mov	r0, r9
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	f7ff fce2 	bl	8007644 <_fflush_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d1a2      	bne.n	8007bca <__sfvwrite_r+0x13a>
 8007c84:	f8cd 8000 	str.w	r8, [sp]
 8007c88:	e7d0      	b.n	8007c2c <__sfvwrite_r+0x19c>
 8007c8a:	6820      	ldr	r0, [r4, #0]
 8007c8c:	4647      	mov	r7, r8
 8007c8e:	46c2      	mov	sl, r8
 8007c90:	e757      	b.n	8007b42 <__sfvwrite_r+0xb2>
 8007c92:	4658      	mov	r0, fp
 8007c94:	210a      	movs	r1, #10
 8007c96:	4652      	mov	r2, sl
 8007c98:	f000 fbbc 	bl	8008414 <memchr>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d073      	beq.n	8007d88 <__sfvwrite_r+0x2f8>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	ebcb 0800 	rsb	r8, fp, r0
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	e7a1      	b.n	8007bf0 <__sfvwrite_r+0x160>
 8007cac:	6967      	ldr	r7, [r4, #20]
 8007cae:	6921      	ldr	r1, [r4, #16]
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007cb6:	1a5b      	subs	r3, r3, r1
 8007cb8:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8007cbc:	1c58      	adds	r0, r3, #1
 8007cbe:	107f      	asrs	r7, r7, #1
 8007cc0:	4440      	add	r0, r8
 8007cc2:	4287      	cmp	r7, r0
 8007cc4:	463a      	mov	r2, r7
 8007cc6:	bf3c      	itt	cc
 8007cc8:	4607      	movcc	r7, r0
 8007cca:	463a      	movcc	r2, r7
 8007ccc:	f41e 6f80 	tst.w	lr, #1024	; 0x400
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	d046      	beq.n	8007d62 <__sfvwrite_r+0x2d2>
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4648      	mov	r0, r9
 8007cd8:	f000 f90e 	bl	8007ef8 <_malloc_r>
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	4682      	mov	sl, r0
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d059      	beq.n	8007d98 <__sfvwrite_r+0x308>
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6921      	ldr	r1, [r4, #16]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	f7f8 fa55 	bl	8000198 <memcpy>
 8007cee:	89a2      	ldrh	r2, [r4, #12]
 8007cf0:	9b00      	ldr	r3, [sp, #0]
 8007cf2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cfa:	81a2      	strh	r2, [r4, #12]
 8007cfc:	eb0a 0003 	add.w	r0, sl, r3
 8007d00:	1afb      	subs	r3, r7, r3
 8007d02:	f8c4 a010 	str.w	sl, [r4, #16]
 8007d06:	6167      	str	r7, [r4, #20]
 8007d08:	6020      	str	r0, [r4, #0]
 8007d0a:	60a3      	str	r3, [r4, #8]
 8007d0c:	4647      	mov	r7, r8
 8007d0e:	46c2      	mov	sl, r8
 8007d10:	e717      	b.n	8007b42 <__sfvwrite_r+0xb2>
 8007d12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007d16:	4543      	cmp	r3, r8
 8007d18:	bf28      	it	cs
 8007d1a:	4643      	movcs	r3, r8
 8007d1c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8007d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d22:	4648      	mov	r0, r9
 8007d24:	fb03 f302 	mul.w	r3, r3, r2
 8007d28:	69e1      	ldr	r1, [r4, #28]
 8007d2a:	465a      	mov	r2, fp
 8007d2c:	47b8      	blx	r7
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f73f af13 	bgt.w	8007b5a <__sfvwrite_r+0xca>
 8007d34:	e749      	b.n	8007bca <__sfvwrite_r+0x13a>
 8007d36:	4662      	mov	r2, ip
 8007d38:	4659      	mov	r1, fp
 8007d3a:	f8cd c004 	str.w	ip, [sp, #4]
 8007d3e:	f000 fbb3 	bl	80084a8 <memmove>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007d48:	4463      	add	r3, ip
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	4648      	mov	r0, r9
 8007d4e:	4621      	mov	r1, r4
 8007d50:	f7ff fc78 	bl	8007644 <_fflush_r>
 8007d54:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	f47f af36 	bne.w	8007bca <__sfvwrite_r+0x13a>
 8007d5e:	4667      	mov	r7, ip
 8007d60:	e761      	b.n	8007c26 <__sfvwrite_r+0x196>
 8007d62:	4648      	mov	r0, r9
 8007d64:	f000 ff4a 	bl	8008bfc <_realloc_r>
 8007d68:	9b00      	ldr	r3, [sp, #0]
 8007d6a:	4682      	mov	sl, r0
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d1c5      	bne.n	8007cfc <__sfvwrite_r+0x26c>
 8007d70:	4648      	mov	r0, r9
 8007d72:	6921      	ldr	r1, [r4, #16]
 8007d74:	f7ff fdb4 	bl	80078e0 <_free_r>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	220c      	movs	r2, #12
 8007d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f8c9 2000 	str.w	r2, [r9]
 8007d86:	e721      	b.n	8007bcc <__sfvwrite_r+0x13c>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f10a 0801 	add.w	r8, sl, #1
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	e72e      	b.n	8007bf0 <__sfvwrite_r+0x160>
 8007d92:	f04f 30ff 	mov.w	r0, #4294967295
 8007d96:	e6ad      	b.n	8007af4 <__sfvwrite_r+0x64>
 8007d98:	230c      	movs	r3, #12
 8007d9a:	f8c9 3000 	str.w	r3, [r9]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	e714      	b.n	8007bcc <__sfvwrite_r+0x13c>
 8007da2:	bf00      	nop
 8007da4:	7ffffc00 	.word	0x7ffffc00

08007da8 <_fwalk_reent>:
 8007da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dac:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8007db0:	d01f      	beq.n	8007df2 <_fwalk_reent+0x4a>
 8007db2:	4688      	mov	r8, r1
 8007db4:	4606      	mov	r6, r0
 8007db6:	f04f 0900 	mov.w	r9, #0
 8007dba:	687d      	ldr	r5, [r7, #4]
 8007dbc:	68bc      	ldr	r4, [r7, #8]
 8007dbe:	3d01      	subs	r5, #1
 8007dc0:	d411      	bmi.n	8007de6 <_fwalk_reent+0x3e>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	f105 35ff 	add.w	r5, r5, #4294967295
 8007dca:	d908      	bls.n	8007dde <_fwalk_reent+0x36>
 8007dcc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	d002      	beq.n	8007dde <_fwalk_reent+0x36>
 8007dd8:	47c0      	blx	r8
 8007dda:	ea49 0900 	orr.w	r9, r9, r0
 8007dde:	1c6b      	adds	r3, r5, #1
 8007de0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8007de4:	d1ed      	bne.n	8007dc2 <_fwalk_reent+0x1a>
 8007de6:	683f      	ldr	r7, [r7, #0]
 8007de8:	2f00      	cmp	r7, #0
 8007dea:	d1e6      	bne.n	8007dba <_fwalk_reent+0x12>
 8007dec:	4648      	mov	r0, r9
 8007dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df2:	46b9      	mov	r9, r7
 8007df4:	4648      	mov	r0, r9
 8007df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfa:	bf00      	nop

08007dfc <__locale_charset>:
 8007dfc:	4800      	ldr	r0, [pc, #0]	; (8007e00 <__locale_charset+0x4>)
 8007dfe:	4770      	bx	lr
 8007e00:	2000046c 	.word	0x2000046c

08007e04 <__locale_mb_cur_max>:
 8007e04:	4b01      	ldr	r3, [pc, #4]	; (8007e0c <__locale_mb_cur_max+0x8>)
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	2000048c 	.word	0x2000048c

08007e10 <_localeconv_r>:
 8007e10:	4800      	ldr	r0, [pc, #0]	; (8007e14 <_localeconv_r+0x4>)
 8007e12:	4770      	bx	lr
 8007e14:	20000434 	.word	0x20000434

08007e18 <__smakebuf_r>:
 8007e18:	898b      	ldrh	r3, [r1, #12]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f012 0f02 	tst.w	r2, #2
 8007e20:	d13c      	bne.n	8007e9c <__smakebuf_r+0x84>
 8007e22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e24:	460c      	mov	r4, r1
 8007e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	b091      	sub	sp, #68	; 0x44
 8007e2e:	4605      	mov	r5, r0
 8007e30:	db19      	blt.n	8007e66 <__smakebuf_r+0x4e>
 8007e32:	aa01      	add	r2, sp, #4
 8007e34:	f001 fac6 	bl	80093c4 <_fstat_r>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	db12      	blt.n	8007e62 <__smakebuf_r+0x4a>
 8007e3c:	9b02      	ldr	r3, [sp, #8]
 8007e3e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e46:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
 8007e4a:	fab7 f787 	clz	r7, r7
 8007e4e:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8007e52:	d02a      	beq.n	8007eaa <__smakebuf_r+0x92>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007e60:	e00b      	b.n	8007e7a <__smakebuf_r+0x62>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	bf0c      	ite	eq
 8007e72:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 8007e76:	2640      	movne	r6, #64	; 0x40
 8007e78:	2700      	movs	r7, #0
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	f000 f83b 	bl	8007ef8 <_malloc_r>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	b340      	cbz	r0, 8007ed8 <__smakebuf_r+0xc0>
 8007e86:	4a1a      	ldr	r2, [pc, #104]	; (8007ef0 <__smakebuf_r+0xd8>)
 8007e88:	63ea      	str	r2, [r5, #60]	; 0x3c
 8007e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e8e:	81a3      	strh	r3, [r4, #12]
 8007e90:	6020      	str	r0, [r4, #0]
 8007e92:	6120      	str	r0, [r4, #16]
 8007e94:	6166      	str	r6, [r4, #20]
 8007e96:	b99f      	cbnz	r7, 8007ec0 <__smakebuf_r+0xa8>
 8007e98:	b011      	add	sp, #68	; 0x44
 8007e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9c:	f101 0343 	add.w	r3, r1, #67	; 0x43
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	600b      	str	r3, [r1, #0]
 8007ea4:	610b      	str	r3, [r1, #16]
 8007ea6:	614a      	str	r2, [r1, #20]
 8007ea8:	4770      	bx	lr
 8007eaa:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <__smakebuf_r+0xdc>)
 8007eac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d1d0      	bne.n	8007e54 <__smakebuf_r+0x3c>
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007eb8:	4333      	orrs	r3, r6
 8007eba:	81a3      	strh	r3, [r4, #12]
 8007ebc:	64e6      	str	r6, [r4, #76]	; 0x4c
 8007ebe:	e7dc      	b.n	8007e7a <__smakebuf_r+0x62>
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec6:	f001 fa91 	bl	80093ec <_isatty_r>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d0e4      	beq.n	8007e98 <__smakebuf_r+0x80>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	e7df      	b.n	8007e98 <__smakebuf_r+0x80>
 8007ed8:	059a      	lsls	r2, r3, #22
 8007eda:	d4dd      	bmi.n	8007e98 <__smakebuf_r+0x80>
 8007edc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ee0:	f043 0302 	orr.w	r3, r3, #2
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	81a3      	strh	r3, [r4, #12]
 8007ee8:	6022      	str	r2, [r4, #0]
 8007eea:	6122      	str	r2, [r4, #16]
 8007eec:	6161      	str	r1, [r4, #20]
 8007eee:	e7d3      	b.n	8007e98 <__smakebuf_r+0x80>
 8007ef0:	08007671 	.word	0x08007671
 8007ef4:	08009155 	.word	0x08009155

08007ef8 <_malloc_r>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	f101 050b 	add.w	r5, r1, #11
 8007f00:	2d16      	cmp	r5, #22
 8007f02:	b083      	sub	sp, #12
 8007f04:	4606      	mov	r6, r0
 8007f06:	d927      	bls.n	8007f58 <_malloc_r+0x60>
 8007f08:	f035 0507 	bics.w	r5, r5, #7
 8007f0c:	f100 80b6 	bmi.w	800807c <_malloc_r+0x184>
 8007f10:	42a9      	cmp	r1, r5
 8007f12:	f200 80b3 	bhi.w	800807c <_malloc_r+0x184>
 8007f16:	f000 fb79 	bl	800860c <__malloc_lock>
 8007f1a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007f1e:	d222      	bcs.n	8007f66 <_malloc_r+0x6e>
 8007f20:	4fc2      	ldr	r7, [pc, #776]	; (800822c <_malloc_r+0x334>)
 8007f22:	08e8      	lsrs	r0, r5, #3
 8007f24:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8007f28:	68dc      	ldr	r4, [r3, #12]
 8007f2a:	429c      	cmp	r4, r3
 8007f2c:	f000 81c9 	beq.w	80082c2 <_malloc_r+0x3ca>
 8007f30:	6863      	ldr	r3, [r4, #4]
 8007f32:	68e1      	ldr	r1, [r4, #12]
 8007f34:	68a5      	ldr	r5, [r4, #8]
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	4423      	add	r3, r4
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	685a      	ldr	r2, [r3, #4]
 8007f40:	60e9      	str	r1, [r5, #12]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	608d      	str	r5, [r1, #8]
 8007f48:	605a      	str	r2, [r3, #4]
 8007f4a:	f000 fb61 	bl	8008610 <__malloc_unlock>
 8007f4e:	3408      	adds	r4, #8
 8007f50:	4620      	mov	r0, r4
 8007f52:	b003      	add	sp, #12
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	2910      	cmp	r1, #16
 8007f5a:	f200 808f 	bhi.w	800807c <_malloc_r+0x184>
 8007f5e:	f000 fb55 	bl	800860c <__malloc_lock>
 8007f62:	2510      	movs	r5, #16
 8007f64:	e7dc      	b.n	8007f20 <_malloc_r+0x28>
 8007f66:	0a68      	lsrs	r0, r5, #9
 8007f68:	f000 808f 	beq.w	800808a <_malloc_r+0x192>
 8007f6c:	2804      	cmp	r0, #4
 8007f6e:	f200 8154 	bhi.w	800821a <_malloc_r+0x322>
 8007f72:	09a8      	lsrs	r0, r5, #6
 8007f74:	3038      	adds	r0, #56	; 0x38
 8007f76:	0041      	lsls	r1, r0, #1
 8007f78:	4fac      	ldr	r7, [pc, #688]	; (800822c <_malloc_r+0x334>)
 8007f7a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8007f7e:	68cc      	ldr	r4, [r1, #12]
 8007f80:	42a1      	cmp	r1, r4
 8007f82:	d106      	bne.n	8007f92 <_malloc_r+0x9a>
 8007f84:	e00c      	b.n	8007fa0 <_malloc_r+0xa8>
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	f280 8082 	bge.w	8008090 <_malloc_r+0x198>
 8007f8c:	68e4      	ldr	r4, [r4, #12]
 8007f8e:	42a1      	cmp	r1, r4
 8007f90:	d006      	beq.n	8007fa0 <_malloc_r+0xa8>
 8007f92:	6863      	ldr	r3, [r4, #4]
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	1b5a      	subs	r2, r3, r5
 8007f9a:	2a0f      	cmp	r2, #15
 8007f9c:	ddf3      	ble.n	8007f86 <_malloc_r+0x8e>
 8007f9e:	3801      	subs	r0, #1
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	49a2      	ldr	r1, [pc, #648]	; (800822c <_malloc_r+0x334>)
 8007fa4:	693c      	ldr	r4, [r7, #16]
 8007fa6:	f101 0e08 	add.w	lr, r1, #8
 8007faa:	4574      	cmp	r4, lr
 8007fac:	f000 817e 	beq.w	80082ac <_malloc_r+0x3b4>
 8007fb0:	6863      	ldr	r3, [r4, #4]
 8007fb2:	f023 0303 	bic.w	r3, r3, #3
 8007fb6:	1b5a      	subs	r2, r3, r5
 8007fb8:	2a0f      	cmp	r2, #15
 8007fba:	f300 8164 	bgt.w	8008286 <_malloc_r+0x38e>
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	f8c1 e014 	str.w	lr, [r1, #20]
 8007fc4:	f8c1 e010 	str.w	lr, [r1, #16]
 8007fc8:	da73      	bge.n	80080b2 <_malloc_r+0x1ba>
 8007fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fce:	f080 8139 	bcs.w	8008244 <_malloc_r+0x34c>
 8007fd2:	08db      	lsrs	r3, r3, #3
 8007fd4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8007fd8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8007fdc:	684a      	ldr	r2, [r1, #4]
 8007fde:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8007fe2:	f8c4 9008 	str.w	r9, [r4, #8]
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	fa03 f30c 	lsl.w	r3, r3, ip
 8007fec:	4313      	orrs	r3, r2
 8007fee:	f8c4 800c 	str.w	r8, [r4, #12]
 8007ff2:	604b      	str	r3, [r1, #4]
 8007ff4:	f8c8 4008 	str.w	r4, [r8, #8]
 8007ff8:	f8c9 400c 	str.w	r4, [r9, #12]
 8007ffc:	1082      	asrs	r2, r0, #2
 8007ffe:	2401      	movs	r4, #1
 8008000:	4094      	lsls	r4, r2
 8008002:	429c      	cmp	r4, r3
 8008004:	d862      	bhi.n	80080cc <_malloc_r+0x1d4>
 8008006:	4223      	tst	r3, r4
 8008008:	d106      	bne.n	8008018 <_malloc_r+0x120>
 800800a:	f020 0003 	bic.w	r0, r0, #3
 800800e:	0064      	lsls	r4, r4, #1
 8008010:	4223      	tst	r3, r4
 8008012:	f100 0004 	add.w	r0, r0, #4
 8008016:	d0fa      	beq.n	800800e <_malloc_r+0x116>
 8008018:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 800801c:	46c4      	mov	ip, r8
 800801e:	4681      	mov	r9, r0
 8008020:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8008024:	459c      	cmp	ip, r3
 8008026:	d107      	bne.n	8008038 <_malloc_r+0x140>
 8008028:	e142      	b.n	80082b0 <_malloc_r+0x3b8>
 800802a:	2900      	cmp	r1, #0
 800802c:	f280 8152 	bge.w	80082d4 <_malloc_r+0x3dc>
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	459c      	cmp	ip, r3
 8008034:	f000 813c 	beq.w	80082b0 <_malloc_r+0x3b8>
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	f022 0203 	bic.w	r2, r2, #3
 800803e:	1b51      	subs	r1, r2, r5
 8008040:	290f      	cmp	r1, #15
 8008042:	ddf2      	ble.n	800802a <_malloc_r+0x132>
 8008044:	461c      	mov	r4, r3
 8008046:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800804a:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800804e:	195a      	adds	r2, r3, r5
 8008050:	f045 0901 	orr.w	r9, r5, #1
 8008054:	f041 0501 	orr.w	r5, r1, #1
 8008058:	f8c3 9004 	str.w	r9, [r3, #4]
 800805c:	4630      	mov	r0, r6
 800805e:	f8c8 c00c 	str.w	ip, [r8, #12]
 8008062:	f8cc 8008 	str.w	r8, [ip, #8]
 8008066:	617a      	str	r2, [r7, #20]
 8008068:	613a      	str	r2, [r7, #16]
 800806a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800806e:	f8c2 e008 	str.w	lr, [r2, #8]
 8008072:	6055      	str	r5, [r2, #4]
 8008074:	5051      	str	r1, [r2, r1]
 8008076:	f000 facb 	bl	8008610 <__malloc_unlock>
 800807a:	e769      	b.n	8007f50 <_malloc_r+0x58>
 800807c:	2400      	movs	r4, #0
 800807e:	230c      	movs	r3, #12
 8008080:	4620      	mov	r0, r4
 8008082:	6033      	str	r3, [r6, #0]
 8008084:	b003      	add	sp, #12
 8008086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808a:	217e      	movs	r1, #126	; 0x7e
 800808c:	203f      	movs	r0, #63	; 0x3f
 800808e:	e773      	b.n	8007f78 <_malloc_r+0x80>
 8008090:	4423      	add	r3, r4
 8008092:	68e1      	ldr	r1, [r4, #12]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	68a5      	ldr	r5, [r4, #8]
 8008098:	f042 0201 	orr.w	r2, r2, #1
 800809c:	60e9      	str	r1, [r5, #12]
 800809e:	4630      	mov	r0, r6
 80080a0:	608d      	str	r5, [r1, #8]
 80080a2:	605a      	str	r2, [r3, #4]
 80080a4:	f000 fab4 	bl	8008610 <__malloc_unlock>
 80080a8:	3408      	adds	r4, #8
 80080aa:	4620      	mov	r0, r4
 80080ac:	b003      	add	sp, #12
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	4423      	add	r3, r4
 80080b4:	4630      	mov	r0, r6
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	f042 0201 	orr.w	r2, r2, #1
 80080bc:	605a      	str	r2, [r3, #4]
 80080be:	f000 faa7 	bl	8008610 <__malloc_unlock>
 80080c2:	3408      	adds	r4, #8
 80080c4:	4620      	mov	r0, r4
 80080c6:	b003      	add	sp, #12
 80080c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080cc:	68bc      	ldr	r4, [r7, #8]
 80080ce:	6863      	ldr	r3, [r4, #4]
 80080d0:	f023 0803 	bic.w	r8, r3, #3
 80080d4:	4545      	cmp	r5, r8
 80080d6:	d804      	bhi.n	80080e2 <_malloc_r+0x1ea>
 80080d8:	ebc5 0308 	rsb	r3, r5, r8
 80080dc:	2b0f      	cmp	r3, #15
 80080de:	f300 808c 	bgt.w	80081fa <_malloc_r+0x302>
 80080e2:	4b53      	ldr	r3, [pc, #332]	; (8008230 <_malloc_r+0x338>)
 80080e4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8008240 <_malloc_r+0x348>
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f8da 3000 	ldr.w	r3, [sl]
 80080ee:	3301      	adds	r3, #1
 80080f0:	442a      	add	r2, r5
 80080f2:	eb04 0b08 	add.w	fp, r4, r8
 80080f6:	f000 8150 	beq.w	800839a <_malloc_r+0x4a2>
 80080fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80080fe:	320f      	adds	r2, #15
 8008100:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8008104:	f022 020f 	bic.w	r2, r2, #15
 8008108:	4611      	mov	r1, r2
 800810a:	4630      	mov	r0, r6
 800810c:	9201      	str	r2, [sp, #4]
 800810e:	f000 ff97 	bl	8009040 <_sbrk_r>
 8008112:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008116:	4681      	mov	r9, r0
 8008118:	9a01      	ldr	r2, [sp, #4]
 800811a:	f000 80f5 	beq.w	8008308 <_malloc_r+0x410>
 800811e:	4583      	cmp	fp, r0
 8008120:	f200 80ef 	bhi.w	8008302 <_malloc_r+0x40a>
 8008124:	4b43      	ldr	r3, [pc, #268]	; (8008234 <_malloc_r+0x33c>)
 8008126:	6819      	ldr	r1, [r3, #0]
 8008128:	45cb      	cmp	fp, r9
 800812a:	4411      	add	r1, r2
 800812c:	6019      	str	r1, [r3, #0]
 800812e:	f000 813d 	beq.w	80083ac <_malloc_r+0x4b4>
 8008132:	f8da 0000 	ldr.w	r0, [sl]
 8008136:	f8df e108 	ldr.w	lr, [pc, #264]	; 8008240 <_malloc_r+0x348>
 800813a:	3001      	adds	r0, #1
 800813c:	bf1b      	ittet	ne
 800813e:	ebcb 0b09 	rsbne	fp, fp, r9
 8008142:	4459      	addne	r1, fp
 8008144:	f8ce 9000 	streq.w	r9, [lr]
 8008148:	6019      	strne	r1, [r3, #0]
 800814a:	f019 0107 	ands.w	r1, r9, #7
 800814e:	f000 8107 	beq.w	8008360 <_malloc_r+0x468>
 8008152:	f1c1 0008 	rsb	r0, r1, #8
 8008156:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800815a:	4481      	add	r9, r0
 800815c:	3108      	adds	r1, #8
 800815e:	444a      	add	r2, r9
 8008160:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008164:	ebc2 0a01 	rsb	sl, r2, r1
 8008168:	4651      	mov	r1, sl
 800816a:	4630      	mov	r0, r6
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	f000 ff67 	bl	8009040 <_sbrk_r>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	9b01      	ldr	r3, [sp, #4]
 8008176:	f000 8127 	beq.w	80083c8 <_malloc_r+0x4d0>
 800817a:	ebc9 0200 	rsb	r2, r9, r0
 800817e:	4452      	add	r2, sl
 8008180:	f042 0201 	orr.w	r2, r2, #1
 8008184:	6819      	ldr	r1, [r3, #0]
 8008186:	f8c7 9008 	str.w	r9, [r7, #8]
 800818a:	4451      	add	r1, sl
 800818c:	42bc      	cmp	r4, r7
 800818e:	f8c9 2004 	str.w	r2, [r9, #4]
 8008192:	6019      	str	r1, [r3, #0]
 8008194:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8008234 <_malloc_r+0x33c>
 8008198:	d016      	beq.n	80081c8 <_malloc_r+0x2d0>
 800819a:	f1b8 0f0f 	cmp.w	r8, #15
 800819e:	f240 80e2 	bls.w	8008366 <_malloc_r+0x46e>
 80081a2:	6862      	ldr	r2, [r4, #4]
 80081a4:	f1a8 030c 	sub.w	r3, r8, #12
 80081a8:	f023 0307 	bic.w	r3, r3, #7
 80081ac:	18e0      	adds	r0, r4, r3
 80081ae:	f002 0201 	and.w	r2, r2, #1
 80081b2:	f04f 0e05 	mov.w	lr, #5
 80081b6:	431a      	orrs	r2, r3
 80081b8:	2b0f      	cmp	r3, #15
 80081ba:	6062      	str	r2, [r4, #4]
 80081bc:	f8c0 e004 	str.w	lr, [r0, #4]
 80081c0:	f8c0 e008 	str.w	lr, [r0, #8]
 80081c4:	f200 8104 	bhi.w	80083d0 <_malloc_r+0x4d8>
 80081c8:	4b1b      	ldr	r3, [pc, #108]	; (8008238 <_malloc_r+0x340>)
 80081ca:	68bc      	ldr	r4, [r7, #8]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4291      	cmp	r1, r2
 80081d0:	bf88      	it	hi
 80081d2:	6019      	strhi	r1, [r3, #0]
 80081d4:	4b19      	ldr	r3, [pc, #100]	; (800823c <_malloc_r+0x344>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	4291      	cmp	r1, r2
 80081da:	6862      	ldr	r2, [r4, #4]
 80081dc:	bf88      	it	hi
 80081de:	6019      	strhi	r1, [r3, #0]
 80081e0:	f022 0203 	bic.w	r2, r2, #3
 80081e4:	4295      	cmp	r5, r2
 80081e6:	eba2 0305 	sub.w	r3, r2, r5
 80081ea:	d801      	bhi.n	80081f0 <_malloc_r+0x2f8>
 80081ec:	2b0f      	cmp	r3, #15
 80081ee:	dc04      	bgt.n	80081fa <_malloc_r+0x302>
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 fa0d 	bl	8008610 <__malloc_unlock>
 80081f6:	2400      	movs	r4, #0
 80081f8:	e6aa      	b.n	8007f50 <_malloc_r+0x58>
 80081fa:	1962      	adds	r2, r4, r5
 80081fc:	f043 0301 	orr.w	r3, r3, #1
 8008200:	f045 0501 	orr.w	r5, r5, #1
 8008204:	6065      	str	r5, [r4, #4]
 8008206:	4630      	mov	r0, r6
 8008208:	60ba      	str	r2, [r7, #8]
 800820a:	6053      	str	r3, [r2, #4]
 800820c:	f000 fa00 	bl	8008610 <__malloc_unlock>
 8008210:	3408      	adds	r4, #8
 8008212:	4620      	mov	r0, r4
 8008214:	b003      	add	sp, #12
 8008216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821a:	2814      	cmp	r0, #20
 800821c:	d969      	bls.n	80082f2 <_malloc_r+0x3fa>
 800821e:	2854      	cmp	r0, #84	; 0x54
 8008220:	f200 8097 	bhi.w	8008352 <_malloc_r+0x45a>
 8008224:	0b28      	lsrs	r0, r5, #12
 8008226:	306e      	adds	r0, #110	; 0x6e
 8008228:	0041      	lsls	r1, r0, #1
 800822a:	e6a5      	b.n	8007f78 <_malloc_r+0x80>
 800822c:	20000490 	.word	0x20000490
 8008230:	2000a130 	.word	0x2000a130
 8008234:	2000a134 	.word	0x2000a134
 8008238:	2000a12c 	.word	0x2000a12c
 800823c:	2000a128 	.word	0x2000a128
 8008240:	2000089c 	.word	0x2000089c
 8008244:	0a5a      	lsrs	r2, r3, #9
 8008246:	2a04      	cmp	r2, #4
 8008248:	d956      	bls.n	80082f8 <_malloc_r+0x400>
 800824a:	2a14      	cmp	r2, #20
 800824c:	f200 80a7 	bhi.w	800839e <_malloc_r+0x4a6>
 8008250:	325b      	adds	r2, #91	; 0x5b
 8008252:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008256:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800825a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8008410 <_malloc_r+0x518>
 800825e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008262:	4561      	cmp	r1, ip
 8008264:	f000 8085 	beq.w	8008372 <_malloc_r+0x47a>
 8008268:	684a      	ldr	r2, [r1, #4]
 800826a:	f022 0203 	bic.w	r2, r2, #3
 800826e:	4293      	cmp	r3, r2
 8008270:	d202      	bcs.n	8008278 <_malloc_r+0x380>
 8008272:	6889      	ldr	r1, [r1, #8]
 8008274:	458c      	cmp	ip, r1
 8008276:	d1f7      	bne.n	8008268 <_malloc_r+0x370>
 8008278:	68ca      	ldr	r2, [r1, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60e2      	str	r2, [r4, #12]
 800827e:	60a1      	str	r1, [r4, #8]
 8008280:	6094      	str	r4, [r2, #8]
 8008282:	60cc      	str	r4, [r1, #12]
 8008284:	e6ba      	b.n	8007ffc <_malloc_r+0x104>
 8008286:	1963      	adds	r3, r4, r5
 8008288:	f042 0701 	orr.w	r7, r2, #1
 800828c:	f045 0501 	orr.w	r5, r5, #1
 8008290:	6065      	str	r5, [r4, #4]
 8008292:	4630      	mov	r0, r6
 8008294:	614b      	str	r3, [r1, #20]
 8008296:	610b      	str	r3, [r1, #16]
 8008298:	f8c3 e00c 	str.w	lr, [r3, #12]
 800829c:	f8c3 e008 	str.w	lr, [r3, #8]
 80082a0:	605f      	str	r7, [r3, #4]
 80082a2:	509a      	str	r2, [r3, r2]
 80082a4:	3408      	adds	r4, #8
 80082a6:	f000 f9b3 	bl	8008610 <__malloc_unlock>
 80082aa:	e651      	b.n	8007f50 <_malloc_r+0x58>
 80082ac:	684b      	ldr	r3, [r1, #4]
 80082ae:	e6a5      	b.n	8007ffc <_malloc_r+0x104>
 80082b0:	f109 0901 	add.w	r9, r9, #1
 80082b4:	f019 0f03 	tst.w	r9, #3
 80082b8:	f10c 0c08 	add.w	ip, ip, #8
 80082bc:	f47f aeb0 	bne.w	8008020 <_malloc_r+0x128>
 80082c0:	e02b      	b.n	800831a <_malloc_r+0x422>
 80082c2:	f104 0308 	add.w	r3, r4, #8
 80082c6:	6964      	ldr	r4, [r4, #20]
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	bf08      	it	eq
 80082cc:	3002      	addeq	r0, #2
 80082ce:	f43f ae68 	beq.w	8007fa2 <_malloc_r+0xaa>
 80082d2:	e62d      	b.n	8007f30 <_malloc_r+0x38>
 80082d4:	441a      	add	r2, r3
 80082d6:	461c      	mov	r4, r3
 80082d8:	6851      	ldr	r1, [r2, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80082e0:	f041 0101 	orr.w	r1, r1, #1
 80082e4:	6051      	str	r1, [r2, #4]
 80082e6:	4630      	mov	r0, r6
 80082e8:	60eb      	str	r3, [r5, #12]
 80082ea:	609d      	str	r5, [r3, #8]
 80082ec:	f000 f990 	bl	8008610 <__malloc_unlock>
 80082f0:	e62e      	b.n	8007f50 <_malloc_r+0x58>
 80082f2:	305b      	adds	r0, #91	; 0x5b
 80082f4:	0041      	lsls	r1, r0, #1
 80082f6:	e63f      	b.n	8007f78 <_malloc_r+0x80>
 80082f8:	099a      	lsrs	r2, r3, #6
 80082fa:	3238      	adds	r2, #56	; 0x38
 80082fc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008300:	e7a9      	b.n	8008256 <_malloc_r+0x35e>
 8008302:	42bc      	cmp	r4, r7
 8008304:	f43f af0e 	beq.w	8008124 <_malloc_r+0x22c>
 8008308:	68bc      	ldr	r4, [r7, #8]
 800830a:	6862      	ldr	r2, [r4, #4]
 800830c:	f022 0203 	bic.w	r2, r2, #3
 8008310:	e768      	b.n	80081e4 <_malloc_r+0x2ec>
 8008312:	f8d8 8000 	ldr.w	r8, [r8]
 8008316:	4598      	cmp	r8, r3
 8008318:	d177      	bne.n	800840a <_malloc_r+0x512>
 800831a:	f010 0f03 	tst.w	r0, #3
 800831e:	f1a8 0308 	sub.w	r3, r8, #8
 8008322:	f100 30ff 	add.w	r0, r0, #4294967295
 8008326:	d1f4      	bne.n	8008312 <_malloc_r+0x41a>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	ea23 0304 	bic.w	r3, r3, r4
 800832e:	607b      	str	r3, [r7, #4]
 8008330:	0064      	lsls	r4, r4, #1
 8008332:	429c      	cmp	r4, r3
 8008334:	f63f aeca 	bhi.w	80080cc <_malloc_r+0x1d4>
 8008338:	2c00      	cmp	r4, #0
 800833a:	f43f aec7 	beq.w	80080cc <_malloc_r+0x1d4>
 800833e:	4223      	tst	r3, r4
 8008340:	4648      	mov	r0, r9
 8008342:	f47f ae69 	bne.w	8008018 <_malloc_r+0x120>
 8008346:	0064      	lsls	r4, r4, #1
 8008348:	4223      	tst	r3, r4
 800834a:	f100 0004 	add.w	r0, r0, #4
 800834e:	d0fa      	beq.n	8008346 <_malloc_r+0x44e>
 8008350:	e662      	b.n	8008018 <_malloc_r+0x120>
 8008352:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8008356:	d818      	bhi.n	800838a <_malloc_r+0x492>
 8008358:	0be8      	lsrs	r0, r5, #15
 800835a:	3077      	adds	r0, #119	; 0x77
 800835c:	0041      	lsls	r1, r0, #1
 800835e:	e60b      	b.n	8007f78 <_malloc_r+0x80>
 8008360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008364:	e6fb      	b.n	800815e <_malloc_r+0x266>
 8008366:	2301      	movs	r3, #1
 8008368:	f8c9 3004 	str.w	r3, [r9, #4]
 800836c:	464c      	mov	r4, r9
 800836e:	2200      	movs	r2, #0
 8008370:	e738      	b.n	80081e4 <_malloc_r+0x2ec>
 8008372:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008376:	1092      	asrs	r2, r2, #2
 8008378:	f04f 0c01 	mov.w	ip, #1
 800837c:	fa0c f202 	lsl.w	r2, ip, r2
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c8 3004 	str.w	r3, [r8, #4]
 8008386:	460a      	mov	r2, r1
 8008388:	e778      	b.n	800827c <_malloc_r+0x384>
 800838a:	f240 5354 	movw	r3, #1364	; 0x554
 800838e:	4298      	cmp	r0, r3
 8008390:	d817      	bhi.n	80083c2 <_malloc_r+0x4ca>
 8008392:	0ca8      	lsrs	r0, r5, #18
 8008394:	307c      	adds	r0, #124	; 0x7c
 8008396:	0041      	lsls	r1, r0, #1
 8008398:	e5ee      	b.n	8007f78 <_malloc_r+0x80>
 800839a:	3210      	adds	r2, #16
 800839c:	e6b4      	b.n	8008108 <_malloc_r+0x210>
 800839e:	2a54      	cmp	r2, #84	; 0x54
 80083a0:	d81e      	bhi.n	80083e0 <_malloc_r+0x4e8>
 80083a2:	0b1a      	lsrs	r2, r3, #12
 80083a4:	326e      	adds	r2, #110	; 0x6e
 80083a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80083aa:	e754      	b.n	8008256 <_malloc_r+0x35e>
 80083ac:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80083b0:	2800      	cmp	r0, #0
 80083b2:	f47f aebe 	bne.w	8008132 <_malloc_r+0x23a>
 80083b6:	4442      	add	r2, r8
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	605a      	str	r2, [r3, #4]
 80083c0:	e702      	b.n	80081c8 <_malloc_r+0x2d0>
 80083c2:	21fc      	movs	r1, #252	; 0xfc
 80083c4:	207e      	movs	r0, #126	; 0x7e
 80083c6:	e5d7      	b.n	8007f78 <_malloc_r+0x80>
 80083c8:	2201      	movs	r2, #1
 80083ca:	f04f 0a00 	mov.w	sl, #0
 80083ce:	e6d9      	b.n	8008184 <_malloc_r+0x28c>
 80083d0:	f104 0108 	add.w	r1, r4, #8
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7ff fa83 	bl	80078e0 <_free_r>
 80083da:	f8da 1000 	ldr.w	r1, [sl]
 80083de:	e6f3      	b.n	80081c8 <_malloc_r+0x2d0>
 80083e0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80083e4:	d804      	bhi.n	80083f0 <_malloc_r+0x4f8>
 80083e6:	0bda      	lsrs	r2, r3, #15
 80083e8:	3277      	adds	r2, #119	; 0x77
 80083ea:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80083ee:	e732      	b.n	8008256 <_malloc_r+0x35e>
 80083f0:	f240 5154 	movw	r1, #1364	; 0x554
 80083f4:	428a      	cmp	r2, r1
 80083f6:	d804      	bhi.n	8008402 <_malloc_r+0x50a>
 80083f8:	0c9a      	lsrs	r2, r3, #18
 80083fa:	327c      	adds	r2, #124	; 0x7c
 80083fc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8008400:	e729      	b.n	8008256 <_malloc_r+0x35e>
 8008402:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8008406:	227e      	movs	r2, #126	; 0x7e
 8008408:	e725      	b.n	8008256 <_malloc_r+0x35e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	e790      	b.n	8008330 <_malloc_r+0x438>
 800840e:	bf00      	nop
 8008410:	20000490 	.word	0x20000490

08008414 <memchr>:
 8008414:	0783      	lsls	r3, r0, #30
 8008416:	b470      	push	{r4, r5, r6}
 8008418:	b2c9      	uxtb	r1, r1
 800841a:	d040      	beq.n	800849e <memchr+0x8a>
 800841c:	1e54      	subs	r4, r2, #1
 800841e:	2a00      	cmp	r2, #0
 8008420:	d03f      	beq.n	80084a2 <memchr+0x8e>
 8008422:	7803      	ldrb	r3, [r0, #0]
 8008424:	428b      	cmp	r3, r1
 8008426:	bf18      	it	ne
 8008428:	1c43      	addne	r3, r0, #1
 800842a:	d106      	bne.n	800843a <memchr+0x26>
 800842c:	e01d      	b.n	800846a <memchr+0x56>
 800842e:	b1f4      	cbz	r4, 800846e <memchr+0x5a>
 8008430:	7802      	ldrb	r2, [r0, #0]
 8008432:	428a      	cmp	r2, r1
 8008434:	f104 34ff 	add.w	r4, r4, #4294967295
 8008438:	d017      	beq.n	800846a <memchr+0x56>
 800843a:	f013 0f03 	tst.w	r3, #3
 800843e:	4618      	mov	r0, r3
 8008440:	f103 0301 	add.w	r3, r3, #1
 8008444:	d1f3      	bne.n	800842e <memchr+0x1a>
 8008446:	2c03      	cmp	r4, #3
 8008448:	d814      	bhi.n	8008474 <memchr+0x60>
 800844a:	b184      	cbz	r4, 800846e <memchr+0x5a>
 800844c:	7803      	ldrb	r3, [r0, #0]
 800844e:	428b      	cmp	r3, r1
 8008450:	d00b      	beq.n	800846a <memchr+0x56>
 8008452:	1905      	adds	r5, r0, r4
 8008454:	1c43      	adds	r3, r0, #1
 8008456:	e002      	b.n	800845e <memchr+0x4a>
 8008458:	7802      	ldrb	r2, [r0, #0]
 800845a:	428a      	cmp	r2, r1
 800845c:	d005      	beq.n	800846a <memchr+0x56>
 800845e:	42ab      	cmp	r3, r5
 8008460:	4618      	mov	r0, r3
 8008462:	f103 0301 	add.w	r3, r3, #1
 8008466:	d1f7      	bne.n	8008458 <memchr+0x44>
 8008468:	2000      	movs	r0, #0
 800846a:	bc70      	pop	{r4, r5, r6}
 800846c:	4770      	bx	lr
 800846e:	4620      	mov	r0, r4
 8008470:	bc70      	pop	{r4, r5, r6}
 8008472:	4770      	bx	lr
 8008474:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8008478:	4602      	mov	r2, r0
 800847a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800847e:	4610      	mov	r0, r2
 8008480:	3204      	adds	r2, #4
 8008482:	6803      	ldr	r3, [r0, #0]
 8008484:	4073      	eors	r3, r6
 8008486:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800848a:	ea25 0303 	bic.w	r3, r5, r3
 800848e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8008492:	d1da      	bne.n	800844a <memchr+0x36>
 8008494:	3c04      	subs	r4, #4
 8008496:	2c03      	cmp	r4, #3
 8008498:	4610      	mov	r0, r2
 800849a:	d8f0      	bhi.n	800847e <memchr+0x6a>
 800849c:	e7d5      	b.n	800844a <memchr+0x36>
 800849e:	4614      	mov	r4, r2
 80084a0:	e7d1      	b.n	8008446 <memchr+0x32>
 80084a2:	4610      	mov	r0, r2
 80084a4:	e7e1      	b.n	800846a <memchr+0x56>
 80084a6:	bf00      	nop

080084a8 <memmove>:
 80084a8:	4288      	cmp	r0, r1
 80084aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ac:	d90d      	bls.n	80084ca <memmove+0x22>
 80084ae:	188b      	adds	r3, r1, r2
 80084b0:	4298      	cmp	r0, r3
 80084b2:	d20a      	bcs.n	80084ca <memmove+0x22>
 80084b4:	1881      	adds	r1, r0, r2
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	d054      	beq.n	8008564 <memmove+0xbc>
 80084ba:	1a9a      	subs	r2, r3, r2
 80084bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d1f9      	bne.n	80084bc <memmove+0x14>
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ca:	2a0f      	cmp	r2, #15
 80084cc:	d948      	bls.n	8008560 <memmove+0xb8>
 80084ce:	ea40 0301 	orr.w	r3, r0, r1
 80084d2:	079b      	lsls	r3, r3, #30
 80084d4:	d147      	bne.n	8008566 <memmove+0xbe>
 80084d6:	f100 0410 	add.w	r4, r0, #16
 80084da:	f101 0310 	add.w	r3, r1, #16
 80084de:	4615      	mov	r5, r2
 80084e0:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80084e4:	f844 6c10 	str.w	r6, [r4, #-16]
 80084e8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80084ec:	f844 6c0c 	str.w	r6, [r4, #-12]
 80084f0:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80084f4:	f844 6c08 	str.w	r6, [r4, #-8]
 80084f8:	3d10      	subs	r5, #16
 80084fa:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80084fe:	f844 6c04 	str.w	r6, [r4, #-4]
 8008502:	2d0f      	cmp	r5, #15
 8008504:	f103 0310 	add.w	r3, r3, #16
 8008508:	f104 0410 	add.w	r4, r4, #16
 800850c:	d8e8      	bhi.n	80084e0 <memmove+0x38>
 800850e:	f1a2 0310 	sub.w	r3, r2, #16
 8008512:	f023 030f 	bic.w	r3, r3, #15
 8008516:	f002 0e0f 	and.w	lr, r2, #15
 800851a:	3310      	adds	r3, #16
 800851c:	f1be 0f03 	cmp.w	lr, #3
 8008520:	4419      	add	r1, r3
 8008522:	4403      	add	r3, r0
 8008524:	d921      	bls.n	800856a <memmove+0xc2>
 8008526:	1f1e      	subs	r6, r3, #4
 8008528:	460d      	mov	r5, r1
 800852a:	4674      	mov	r4, lr
 800852c:	3c04      	subs	r4, #4
 800852e:	f855 7b04 	ldr.w	r7, [r5], #4
 8008532:	f846 7f04 	str.w	r7, [r6, #4]!
 8008536:	2c03      	cmp	r4, #3
 8008538:	d8f8      	bhi.n	800852c <memmove+0x84>
 800853a:	f1ae 0404 	sub.w	r4, lr, #4
 800853e:	f024 0403 	bic.w	r4, r4, #3
 8008542:	3404      	adds	r4, #4
 8008544:	4423      	add	r3, r4
 8008546:	4421      	add	r1, r4
 8008548:	f002 0203 	and.w	r2, r2, #3
 800854c:	b152      	cbz	r2, 8008564 <memmove+0xbc>
 800854e:	3b01      	subs	r3, #1
 8008550:	440a      	add	r2, r1
 8008552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008556:	f803 4f01 	strb.w	r4, [r3, #1]!
 800855a:	4291      	cmp	r1, r2
 800855c:	d1f9      	bne.n	8008552 <memmove+0xaa>
 800855e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008560:	4603      	mov	r3, r0
 8008562:	e7f3      	b.n	800854c <memmove+0xa4>
 8008564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008566:	4603      	mov	r3, r0
 8008568:	e7f1      	b.n	800854e <memmove+0xa6>
 800856a:	4672      	mov	r2, lr
 800856c:	e7ee      	b.n	800854c <memmove+0xa4>
 800856e:	bf00      	nop

08008570 <memset>:
 8008570:	b470      	push	{r4, r5, r6}
 8008572:	0784      	lsls	r4, r0, #30
 8008574:	d046      	beq.n	8008604 <memset+0x94>
 8008576:	1e54      	subs	r4, r2, #1
 8008578:	2a00      	cmp	r2, #0
 800857a:	d041      	beq.n	8008600 <memset+0x90>
 800857c:	b2cd      	uxtb	r5, r1
 800857e:	4603      	mov	r3, r0
 8008580:	e002      	b.n	8008588 <memset+0x18>
 8008582:	1e62      	subs	r2, r4, #1
 8008584:	b3e4      	cbz	r4, 8008600 <memset+0x90>
 8008586:	4614      	mov	r4, r2
 8008588:	f803 5b01 	strb.w	r5, [r3], #1
 800858c:	079a      	lsls	r2, r3, #30
 800858e:	d1f8      	bne.n	8008582 <memset+0x12>
 8008590:	2c03      	cmp	r4, #3
 8008592:	d92e      	bls.n	80085f2 <memset+0x82>
 8008594:	b2cd      	uxtb	r5, r1
 8008596:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800859a:	2c0f      	cmp	r4, #15
 800859c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80085a0:	d919      	bls.n	80085d6 <memset+0x66>
 80085a2:	f103 0210 	add.w	r2, r3, #16
 80085a6:	4626      	mov	r6, r4
 80085a8:	3e10      	subs	r6, #16
 80085aa:	2e0f      	cmp	r6, #15
 80085ac:	f842 5c10 	str.w	r5, [r2, #-16]
 80085b0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80085b4:	f842 5c08 	str.w	r5, [r2, #-8]
 80085b8:	f842 5c04 	str.w	r5, [r2, #-4]
 80085bc:	f102 0210 	add.w	r2, r2, #16
 80085c0:	d8f2      	bhi.n	80085a8 <memset+0x38>
 80085c2:	f1a4 0210 	sub.w	r2, r4, #16
 80085c6:	f022 020f 	bic.w	r2, r2, #15
 80085ca:	f004 040f 	and.w	r4, r4, #15
 80085ce:	3210      	adds	r2, #16
 80085d0:	2c03      	cmp	r4, #3
 80085d2:	4413      	add	r3, r2
 80085d4:	d90d      	bls.n	80085f2 <memset+0x82>
 80085d6:	461e      	mov	r6, r3
 80085d8:	4622      	mov	r2, r4
 80085da:	3a04      	subs	r2, #4
 80085dc:	2a03      	cmp	r2, #3
 80085de:	f846 5b04 	str.w	r5, [r6], #4
 80085e2:	d8fa      	bhi.n	80085da <memset+0x6a>
 80085e4:	1f22      	subs	r2, r4, #4
 80085e6:	f022 0203 	bic.w	r2, r2, #3
 80085ea:	3204      	adds	r2, #4
 80085ec:	4413      	add	r3, r2
 80085ee:	f004 0403 	and.w	r4, r4, #3
 80085f2:	b12c      	cbz	r4, 8008600 <memset+0x90>
 80085f4:	b2c9      	uxtb	r1, r1
 80085f6:	441c      	add	r4, r3
 80085f8:	f803 1b01 	strb.w	r1, [r3], #1
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	d1fb      	bne.n	80085f8 <memset+0x88>
 8008600:	bc70      	pop	{r4, r5, r6}
 8008602:	4770      	bx	lr
 8008604:	4614      	mov	r4, r2
 8008606:	4603      	mov	r3, r0
 8008608:	e7c2      	b.n	8008590 <memset+0x20>
 800860a:	bf00      	nop

0800860c <__malloc_lock>:
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop

08008610 <__malloc_unlock>:
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop

08008614 <_Balloc>:
 8008614:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008616:	b570      	push	{r4, r5, r6, lr}
 8008618:	4605      	mov	r5, r0
 800861a:	460c      	mov	r4, r1
 800861c:	b14b      	cbz	r3, 8008632 <_Balloc+0x1e>
 800861e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008622:	b180      	cbz	r0, 8008646 <_Balloc+0x32>
 8008624:	6802      	ldr	r2, [r0, #0]
 8008626:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800862a:	2300      	movs	r3, #0
 800862c:	6103      	str	r3, [r0, #16]
 800862e:	60c3      	str	r3, [r0, #12]
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	2104      	movs	r1, #4
 8008634:	2221      	movs	r2, #33	; 0x21
 8008636:	f000 fe41 	bl	80092bc <_calloc_r>
 800863a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800863c:	4603      	mov	r3, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	d1ed      	bne.n	800861e <_Balloc+0xa>
 8008642:	2000      	movs	r0, #0
 8008644:	bd70      	pop	{r4, r5, r6, pc}
 8008646:	2101      	movs	r1, #1
 8008648:	fa01 f604 	lsl.w	r6, r1, r4
 800864c:	1d72      	adds	r2, r6, #5
 800864e:	4628      	mov	r0, r5
 8008650:	0092      	lsls	r2, r2, #2
 8008652:	f000 fe33 	bl	80092bc <_calloc_r>
 8008656:	2800      	cmp	r0, #0
 8008658:	d0f3      	beq.n	8008642 <_Balloc+0x2e>
 800865a:	6044      	str	r4, [r0, #4]
 800865c:	6086      	str	r6, [r0, #8]
 800865e:	e7e4      	b.n	800862a <_Balloc+0x16>

08008660 <_Bfree>:
 8008660:	b131      	cbz	r1, 8008670 <_Bfree+0x10>
 8008662:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008664:	684a      	ldr	r2, [r1, #4]
 8008666:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800866a:	6008      	str	r0, [r1, #0]
 800866c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop

08008674 <__multadd>:
 8008674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008676:	690c      	ldr	r4, [r1, #16]
 8008678:	b083      	sub	sp, #12
 800867a:	460d      	mov	r5, r1
 800867c:	4606      	mov	r6, r0
 800867e:	f101 0e14 	add.w	lr, r1, #20
 8008682:	2700      	movs	r7, #0
 8008684:	f8de 1000 	ldr.w	r1, [lr]
 8008688:	b288      	uxth	r0, r1
 800868a:	0c09      	lsrs	r1, r1, #16
 800868c:	fb02 3300 	mla	r3, r2, r0, r3
 8008690:	fb02 f101 	mul.w	r1, r2, r1
 8008694:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8008698:	3701      	adds	r7, #1
 800869a:	b29b      	uxth	r3, r3
 800869c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 80086a0:	42bc      	cmp	r4, r7
 80086a2:	f84e 3b04 	str.w	r3, [lr], #4
 80086a6:	ea4f 4311 	mov.w	r3, r1, lsr #16
 80086aa:	dceb      	bgt.n	8008684 <__multadd+0x10>
 80086ac:	b13b      	cbz	r3, 80086be <__multadd+0x4a>
 80086ae:	68aa      	ldr	r2, [r5, #8]
 80086b0:	4294      	cmp	r4, r2
 80086b2:	da07      	bge.n	80086c4 <__multadd+0x50>
 80086b4:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80086b8:	3401      	adds	r4, #1
 80086ba:	6153      	str	r3, [r2, #20]
 80086bc:	612c      	str	r4, [r5, #16]
 80086be:	4628      	mov	r0, r5
 80086c0:	b003      	add	sp, #12
 80086c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c4:	6869      	ldr	r1, [r5, #4]
 80086c6:	9301      	str	r3, [sp, #4]
 80086c8:	3101      	adds	r1, #1
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7ff ffa2 	bl	8008614 <_Balloc>
 80086d0:	692a      	ldr	r2, [r5, #16]
 80086d2:	3202      	adds	r2, #2
 80086d4:	f105 010c 	add.w	r1, r5, #12
 80086d8:	4607      	mov	r7, r0
 80086da:	0092      	lsls	r2, r2, #2
 80086dc:	300c      	adds	r0, #12
 80086de:	f7f7 fd5b 	bl	8000198 <memcpy>
 80086e2:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80086e4:	6869      	ldr	r1, [r5, #4]
 80086e6:	9b01      	ldr	r3, [sp, #4]
 80086e8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80086ec:	6028      	str	r0, [r5, #0]
 80086ee:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80086f2:	463d      	mov	r5, r7
 80086f4:	e7de      	b.n	80086b4 <__multadd+0x40>
 80086f6:	bf00      	nop

080086f8 <__hi0bits>:
 80086f8:	0c03      	lsrs	r3, r0, #16
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	b9b3      	cbnz	r3, 800872c <__hi0bits+0x34>
 80086fe:	0400      	lsls	r0, r0, #16
 8008700:	2310      	movs	r3, #16
 8008702:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008706:	bf04      	itt	eq
 8008708:	0200      	lsleq	r0, r0, #8
 800870a:	3308      	addeq	r3, #8
 800870c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008710:	bf04      	itt	eq
 8008712:	0100      	lsleq	r0, r0, #4
 8008714:	3304      	addeq	r3, #4
 8008716:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800871a:	bf04      	itt	eq
 800871c:	0080      	lsleq	r0, r0, #2
 800871e:	3302      	addeq	r3, #2
 8008720:	2800      	cmp	r0, #0
 8008722:	db07      	blt.n	8008734 <__hi0bits+0x3c>
 8008724:	0042      	lsls	r2, r0, #1
 8008726:	d403      	bmi.n	8008730 <__hi0bits+0x38>
 8008728:	2020      	movs	r0, #32
 800872a:	4770      	bx	lr
 800872c:	2300      	movs	r3, #0
 800872e:	e7e8      	b.n	8008702 <__hi0bits+0xa>
 8008730:	1c58      	adds	r0, r3, #1
 8008732:	4770      	bx	lr
 8008734:	4618      	mov	r0, r3
 8008736:	4770      	bx	lr

08008738 <__lo0bits>:
 8008738:	6803      	ldr	r3, [r0, #0]
 800873a:	f013 0207 	ands.w	r2, r3, #7
 800873e:	d007      	beq.n	8008750 <__lo0bits+0x18>
 8008740:	07d9      	lsls	r1, r3, #31
 8008742:	d420      	bmi.n	8008786 <__lo0bits+0x4e>
 8008744:	079a      	lsls	r2, r3, #30
 8008746:	d420      	bmi.n	800878a <__lo0bits+0x52>
 8008748:	089b      	lsrs	r3, r3, #2
 800874a:	6003      	str	r3, [r0, #0]
 800874c:	2002      	movs	r0, #2
 800874e:	4770      	bx	lr
 8008750:	b299      	uxth	r1, r3
 8008752:	b909      	cbnz	r1, 8008758 <__lo0bits+0x20>
 8008754:	0c1b      	lsrs	r3, r3, #16
 8008756:	2210      	movs	r2, #16
 8008758:	f013 0fff 	tst.w	r3, #255	; 0xff
 800875c:	bf04      	itt	eq
 800875e:	0a1b      	lsreq	r3, r3, #8
 8008760:	3208      	addeq	r2, #8
 8008762:	0719      	lsls	r1, r3, #28
 8008764:	bf04      	itt	eq
 8008766:	091b      	lsreq	r3, r3, #4
 8008768:	3204      	addeq	r2, #4
 800876a:	0799      	lsls	r1, r3, #30
 800876c:	bf04      	itt	eq
 800876e:	089b      	lsreq	r3, r3, #2
 8008770:	3202      	addeq	r2, #2
 8008772:	07d9      	lsls	r1, r3, #31
 8008774:	d404      	bmi.n	8008780 <__lo0bits+0x48>
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	d101      	bne.n	800877e <__lo0bits+0x46>
 800877a:	2020      	movs	r0, #32
 800877c:	4770      	bx	lr
 800877e:	3201      	adds	r2, #1
 8008780:	6003      	str	r3, [r0, #0]
 8008782:	4610      	mov	r0, r2
 8008784:	4770      	bx	lr
 8008786:	2000      	movs	r0, #0
 8008788:	4770      	bx	lr
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	2001      	movs	r0, #1
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <__i2b>:
 8008794:	b510      	push	{r4, lr}
 8008796:	460c      	mov	r4, r1
 8008798:	2101      	movs	r1, #1
 800879a:	f7ff ff3b 	bl	8008614 <_Balloc>
 800879e:	2201      	movs	r2, #1
 80087a0:	6144      	str	r4, [r0, #20]
 80087a2:	6102      	str	r2, [r0, #16]
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	bf00      	nop

080087a8 <__multiply>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	690f      	ldr	r7, [r1, #16]
 80087ae:	6916      	ldr	r6, [r2, #16]
 80087b0:	42b7      	cmp	r7, r6
 80087b2:	b083      	sub	sp, #12
 80087b4:	460d      	mov	r5, r1
 80087b6:	4614      	mov	r4, r2
 80087b8:	f2c0 808d 	blt.w	80088d6 <__multiply+0x12e>
 80087bc:	4633      	mov	r3, r6
 80087be:	463e      	mov	r6, r7
 80087c0:	461f      	mov	r7, r3
 80087c2:	68ab      	ldr	r3, [r5, #8]
 80087c4:	6869      	ldr	r1, [r5, #4]
 80087c6:	eb06 0807 	add.w	r8, r6, r7
 80087ca:	4598      	cmp	r8, r3
 80087cc:	bfc8      	it	gt
 80087ce:	3101      	addgt	r1, #1
 80087d0:	f7ff ff20 	bl	8008614 <_Balloc>
 80087d4:	f100 0c14 	add.w	ip, r0, #20
 80087d8:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80087dc:	45cc      	cmp	ip, r9
 80087de:	9000      	str	r0, [sp, #0]
 80087e0:	d205      	bcs.n	80087ee <__multiply+0x46>
 80087e2:	4663      	mov	r3, ip
 80087e4:	2100      	movs	r1, #0
 80087e6:	f843 1b04 	str.w	r1, [r3], #4
 80087ea:	4599      	cmp	r9, r3
 80087ec:	d8fb      	bhi.n	80087e6 <__multiply+0x3e>
 80087ee:	f104 0214 	add.w	r2, r4, #20
 80087f2:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80087f6:	f105 0314 	add.w	r3, r5, #20
 80087fa:	4552      	cmp	r2, sl
 80087fc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8008800:	d254      	bcs.n	80088ac <__multiply+0x104>
 8008802:	f8cd 9004 	str.w	r9, [sp, #4]
 8008806:	4699      	mov	r9, r3
 8008808:	f852 3b04 	ldr.w	r3, [r2], #4
 800880c:	fa1f fb83 	uxth.w	fp, r3
 8008810:	f1bb 0f00 	cmp.w	fp, #0
 8008814:	d020      	beq.n	8008858 <__multiply+0xb0>
 8008816:	2000      	movs	r0, #0
 8008818:	464f      	mov	r7, r9
 800881a:	4666      	mov	r6, ip
 800881c:	4605      	mov	r5, r0
 800881e:	e000      	b.n	8008822 <__multiply+0x7a>
 8008820:	461e      	mov	r6, r3
 8008822:	f857 4b04 	ldr.w	r4, [r7], #4
 8008826:	6830      	ldr	r0, [r6, #0]
 8008828:	b2a1      	uxth	r1, r4
 800882a:	b283      	uxth	r3, r0
 800882c:	fb0b 3101 	mla	r1, fp, r1, r3
 8008830:	0c24      	lsrs	r4, r4, #16
 8008832:	0c00      	lsrs	r0, r0, #16
 8008834:	194b      	adds	r3, r1, r5
 8008836:	fb0b 0004 	mla	r0, fp, r4, r0
 800883a:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800883e:	b299      	uxth	r1, r3
 8008840:	4633      	mov	r3, r6
 8008842:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008846:	45be      	cmp	lr, r7
 8008848:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800884c:	f843 1b04 	str.w	r1, [r3], #4
 8008850:	d8e6      	bhi.n	8008820 <__multiply+0x78>
 8008852:	6075      	str	r5, [r6, #4]
 8008854:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008858:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800885c:	d020      	beq.n	80088a0 <__multiply+0xf8>
 800885e:	f8dc 3000 	ldr.w	r3, [ip]
 8008862:	4667      	mov	r7, ip
 8008864:	4618      	mov	r0, r3
 8008866:	464d      	mov	r5, r9
 8008868:	2100      	movs	r1, #0
 800886a:	e000      	b.n	800886e <__multiply+0xc6>
 800886c:	4637      	mov	r7, r6
 800886e:	882c      	ldrh	r4, [r5, #0]
 8008870:	0c00      	lsrs	r0, r0, #16
 8008872:	fb0b 0004 	mla	r0, fp, r4, r0
 8008876:	4401      	add	r1, r0
 8008878:	b29c      	uxth	r4, r3
 800887a:	463e      	mov	r6, r7
 800887c:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008880:	f846 3b04 	str.w	r3, [r6], #4
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f855 4b04 	ldr.w	r4, [r5], #4
 800888a:	b283      	uxth	r3, r0
 800888c:	0c24      	lsrs	r4, r4, #16
 800888e:	fb0b 3404 	mla	r4, fp, r4, r3
 8008892:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8008896:	45ae      	cmp	lr, r5
 8008898:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800889c:	d8e6      	bhi.n	800886c <__multiply+0xc4>
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	4592      	cmp	sl, r2
 80088a2:	f10c 0c04 	add.w	ip, ip, #4
 80088a6:	d8af      	bhi.n	8008808 <__multiply+0x60>
 80088a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088ac:	f1b8 0f00 	cmp.w	r8, #0
 80088b0:	dd0b      	ble.n	80088ca <__multiply+0x122>
 80088b2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80088b6:	f1a9 0904 	sub.w	r9, r9, #4
 80088ba:	b11b      	cbz	r3, 80088c4 <__multiply+0x11c>
 80088bc:	e005      	b.n	80088ca <__multiply+0x122>
 80088be:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80088c2:	b913      	cbnz	r3, 80088ca <__multiply+0x122>
 80088c4:	f1b8 0801 	subs.w	r8, r8, #1
 80088c8:	d1f9      	bne.n	80088be <__multiply+0x116>
 80088ca:	9800      	ldr	r0, [sp, #0]
 80088cc:	f8c0 8010 	str.w	r8, [r0, #16]
 80088d0:	b003      	add	sp, #12
 80088d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d6:	4615      	mov	r5, r2
 80088d8:	460c      	mov	r4, r1
 80088da:	e772      	b.n	80087c2 <__multiply+0x1a>

080088dc <__pow5mult>:
 80088dc:	f012 0303 	ands.w	r3, r2, #3
 80088e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e4:	4614      	mov	r4, r2
 80088e6:	4607      	mov	r7, r0
 80088e8:	460e      	mov	r6, r1
 80088ea:	d12d      	bne.n	8008948 <__pow5mult+0x6c>
 80088ec:	10a4      	asrs	r4, r4, #2
 80088ee:	d01c      	beq.n	800892a <__pow5mult+0x4e>
 80088f0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80088f2:	b395      	cbz	r5, 800895a <__pow5mult+0x7e>
 80088f4:	07e3      	lsls	r3, r4, #31
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	d406      	bmi.n	800890a <__pow5mult+0x2e>
 80088fc:	1064      	asrs	r4, r4, #1
 80088fe:	d014      	beq.n	800892a <__pow5mult+0x4e>
 8008900:	6828      	ldr	r0, [r5, #0]
 8008902:	b1a8      	cbz	r0, 8008930 <__pow5mult+0x54>
 8008904:	4605      	mov	r5, r0
 8008906:	07e3      	lsls	r3, r4, #31
 8008908:	d5f8      	bpl.n	80088fc <__pow5mult+0x20>
 800890a:	4638      	mov	r0, r7
 800890c:	4631      	mov	r1, r6
 800890e:	462a      	mov	r2, r5
 8008910:	f7ff ff4a 	bl	80087a8 <__multiply>
 8008914:	b1b6      	cbz	r6, 8008944 <__pow5mult+0x68>
 8008916:	6872      	ldr	r2, [r6, #4]
 8008918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891a:	1064      	asrs	r4, r4, #1
 800891c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008920:	6031      	str	r1, [r6, #0]
 8008922:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008926:	4606      	mov	r6, r0
 8008928:	d1ea      	bne.n	8008900 <__pow5mult+0x24>
 800892a:	4630      	mov	r0, r6
 800892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008930:	4629      	mov	r1, r5
 8008932:	462a      	mov	r2, r5
 8008934:	4638      	mov	r0, r7
 8008936:	f7ff ff37 	bl	80087a8 <__multiply>
 800893a:	6028      	str	r0, [r5, #0]
 800893c:	f8c0 8000 	str.w	r8, [r0]
 8008940:	4605      	mov	r5, r0
 8008942:	e7e0      	b.n	8008906 <__pow5mult+0x2a>
 8008944:	4606      	mov	r6, r0
 8008946:	e7d9      	b.n	80088fc <__pow5mult+0x20>
 8008948:	1e5a      	subs	r2, r3, #1
 800894a:	4d0b      	ldr	r5, [pc, #44]	; (8008978 <__pow5mult+0x9c>)
 800894c:	2300      	movs	r3, #0
 800894e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8008952:	f7ff fe8f 	bl	8008674 <__multadd>
 8008956:	4606      	mov	r6, r0
 8008958:	e7c8      	b.n	80088ec <__pow5mult+0x10>
 800895a:	2101      	movs	r1, #1
 800895c:	4638      	mov	r0, r7
 800895e:	f7ff fe59 	bl	8008614 <_Balloc>
 8008962:	f240 2171 	movw	r1, #625	; 0x271
 8008966:	2201      	movs	r2, #1
 8008968:	2300      	movs	r3, #0
 800896a:	6141      	str	r1, [r0, #20]
 800896c:	6102      	str	r2, [r0, #16]
 800896e:	4605      	mov	r5, r0
 8008970:	64b8      	str	r0, [r7, #72]	; 0x48
 8008972:	6003      	str	r3, [r0, #0]
 8008974:	e7be      	b.n	80088f4 <__pow5mult+0x18>
 8008976:	bf00      	nop
 8008978:	0800a010 	.word	0x0800a010

0800897c <__lshift>:
 800897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	690f      	ldr	r7, [r1, #16]
 8008982:	688b      	ldr	r3, [r1, #8]
 8008984:	ea4f 1962 	mov.w	r9, r2, asr #5
 8008988:	444f      	add	r7, r9
 800898a:	1c7d      	adds	r5, r7, #1
 800898c:	429d      	cmp	r5, r3
 800898e:	460e      	mov	r6, r1
 8008990:	4614      	mov	r4, r2
 8008992:	6849      	ldr	r1, [r1, #4]
 8008994:	4680      	mov	r8, r0
 8008996:	dd04      	ble.n	80089a2 <__lshift+0x26>
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	429d      	cmp	r5, r3
 800899c:	f101 0101 	add.w	r1, r1, #1
 80089a0:	dcfa      	bgt.n	8008998 <__lshift+0x1c>
 80089a2:	4640      	mov	r0, r8
 80089a4:	f7ff fe36 	bl	8008614 <_Balloc>
 80089a8:	f1b9 0f00 	cmp.w	r9, #0
 80089ac:	f100 0114 	add.w	r1, r0, #20
 80089b0:	dd09      	ble.n	80089c6 <__lshift+0x4a>
 80089b2:	2300      	movs	r3, #0
 80089b4:	469e      	mov	lr, r3
 80089b6:	460a      	mov	r2, r1
 80089b8:	3301      	adds	r3, #1
 80089ba:	454b      	cmp	r3, r9
 80089bc:	f842 eb04 	str.w	lr, [r2], #4
 80089c0:	d1fa      	bne.n	80089b8 <__lshift+0x3c>
 80089c2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80089c6:	6932      	ldr	r2, [r6, #16]
 80089c8:	f106 0314 	add.w	r3, r6, #20
 80089cc:	f014 0c1f 	ands.w	ip, r4, #31
 80089d0:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 80089d4:	d01f      	beq.n	8008a16 <__lshift+0x9a>
 80089d6:	f1cc 0920 	rsb	r9, ip, #32
 80089da:	2200      	movs	r2, #0
 80089dc:	681c      	ldr	r4, [r3, #0]
 80089de:	fa04 f40c 	lsl.w	r4, r4, ip
 80089e2:	4314      	orrs	r4, r2
 80089e4:	468a      	mov	sl, r1
 80089e6:	f841 4b04 	str.w	r4, [r1], #4
 80089ea:	f853 4b04 	ldr.w	r4, [r3], #4
 80089ee:	459e      	cmp	lr, r3
 80089f0:	fa24 f209 	lsr.w	r2, r4, r9
 80089f4:	d8f2      	bhi.n	80089dc <__lshift+0x60>
 80089f6:	f8ca 2004 	str.w	r2, [sl, #4]
 80089fa:	b102      	cbz	r2, 80089fe <__lshift+0x82>
 80089fc:	1cbd      	adds	r5, r7, #2
 80089fe:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008a02:	6872      	ldr	r2, [r6, #4]
 8008a04:	3d01      	subs	r5, #1
 8008a06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a0a:	6105      	str	r5, [r0, #16]
 8008a0c:	6031      	str	r1, [r6, #0]
 8008a0e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8008a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a16:	3904      	subs	r1, #4
 8008a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a20:	459e      	cmp	lr, r3
 8008a22:	d8f9      	bhi.n	8008a18 <__lshift+0x9c>
 8008a24:	e7eb      	b.n	80089fe <__lshift+0x82>
 8008a26:	bf00      	nop

08008a28 <__mcmp>:
 8008a28:	6902      	ldr	r2, [r0, #16]
 8008a2a:	690b      	ldr	r3, [r1, #16]
 8008a2c:	1ad2      	subs	r2, r2, r3
 8008a2e:	d113      	bne.n	8008a58 <__mcmp+0x30>
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	3014      	adds	r0, #20
 8008a34:	3114      	adds	r1, #20
 8008a36:	4419      	add	r1, r3
 8008a38:	b410      	push	{r4}
 8008a3a:	4403      	add	r3, r0
 8008a3c:	e001      	b.n	8008a42 <__mcmp+0x1a>
 8008a3e:	4298      	cmp	r0, r3
 8008a40:	d20c      	bcs.n	8008a5c <__mcmp+0x34>
 8008a42:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008a46:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a4a:	4294      	cmp	r4, r2
 8008a4c:	d0f7      	beq.n	8008a3e <__mcmp+0x16>
 8008a4e:	d309      	bcc.n	8008a64 <__mcmp+0x3c>
 8008a50:	2001      	movs	r0, #1
 8008a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	4610      	mov	r0, r2
 8008a5a:	4770      	bx	lr
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop

08008a70 <__mdiff>:
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	460e      	mov	r6, r1
 8008a76:	4605      	mov	r5, r0
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	f7ff ffd3 	bl	8008a28 <__mcmp>
 8008a82:	1e07      	subs	r7, r0, #0
 8008a84:	d054      	beq.n	8008b30 <__mdiff+0xc0>
 8008a86:	db4d      	blt.n	8008b24 <__mdiff+0xb4>
 8008a88:	f04f 0800 	mov.w	r8, #0
 8008a8c:	6871      	ldr	r1, [r6, #4]
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f7ff fdc0 	bl	8008614 <_Balloc>
 8008a94:	6937      	ldr	r7, [r6, #16]
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	f8c0 800c 	str.w	r8, [r0, #12]
 8008a9c:	3614      	adds	r6, #20
 8008a9e:	f104 0214 	add.w	r2, r4, #20
 8008aa2:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8008aa6:	f100 0514 	add.w	r5, r0, #20
 8008aaa:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ab4:	f852 4b04 	ldr.w	r4, [r2], #4
 8008ab8:	fa13 f388 	uxtah	r3, r3, r8
 8008abc:	b2a1      	uxth	r1, r4
 8008abe:	0c24      	lsrs	r4, r4, #16
 8008ac0:	1a59      	subs	r1, r3, r1
 8008ac2:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8008ac6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008aca:	b289      	uxth	r1, r1
 8008acc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008ad0:	4594      	cmp	ip, r2
 8008ad2:	f845 1b04 	str.w	r1, [r5], #4
 8008ad6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008ada:	4634      	mov	r4, r6
 8008adc:	d8e8      	bhi.n	8008ab0 <__mdiff+0x40>
 8008ade:	45b6      	cmp	lr, r6
 8008ae0:	46ac      	mov	ip, r5
 8008ae2:	d915      	bls.n	8008b10 <__mdiff+0xa0>
 8008ae4:	f854 2b04 	ldr.w	r2, [r4], #4
 8008ae8:	fa13 f182 	uxtah	r1, r3, r2
 8008aec:	0c13      	lsrs	r3, r2, #16
 8008aee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008af2:	b289      	uxth	r1, r1
 8008af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008af8:	45a6      	cmp	lr, r4
 8008afa:	f845 1b04 	str.w	r1, [r5], #4
 8008afe:	ea4f 4323 	mov.w	r3, r3, asr #16
 8008b02:	d8ef      	bhi.n	8008ae4 <__mdiff+0x74>
 8008b04:	43f6      	mvns	r6, r6
 8008b06:	4476      	add	r6, lr
 8008b08:	f026 0503 	bic.w	r5, r6, #3
 8008b0c:	3504      	adds	r5, #4
 8008b0e:	4465      	add	r5, ip
 8008b10:	3d04      	subs	r5, #4
 8008b12:	b921      	cbnz	r1, 8008b1e <__mdiff+0xae>
 8008b14:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008b18:	3f01      	subs	r7, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0fa      	beq.n	8008b14 <__mdiff+0xa4>
 8008b1e:	6107      	str	r7, [r0, #16]
 8008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b24:	4633      	mov	r3, r6
 8008b26:	f04f 0801 	mov.w	r8, #1
 8008b2a:	4626      	mov	r6, r4
 8008b2c:	461c      	mov	r4, r3
 8008b2e:	e7ad      	b.n	8008a8c <__mdiff+0x1c>
 8008b30:	4628      	mov	r0, r5
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7ff fd6e 	bl	8008614 <_Balloc>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	6147      	str	r7, [r0, #20]
 8008b3c:	6103      	str	r3, [r0, #16]
 8008b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b42:	bf00      	nop

08008b44 <__d2b>:
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	461c      	mov	r4, r3
 8008b4e:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8008b52:	4615      	mov	r5, r2
 8008b54:	9e08      	ldr	r6, [sp, #32]
 8008b56:	f7ff fd5d 	bl	8008614 <_Balloc>
 8008b5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b5e:	4680      	mov	r8, r0
 8008b60:	b10f      	cbz	r7, 8008b66 <__d2b+0x22>
 8008b62:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008b66:	9401      	str	r4, [sp, #4]
 8008b68:	b31d      	cbz	r5, 8008bb2 <__d2b+0x6e>
 8008b6a:	a802      	add	r0, sp, #8
 8008b6c:	f840 5d08 	str.w	r5, [r0, #-8]!
 8008b70:	f7ff fde2 	bl	8008738 <__lo0bits>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d134      	bne.n	8008be2 <__d2b+0x9e>
 8008b78:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008b7c:	f8c8 2014 	str.w	r2, [r8, #20]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bf14      	ite	ne
 8008b84:	2402      	movne	r4, #2
 8008b86:	2401      	moveq	r4, #1
 8008b88:	f8c8 3018 	str.w	r3, [r8, #24]
 8008b8c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008b90:	b9df      	cbnz	r7, 8008bca <__d2b+0x86>
 8008b92:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8008b96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b9a:	6030      	str	r0, [r6, #0]
 8008b9c:	6918      	ldr	r0, [r3, #16]
 8008b9e:	f7ff fdab 	bl	80086f8 <__hi0bits>
 8008ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba4:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8008ba8:	6018      	str	r0, [r3, #0]
 8008baa:	4640      	mov	r0, r8
 8008bac:	b002      	add	sp, #8
 8008bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb2:	a801      	add	r0, sp, #4
 8008bb4:	f7ff fdc0 	bl	8008738 <__lo0bits>
 8008bb8:	2401      	movs	r4, #1
 8008bba:	9b01      	ldr	r3, [sp, #4]
 8008bbc:	f8c8 3014 	str.w	r3, [r8, #20]
 8008bc0:	3020      	adds	r0, #32
 8008bc2:	f8c8 4010 	str.w	r4, [r8, #16]
 8008bc6:	2f00      	cmp	r7, #0
 8008bc8:	d0e3      	beq.n	8008b92 <__d2b+0x4e>
 8008bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bcc:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8008bd0:	4407      	add	r7, r0
 8008bd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bd6:	6037      	str	r7, [r6, #0]
 8008bd8:	6018      	str	r0, [r3, #0]
 8008bda:	4640      	mov	r0, r8
 8008bdc:	b002      	add	sp, #8
 8008bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be2:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008be6:	f1c0 0120 	rsb	r1, r0, #32
 8008bea:	fa03 f101 	lsl.w	r1, r3, r1
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	40c3      	lsrs	r3, r0
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	f8c8 2014 	str.w	r2, [r8, #20]
 8008bf8:	e7c2      	b.n	8008b80 <__d2b+0x3c>
 8008bfa:	bf00      	nop

08008bfc <_realloc_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4617      	mov	r7, r2
 8008c02:	b083      	sub	sp, #12
 8008c04:	460e      	mov	r6, r1
 8008c06:	2900      	cmp	r1, #0
 8008c08:	f000 80e7 	beq.w	8008dda <_realloc_r+0x1de>
 8008c0c:	4681      	mov	r9, r0
 8008c0e:	f107 050b 	add.w	r5, r7, #11
 8008c12:	f7ff fcfb 	bl	800860c <__malloc_lock>
 8008c16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c1a:	2d16      	cmp	r5, #22
 8008c1c:	f023 0403 	bic.w	r4, r3, #3
 8008c20:	f1a6 0808 	sub.w	r8, r6, #8
 8008c24:	d84c      	bhi.n	8008cc0 <_realloc_r+0xc4>
 8008c26:	2210      	movs	r2, #16
 8008c28:	4615      	mov	r5, r2
 8008c2a:	42af      	cmp	r7, r5
 8008c2c:	d84d      	bhi.n	8008cca <_realloc_r+0xce>
 8008c2e:	4294      	cmp	r4, r2
 8008c30:	f280 8084 	bge.w	8008d3c <_realloc_r+0x140>
 8008c34:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 8008fe4 <_realloc_r+0x3e8>
 8008c38:	f8db 0008 	ldr.w	r0, [fp, #8]
 8008c3c:	eb08 0104 	add.w	r1, r8, r4
 8008c40:	4288      	cmp	r0, r1
 8008c42:	f000 80d6 	beq.w	8008df2 <_realloc_r+0x1f6>
 8008c46:	6848      	ldr	r0, [r1, #4]
 8008c48:	f020 0e01 	bic.w	lr, r0, #1
 8008c4c:	448e      	add	lr, r1
 8008c4e:	f8de e004 	ldr.w	lr, [lr, #4]
 8008c52:	f01e 0f01 	tst.w	lr, #1
 8008c56:	d13f      	bne.n	8008cd8 <_realloc_r+0xdc>
 8008c58:	f020 0003 	bic.w	r0, r0, #3
 8008c5c:	4420      	add	r0, r4
 8008c5e:	4290      	cmp	r0, r2
 8008c60:	f280 80c1 	bge.w	8008de6 <_realloc_r+0x1ea>
 8008c64:	07db      	lsls	r3, r3, #31
 8008c66:	f100 808f 	bmi.w	8008d88 <_realloc_r+0x18c>
 8008c6a:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008c6e:	ebc3 0a08 	rsb	sl, r3, r8
 8008c72:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008c76:	f023 0303 	bic.w	r3, r3, #3
 8008c7a:	eb00 0e03 	add.w	lr, r0, r3
 8008c7e:	4596      	cmp	lr, r2
 8008c80:	db34      	blt.n	8008cec <_realloc_r+0xf0>
 8008c82:	68cb      	ldr	r3, [r1, #12]
 8008c84:	688a      	ldr	r2, [r1, #8]
 8008c86:	4657      	mov	r7, sl
 8008c88:	60d3      	str	r3, [r2, #12]
 8008c8a:	609a      	str	r2, [r3, #8]
 8008c8c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008c90:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008c94:	60cb      	str	r3, [r1, #12]
 8008c96:	1f22      	subs	r2, r4, #4
 8008c98:	2a24      	cmp	r2, #36	; 0x24
 8008c9a:	6099      	str	r1, [r3, #8]
 8008c9c:	f200 8136 	bhi.w	8008f0c <_realloc_r+0x310>
 8008ca0:	2a13      	cmp	r2, #19
 8008ca2:	f240 80fd 	bls.w	8008ea0 <_realloc_r+0x2a4>
 8008ca6:	6833      	ldr	r3, [r6, #0]
 8008ca8:	f8ca 3008 	str.w	r3, [sl, #8]
 8008cac:	6873      	ldr	r3, [r6, #4]
 8008cae:	f8ca 300c 	str.w	r3, [sl, #12]
 8008cb2:	2a1b      	cmp	r2, #27
 8008cb4:	f200 8140 	bhi.w	8008f38 <_realloc_r+0x33c>
 8008cb8:	3608      	adds	r6, #8
 8008cba:	f10a 0310 	add.w	r3, sl, #16
 8008cbe:	e0f0      	b.n	8008ea2 <_realloc_r+0x2a6>
 8008cc0:	f025 0507 	bic.w	r5, r5, #7
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	daaf      	bge.n	8008c2a <_realloc_r+0x2e>
 8008cca:	230c      	movs	r3, #12
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f8c9 3000 	str.w	r3, [r9]
 8008cd2:	b003      	add	sp, #12
 8008cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd8:	07d9      	lsls	r1, r3, #31
 8008cda:	d455      	bmi.n	8008d88 <_realloc_r+0x18c>
 8008cdc:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008ce0:	ebc3 0a08 	rsb	sl, r3, r8
 8008ce4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008ce8:	f023 0303 	bic.w	r3, r3, #3
 8008cec:	4423      	add	r3, r4
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	db4a      	blt.n	8008d88 <_realloc_r+0x18c>
 8008cf2:	4657      	mov	r7, sl
 8008cf4:	f8da 100c 	ldr.w	r1, [sl, #12]
 8008cf8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008cfc:	1f22      	subs	r2, r4, #4
 8008cfe:	2a24      	cmp	r2, #36	; 0x24
 8008d00:	60c1      	str	r1, [r0, #12]
 8008d02:	6088      	str	r0, [r1, #8]
 8008d04:	f200 810e 	bhi.w	8008f24 <_realloc_r+0x328>
 8008d08:	2a13      	cmp	r2, #19
 8008d0a:	f240 8109 	bls.w	8008f20 <_realloc_r+0x324>
 8008d0e:	6831      	ldr	r1, [r6, #0]
 8008d10:	f8ca 1008 	str.w	r1, [sl, #8]
 8008d14:	6871      	ldr	r1, [r6, #4]
 8008d16:	f8ca 100c 	str.w	r1, [sl, #12]
 8008d1a:	2a1b      	cmp	r2, #27
 8008d1c:	f200 8121 	bhi.w	8008f62 <_realloc_r+0x366>
 8008d20:	3608      	adds	r6, #8
 8008d22:	f10a 0210 	add.w	r2, sl, #16
 8008d26:	6831      	ldr	r1, [r6, #0]
 8008d28:	6011      	str	r1, [r2, #0]
 8008d2a:	6871      	ldr	r1, [r6, #4]
 8008d2c:	6051      	str	r1, [r2, #4]
 8008d2e:	68b1      	ldr	r1, [r6, #8]
 8008d30:	6091      	str	r1, [r2, #8]
 8008d32:	461c      	mov	r4, r3
 8008d34:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008d38:	463e      	mov	r6, r7
 8008d3a:	46d0      	mov	r8, sl
 8008d3c:	1b62      	subs	r2, r4, r5
 8008d3e:	2a0f      	cmp	r2, #15
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	d80e      	bhi.n	8008d64 <_realloc_r+0x168>
 8008d46:	4323      	orrs	r3, r4
 8008d48:	4444      	add	r4, r8
 8008d4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8008d4e:	6863      	ldr	r3, [r4, #4]
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	4648      	mov	r0, r9
 8008d58:	f7ff fc5a 	bl	8008610 <__malloc_unlock>
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	b003      	add	sp, #12
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	eb08 0105 	add.w	r1, r8, r5
 8008d68:	431d      	orrs	r5, r3
 8008d6a:	f042 0301 	orr.w	r3, r2, #1
 8008d6e:	440a      	add	r2, r1
 8008d70:	f8c8 5004 	str.w	r5, [r8, #4]
 8008d74:	604b      	str	r3, [r1, #4]
 8008d76:	6853      	ldr	r3, [r2, #4]
 8008d78:	f043 0301 	orr.w	r3, r3, #1
 8008d7c:	3108      	adds	r1, #8
 8008d7e:	6053      	str	r3, [r2, #4]
 8008d80:	4648      	mov	r0, r9
 8008d82:	f7fe fdad 	bl	80078e0 <_free_r>
 8008d86:	e7e6      	b.n	8008d56 <_realloc_r+0x15a>
 8008d88:	4639      	mov	r1, r7
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	f7ff f8b4 	bl	8007ef8 <_malloc_r>
 8008d90:	4607      	mov	r7, r0
 8008d92:	b1d8      	cbz	r0, 8008dcc <_realloc_r+0x1d0>
 8008d94:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d98:	f023 0201 	bic.w	r2, r3, #1
 8008d9c:	4442      	add	r2, r8
 8008d9e:	f1a0 0108 	sub.w	r1, r0, #8
 8008da2:	4291      	cmp	r1, r2
 8008da4:	f000 80ac 	beq.w	8008f00 <_realloc_r+0x304>
 8008da8:	1f22      	subs	r2, r4, #4
 8008daa:	2a24      	cmp	r2, #36	; 0x24
 8008dac:	f200 8099 	bhi.w	8008ee2 <_realloc_r+0x2e6>
 8008db0:	2a13      	cmp	r2, #19
 8008db2:	d86a      	bhi.n	8008e8a <_realloc_r+0x28e>
 8008db4:	4603      	mov	r3, r0
 8008db6:	4632      	mov	r2, r6
 8008db8:	6811      	ldr	r1, [r2, #0]
 8008dba:	6019      	str	r1, [r3, #0]
 8008dbc:	6851      	ldr	r1, [r2, #4]
 8008dbe:	6059      	str	r1, [r3, #4]
 8008dc0:	6892      	ldr	r2, [r2, #8]
 8008dc2:	609a      	str	r2, [r3, #8]
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4648      	mov	r0, r9
 8008dc8:	f7fe fd8a 	bl	80078e0 <_free_r>
 8008dcc:	4648      	mov	r0, r9
 8008dce:	f7ff fc1f 	bl	8008610 <__malloc_unlock>
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	b003      	add	sp, #12
 8008dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dda:	4611      	mov	r1, r2
 8008ddc:	b003      	add	sp, #12
 8008dde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de2:	f7ff b889 	b.w	8007ef8 <_malloc_r>
 8008de6:	68ca      	ldr	r2, [r1, #12]
 8008de8:	6889      	ldr	r1, [r1, #8]
 8008dea:	4604      	mov	r4, r0
 8008dec:	60ca      	str	r2, [r1, #12]
 8008dee:	6091      	str	r1, [r2, #8]
 8008df0:	e7a4      	b.n	8008d3c <_realloc_r+0x140>
 8008df2:	6841      	ldr	r1, [r0, #4]
 8008df4:	f021 0103 	bic.w	r1, r1, #3
 8008df8:	4421      	add	r1, r4
 8008dfa:	f105 0010 	add.w	r0, r5, #16
 8008dfe:	4281      	cmp	r1, r0
 8008e00:	da5b      	bge.n	8008eba <_realloc_r+0x2be>
 8008e02:	07db      	lsls	r3, r3, #31
 8008e04:	d4c0      	bmi.n	8008d88 <_realloc_r+0x18c>
 8008e06:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008e0a:	ebc3 0a08 	rsb	sl, r3, r8
 8008e0e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	eb01 0c03 	add.w	ip, r1, r3
 8008e1a:	4560      	cmp	r0, ip
 8008e1c:	f73f af66 	bgt.w	8008cec <_realloc_r+0xf0>
 8008e20:	4657      	mov	r7, sl
 8008e22:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008e26:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008e2a:	1f22      	subs	r2, r4, #4
 8008e2c:	2a24      	cmp	r2, #36	; 0x24
 8008e2e:	60cb      	str	r3, [r1, #12]
 8008e30:	6099      	str	r1, [r3, #8]
 8008e32:	f200 80b8 	bhi.w	8008fa6 <_realloc_r+0x3aa>
 8008e36:	2a13      	cmp	r2, #19
 8008e38:	f240 80a9 	bls.w	8008f8e <_realloc_r+0x392>
 8008e3c:	6833      	ldr	r3, [r6, #0]
 8008e3e:	f8ca 3008 	str.w	r3, [sl, #8]
 8008e42:	6873      	ldr	r3, [r6, #4]
 8008e44:	f8ca 300c 	str.w	r3, [sl, #12]
 8008e48:	2a1b      	cmp	r2, #27
 8008e4a:	f200 80b5 	bhi.w	8008fb8 <_realloc_r+0x3bc>
 8008e4e:	3608      	adds	r6, #8
 8008e50:	f10a 0310 	add.w	r3, sl, #16
 8008e54:	6832      	ldr	r2, [r6, #0]
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	6872      	ldr	r2, [r6, #4]
 8008e5a:	605a      	str	r2, [r3, #4]
 8008e5c:	68b2      	ldr	r2, [r6, #8]
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	eb0a 0205 	add.w	r2, sl, r5
 8008e64:	ebc5 030c 	rsb	r3, r5, ip
 8008e68:	f043 0301 	orr.w	r3, r3, #1
 8008e6c:	f8cb 2008 	str.w	r2, [fp, #8]
 8008e70:	6053      	str	r3, [r2, #4]
 8008e72:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	431d      	orrs	r5, r3
 8008e7c:	4648      	mov	r0, r9
 8008e7e:	f8ca 5004 	str.w	r5, [sl, #4]
 8008e82:	f7ff fbc5 	bl	8008610 <__malloc_unlock>
 8008e86:	4638      	mov	r0, r7
 8008e88:	e769      	b.n	8008d5e <_realloc_r+0x162>
 8008e8a:	6833      	ldr	r3, [r6, #0]
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	6873      	ldr	r3, [r6, #4]
 8008e90:	6043      	str	r3, [r0, #4]
 8008e92:	2a1b      	cmp	r2, #27
 8008e94:	d829      	bhi.n	8008eea <_realloc_r+0x2ee>
 8008e96:	f100 0308 	add.w	r3, r0, #8
 8008e9a:	f106 0208 	add.w	r2, r6, #8
 8008e9e:	e78b      	b.n	8008db8 <_realloc_r+0x1bc>
 8008ea0:	463b      	mov	r3, r7
 8008ea2:	6832      	ldr	r2, [r6, #0]
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	6872      	ldr	r2, [r6, #4]
 8008ea8:	605a      	str	r2, [r3, #4]
 8008eaa:	68b2      	ldr	r2, [r6, #8]
 8008eac:	609a      	str	r2, [r3, #8]
 8008eae:	463e      	mov	r6, r7
 8008eb0:	4674      	mov	r4, lr
 8008eb2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008eb6:	46d0      	mov	r8, sl
 8008eb8:	e740      	b.n	8008d3c <_realloc_r+0x140>
 8008eba:	eb08 0205 	add.w	r2, r8, r5
 8008ebe:	1b4b      	subs	r3, r1, r5
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	f8cb 2008 	str.w	r2, [fp, #8]
 8008ec8:	6053      	str	r3, [r2, #4]
 8008eca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	431d      	orrs	r5, r3
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008eda:	f7ff fb99 	bl	8008610 <__malloc_unlock>
 8008ede:	4630      	mov	r0, r6
 8008ee0:	e73d      	b.n	8008d5e <_realloc_r+0x162>
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	f7ff fae0 	bl	80084a8 <memmove>
 8008ee8:	e76c      	b.n	8008dc4 <_realloc_r+0x1c8>
 8008eea:	68b3      	ldr	r3, [r6, #8]
 8008eec:	6083      	str	r3, [r0, #8]
 8008eee:	68f3      	ldr	r3, [r6, #12]
 8008ef0:	60c3      	str	r3, [r0, #12]
 8008ef2:	2a24      	cmp	r2, #36	; 0x24
 8008ef4:	d02c      	beq.n	8008f50 <_realloc_r+0x354>
 8008ef6:	f100 0310 	add.w	r3, r0, #16
 8008efa:	f106 0210 	add.w	r2, r6, #16
 8008efe:	e75b      	b.n	8008db8 <_realloc_r+0x1bc>
 8008f00:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008f04:	f022 0203 	bic.w	r2, r2, #3
 8008f08:	4414      	add	r4, r2
 8008f0a:	e717      	b.n	8008d3c <_realloc_r+0x140>
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4638      	mov	r0, r7
 8008f10:	4674      	mov	r4, lr
 8008f12:	463e      	mov	r6, r7
 8008f14:	f7ff fac8 	bl	80084a8 <memmove>
 8008f18:	46d0      	mov	r8, sl
 8008f1a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008f1e:	e70d      	b.n	8008d3c <_realloc_r+0x140>
 8008f20:	463a      	mov	r2, r7
 8008f22:	e700      	b.n	8008d26 <_realloc_r+0x12a>
 8008f24:	4631      	mov	r1, r6
 8008f26:	4638      	mov	r0, r7
 8008f28:	461c      	mov	r4, r3
 8008f2a:	463e      	mov	r6, r7
 8008f2c:	f7ff fabc 	bl	80084a8 <memmove>
 8008f30:	46d0      	mov	r8, sl
 8008f32:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008f36:	e701      	b.n	8008d3c <_realloc_r+0x140>
 8008f38:	68b3      	ldr	r3, [r6, #8]
 8008f3a:	f8ca 3010 	str.w	r3, [sl, #16]
 8008f3e:	68f3      	ldr	r3, [r6, #12]
 8008f40:	f8ca 3014 	str.w	r3, [sl, #20]
 8008f44:	2a24      	cmp	r2, #36	; 0x24
 8008f46:	d018      	beq.n	8008f7a <_realloc_r+0x37e>
 8008f48:	3610      	adds	r6, #16
 8008f4a:	f10a 0318 	add.w	r3, sl, #24
 8008f4e:	e7a8      	b.n	8008ea2 <_realloc_r+0x2a6>
 8008f50:	6933      	ldr	r3, [r6, #16]
 8008f52:	6103      	str	r3, [r0, #16]
 8008f54:	6973      	ldr	r3, [r6, #20]
 8008f56:	6143      	str	r3, [r0, #20]
 8008f58:	f106 0218 	add.w	r2, r6, #24
 8008f5c:	f100 0318 	add.w	r3, r0, #24
 8008f60:	e72a      	b.n	8008db8 <_realloc_r+0x1bc>
 8008f62:	68b1      	ldr	r1, [r6, #8]
 8008f64:	f8ca 1010 	str.w	r1, [sl, #16]
 8008f68:	68f1      	ldr	r1, [r6, #12]
 8008f6a:	f8ca 1014 	str.w	r1, [sl, #20]
 8008f6e:	2a24      	cmp	r2, #36	; 0x24
 8008f70:	d00f      	beq.n	8008f92 <_realloc_r+0x396>
 8008f72:	3610      	adds	r6, #16
 8008f74:	f10a 0218 	add.w	r2, sl, #24
 8008f78:	e6d5      	b.n	8008d26 <_realloc_r+0x12a>
 8008f7a:	6933      	ldr	r3, [r6, #16]
 8008f7c:	f8ca 3018 	str.w	r3, [sl, #24]
 8008f80:	6973      	ldr	r3, [r6, #20]
 8008f82:	f8ca 301c 	str.w	r3, [sl, #28]
 8008f86:	3618      	adds	r6, #24
 8008f88:	f10a 0320 	add.w	r3, sl, #32
 8008f8c:	e789      	b.n	8008ea2 <_realloc_r+0x2a6>
 8008f8e:	463b      	mov	r3, r7
 8008f90:	e760      	b.n	8008e54 <_realloc_r+0x258>
 8008f92:	6932      	ldr	r2, [r6, #16]
 8008f94:	f8ca 2018 	str.w	r2, [sl, #24]
 8008f98:	6972      	ldr	r2, [r6, #20]
 8008f9a:	f8ca 201c 	str.w	r2, [sl, #28]
 8008f9e:	3618      	adds	r6, #24
 8008fa0:	f10a 0220 	add.w	r2, sl, #32
 8008fa4:	e6bf      	b.n	8008d26 <_realloc_r+0x12a>
 8008fa6:	4631      	mov	r1, r6
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f8cd c004 	str.w	ip, [sp, #4]
 8008fae:	f7ff fa7b 	bl	80084a8 <memmove>
 8008fb2:	f8dd c004 	ldr.w	ip, [sp, #4]
 8008fb6:	e753      	b.n	8008e60 <_realloc_r+0x264>
 8008fb8:	68b3      	ldr	r3, [r6, #8]
 8008fba:	f8ca 3010 	str.w	r3, [sl, #16]
 8008fbe:	68f3      	ldr	r3, [r6, #12]
 8008fc0:	f8ca 3014 	str.w	r3, [sl, #20]
 8008fc4:	2a24      	cmp	r2, #36	; 0x24
 8008fc6:	d003      	beq.n	8008fd0 <_realloc_r+0x3d4>
 8008fc8:	3610      	adds	r6, #16
 8008fca:	f10a 0318 	add.w	r3, sl, #24
 8008fce:	e741      	b.n	8008e54 <_realloc_r+0x258>
 8008fd0:	6933      	ldr	r3, [r6, #16]
 8008fd2:	f8ca 3018 	str.w	r3, [sl, #24]
 8008fd6:	6973      	ldr	r3, [r6, #20]
 8008fd8:	f8ca 301c 	str.w	r3, [sl, #28]
 8008fdc:	3618      	adds	r6, #24
 8008fde:	f10a 0320 	add.w	r3, sl, #32
 8008fe2:	e737      	b.n	8008e54 <_realloc_r+0x258>
 8008fe4:	20000490 	.word	0x20000490

08008fe8 <__fpclassifyd>:
 8008fe8:	b410      	push	{r4}
 8008fea:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8008fee:	d008      	beq.n	8009002 <__fpclassifyd+0x1a>
 8008ff0:	4b11      	ldr	r3, [pc, #68]	; (8009038 <__fpclassifyd+0x50>)
 8008ff2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d808      	bhi.n	800900c <__fpclassifyd+0x24>
 8008ffa:	2004      	movs	r0, #4
 8008ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	b918      	cbnz	r0, 800900c <__fpclassifyd+0x24>
 8009004:	2002      	movs	r0, #2
 8009006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 8009010:	4b09      	ldr	r3, [pc, #36]	; (8009038 <__fpclassifyd+0x50>)
 8009012:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 8009016:	4299      	cmp	r1, r3
 8009018:	d9ef      	bls.n	8008ffa <__fpclassifyd+0x12>
 800901a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800901e:	d201      	bcs.n	8009024 <__fpclassifyd+0x3c>
 8009020:	2003      	movs	r0, #3
 8009022:	e7eb      	b.n	8008ffc <__fpclassifyd+0x14>
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <__fpclassifyd+0x54>)
 8009026:	429c      	cmp	r4, r3
 8009028:	d001      	beq.n	800902e <__fpclassifyd+0x46>
 800902a:	2000      	movs	r0, #0
 800902c:	e7e6      	b.n	8008ffc <__fpclassifyd+0x14>
 800902e:	fab0 f080 	clz	r0, r0
 8009032:	0940      	lsrs	r0, r0, #5
 8009034:	e7e2      	b.n	8008ffc <__fpclassifyd+0x14>
 8009036:	bf00      	nop
 8009038:	7fdfffff 	.word	0x7fdfffff
 800903c:	7ff00000 	.word	0x7ff00000

08009040 <_sbrk_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4c07      	ldr	r4, [pc, #28]	; (8009060 <_sbrk_r+0x20>)
 8009044:	2300      	movs	r3, #0
 8009046:	4605      	mov	r5, r0
 8009048:	4608      	mov	r0, r1
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	f7f8 fd24 	bl	8001a98 <_sbrk>
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	d000      	beq.n	8009056 <_sbrk_r+0x16>
 8009054:	bd38      	pop	{r3, r4, r5, pc}
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d0fb      	beq.n	8009054 <_sbrk_r+0x14>
 800905c:	602b      	str	r3, [r5, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	2000a774 	.word	0x2000a774

08009064 <_raise_r>:
 8009064:	291f      	cmp	r1, #31
 8009066:	b538      	push	{r3, r4, r5, lr}
 8009068:	d822      	bhi.n	80090b0 <_raise_r+0x4c>
 800906a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800906e:	4605      	mov	r5, r0
 8009070:	460c      	mov	r4, r1
 8009072:	b19a      	cbz	r2, 800909c <_raise_r+0x38>
 8009074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009078:	b183      	cbz	r3, 800909c <_raise_r+0x38>
 800907a:	2b01      	cmp	r3, #1
 800907c:	d00c      	beq.n	8009098 <_raise_r+0x34>
 800907e:	1c59      	adds	r1, r3, #1
 8009080:	d006      	beq.n	8009090 <_raise_r+0x2c>
 8009082:	2500      	movs	r5, #0
 8009084:	4620      	mov	r0, r4
 8009086:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800908a:	4798      	blx	r3
 800908c:	4628      	mov	r0, r5
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	2316      	movs	r3, #22
 8009092:	6003      	str	r3, [r0, #0]
 8009094:	2001      	movs	r0, #1
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	2000      	movs	r0, #0
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	4628      	mov	r0, r5
 800909e:	f000 f829 	bl	80090f4 <_getpid_r>
 80090a2:	4622      	mov	r2, r4
 80090a4:	4601      	mov	r1, r0
 80090a6:	4628      	mov	r0, r5
 80090a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ac:	f000 b80e 	b.w	80090cc <_kill_r>
 80090b0:	2316      	movs	r3, #22
 80090b2:	6003      	str	r3, [r0, #0]
 80090b4:	f04f 30ff 	mov.w	r0, #4294967295
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	bf00      	nop

080090bc <raise>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <raise+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f7ff bfcf 	b.w	8009064 <_raise_r>
 80090c6:	bf00      	nop
 80090c8:	20000430 	.word	0x20000430

080090cc <_kill_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	4c08      	ldr	r4, [pc, #32]	; (80090f0 <_kill_r+0x24>)
 80090d0:	2300      	movs	r3, #0
 80090d2:	4605      	mov	r5, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	4611      	mov	r1, r2
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	f7f8 fc97 	bl	8001a0c <_kill>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	d000      	beq.n	80090e4 <_kill_r+0x18>
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0fb      	beq.n	80090e2 <_kill_r+0x16>
 80090ea:	602b      	str	r3, [r5, #0]
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	bf00      	nop
 80090f0:	2000a774 	.word	0x2000a774

080090f4 <_getpid_r>:
 80090f4:	f7f8 bc7b 	b.w	80019ee <_getpid>

080090f8 <__sread>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	460c      	mov	r4, r1
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	f000 f99a 	bl	8009438 <_read_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	db03      	blt.n	8009110 <__sread+0x18>
 8009108:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800910a:	4403      	add	r3, r0
 800910c:	6523      	str	r3, [r4, #80]	; 0x50
 800910e:	bd10      	pop	{r4, pc}
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	bd10      	pop	{r4, pc}
 800911a:	bf00      	nop

0800911c <__swrite>:
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	4616      	mov	r6, r2
 8009122:	898a      	ldrh	r2, [r1, #12]
 8009124:	461d      	mov	r5, r3
 8009126:	05d3      	lsls	r3, r2, #23
 8009128:	460c      	mov	r4, r1
 800912a:	4607      	mov	r7, r0
 800912c:	d506      	bpl.n	800913c <__swrite+0x20>
 800912e:	2200      	movs	r2, #0
 8009130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009134:	2302      	movs	r3, #2
 8009136:	f000 f96b 	bl	8009410 <_lseek_r>
 800913a:	89a2      	ldrh	r2, [r4, #12]
 800913c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009140:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009144:	81a2      	strh	r2, [r4, #12]
 8009146:	4638      	mov	r0, r7
 8009148:	4632      	mov	r2, r6
 800914a:	462b      	mov	r3, r5
 800914c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009150:	f000 b8a0 	b.w	8009294 <_write_r>

08009154 <__sseek>:
 8009154:	b510      	push	{r4, lr}
 8009156:	460c      	mov	r4, r1
 8009158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915c:	f000 f958 	bl	8009410 <_lseek_r>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	1c42      	adds	r2, r0, #1
 8009164:	bf0e      	itee	eq
 8009166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800916a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800916e:	6520      	strne	r0, [r4, #80]	; 0x50
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	bd10      	pop	{r4, pc}

08009174 <__sclose>:
 8009174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009178:	f000 b8d0 	b.w	800931c <_close_r>

0800917c <__swbuf_r>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	460d      	mov	r5, r1
 8009180:	4614      	mov	r4, r2
 8009182:	4606      	mov	r6, r0
 8009184:	b110      	cbz	r0, 800918c <__swbuf_r+0x10>
 8009186:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009188:	2b00      	cmp	r3, #0
 800918a:	d048      	beq.n	800921e <__swbuf_r+0xa2>
 800918c:	89a2      	ldrh	r2, [r4, #12]
 800918e:	69a3      	ldr	r3, [r4, #24]
 8009190:	60a3      	str	r3, [r4, #8]
 8009192:	b291      	uxth	r1, r2
 8009194:	0708      	lsls	r0, r1, #28
 8009196:	d538      	bpl.n	800920a <__swbuf_r+0x8e>
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d035      	beq.n	800920a <__swbuf_r+0x8e>
 800919e:	0489      	lsls	r1, r1, #18
 80091a0:	b2ed      	uxtb	r5, r5
 80091a2:	d515      	bpl.n	80091d0 <__swbuf_r+0x54>
 80091a4:	6822      	ldr	r2, [r4, #0]
 80091a6:	6961      	ldr	r1, [r4, #20]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	428b      	cmp	r3, r1
 80091ac:	da1c      	bge.n	80091e8 <__swbuf_r+0x6c>
 80091ae:	3301      	adds	r3, #1
 80091b0:	68a1      	ldr	r1, [r4, #8]
 80091b2:	1c50      	adds	r0, r2, #1
 80091b4:	3901      	subs	r1, #1
 80091b6:	60a1      	str	r1, [r4, #8]
 80091b8:	6020      	str	r0, [r4, #0]
 80091ba:	7015      	strb	r5, [r2, #0]
 80091bc:	6962      	ldr	r2, [r4, #20]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d01a      	beq.n	80091f8 <__swbuf_r+0x7c>
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	07db      	lsls	r3, r3, #31
 80091c6:	d501      	bpl.n	80091cc <__swbuf_r+0x50>
 80091c8:	2d0a      	cmp	r5, #10
 80091ca:	d015      	beq.n	80091f8 <__swbuf_r+0x7c>
 80091cc:	4628      	mov	r0, r5
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80091d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091d6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80091da:	81a2      	strh	r2, [r4, #12]
 80091dc:	6822      	ldr	r2, [r4, #0]
 80091de:	6661      	str	r1, [r4, #100]	; 0x64
 80091e0:	6961      	ldr	r1, [r4, #20]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	428b      	cmp	r3, r1
 80091e6:	dbe2      	blt.n	80091ae <__swbuf_r+0x32>
 80091e8:	4630      	mov	r0, r6
 80091ea:	4621      	mov	r1, r4
 80091ec:	f7fe fa2a 	bl	8007644 <_fflush_r>
 80091f0:	b940      	cbnz	r0, 8009204 <__swbuf_r+0x88>
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	2301      	movs	r3, #1
 80091f6:	e7db      	b.n	80091b0 <__swbuf_r+0x34>
 80091f8:	4630      	mov	r0, r6
 80091fa:	4621      	mov	r1, r4
 80091fc:	f7fe fa22 	bl	8007644 <_fflush_r>
 8009200:	2800      	cmp	r0, #0
 8009202:	d0e3      	beq.n	80091cc <__swbuf_r+0x50>
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	bd70      	pop	{r4, r5, r6, pc}
 800920a:	4630      	mov	r0, r6
 800920c:	4621      	mov	r1, r4
 800920e:	f7fd f921 	bl	8006454 <__swsetup_r>
 8009212:	2800      	cmp	r0, #0
 8009214:	d1f6      	bne.n	8009204 <__swbuf_r+0x88>
 8009216:	89a2      	ldrh	r2, [r4, #12]
 8009218:	6923      	ldr	r3, [r4, #16]
 800921a:	b291      	uxth	r1, r2
 800921c:	e7bf      	b.n	800919e <__swbuf_r+0x22>
 800921e:	f7fe faa5 	bl	800776c <__sinit>
 8009222:	e7b3      	b.n	800918c <__swbuf_r+0x10>

08009224 <_wcrtomb_r>:
 8009224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009228:	4605      	mov	r5, r0
 800922a:	b086      	sub	sp, #24
 800922c:	461e      	mov	r6, r3
 800922e:	460c      	mov	r4, r1
 8009230:	b1a1      	cbz	r1, 800925c <_wcrtomb_r+0x38>
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <_wcrtomb_r+0x50>)
 8009234:	4617      	mov	r7, r2
 8009236:	f8d3 8000 	ldr.w	r8, [r3]
 800923a:	f7fe fddf 	bl	8007dfc <__locale_charset>
 800923e:	9600      	str	r6, [sp, #0]
 8009240:	4603      	mov	r3, r0
 8009242:	4621      	mov	r1, r4
 8009244:	463a      	mov	r2, r7
 8009246:	4628      	mov	r0, r5
 8009248:	47c0      	blx	r8
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	d103      	bne.n	8009256 <_wcrtomb_r+0x32>
 800924e:	2200      	movs	r2, #0
 8009250:	238a      	movs	r3, #138	; 0x8a
 8009252:	6032      	str	r2, [r6, #0]
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	b006      	add	sp, #24
 8009258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <_wcrtomb_r+0x50>)
 800925e:	681f      	ldr	r7, [r3, #0]
 8009260:	f7fe fdcc 	bl	8007dfc <__locale_charset>
 8009264:	9600      	str	r6, [sp, #0]
 8009266:	4603      	mov	r3, r0
 8009268:	4622      	mov	r2, r4
 800926a:	4628      	mov	r0, r5
 800926c:	a903      	add	r1, sp, #12
 800926e:	47b8      	blx	r7
 8009270:	e7eb      	b.n	800924a <_wcrtomb_r+0x26>
 8009272:	bf00      	nop
 8009274:	200008a0 	.word	0x200008a0

08009278 <__ascii_wctomb>:
 8009278:	b121      	cbz	r1, 8009284 <__ascii_wctomb+0xc>
 800927a:	2aff      	cmp	r2, #255	; 0xff
 800927c:	d804      	bhi.n	8009288 <__ascii_wctomb+0x10>
 800927e:	700a      	strb	r2, [r1, #0]
 8009280:	2001      	movs	r0, #1
 8009282:	4770      	bx	lr
 8009284:	4608      	mov	r0, r1
 8009286:	4770      	bx	lr
 8009288:	238a      	movs	r3, #138	; 0x8a
 800928a:	6003      	str	r3, [r0, #0]
 800928c:	f04f 30ff 	mov.w	r0, #4294967295
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop

08009294 <_write_r>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	4c08      	ldr	r4, [pc, #32]	; (80092b8 <_write_r+0x24>)
 8009298:	4606      	mov	r6, r0
 800929a:	2500      	movs	r5, #0
 800929c:	4608      	mov	r0, r1
 800929e:	4611      	mov	r1, r2
 80092a0:	461a      	mov	r2, r3
 80092a2:	6025      	str	r5, [r4, #0]
 80092a4:	f7f8 fbd4 	bl	8001a50 <_write>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d000      	beq.n	80092ae <_write_r+0x1a>
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0fb      	beq.n	80092ac <_write_r+0x18>
 80092b4:	6033      	str	r3, [r6, #0]
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	2000a774 	.word	0x2000a774

080092bc <_calloc_r>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	fb02 f101 	mul.w	r1, r2, r1
 80092c2:	f7fe fe19 	bl	8007ef8 <_malloc_r>
 80092c6:	4604      	mov	r4, r0
 80092c8:	b168      	cbz	r0, 80092e6 <_calloc_r+0x2a>
 80092ca:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80092ce:	f022 0203 	bic.w	r2, r2, #3
 80092d2:	3a04      	subs	r2, #4
 80092d4:	2a24      	cmp	r2, #36	; 0x24
 80092d6:	d818      	bhi.n	800930a <_calloc_r+0x4e>
 80092d8:	2a13      	cmp	r2, #19
 80092da:	d806      	bhi.n	80092ea <_calloc_r+0x2e>
 80092dc:	4603      	mov	r3, r0
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	605a      	str	r2, [r3, #4]
 80092e4:	609a      	str	r2, [r3, #8]
 80092e6:	4620      	mov	r0, r4
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	2300      	movs	r3, #0
 80092ec:	2a1b      	cmp	r2, #27
 80092ee:	6003      	str	r3, [r0, #0]
 80092f0:	6043      	str	r3, [r0, #4]
 80092f2:	d90f      	bls.n	8009314 <_calloc_r+0x58>
 80092f4:	2a24      	cmp	r2, #36	; 0x24
 80092f6:	6083      	str	r3, [r0, #8]
 80092f8:	60c3      	str	r3, [r0, #12]
 80092fa:	bf05      	ittet	eq
 80092fc:	6103      	streq	r3, [r0, #16]
 80092fe:	6143      	streq	r3, [r0, #20]
 8009300:	f100 0310 	addne.w	r3, r0, #16
 8009304:	f100 0318 	addeq.w	r3, r0, #24
 8009308:	e7e9      	b.n	80092de <_calloc_r+0x22>
 800930a:	2100      	movs	r1, #0
 800930c:	f7ff f930 	bl	8008570 <memset>
 8009310:	4620      	mov	r0, r4
 8009312:	bd10      	pop	{r4, pc}
 8009314:	f100 0308 	add.w	r3, r0, #8
 8009318:	e7e1      	b.n	80092de <_calloc_r+0x22>
 800931a:	bf00      	nop

0800931c <_close_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4c07      	ldr	r4, [pc, #28]	; (800933c <_close_r+0x20>)
 8009320:	2300      	movs	r3, #0
 8009322:	4605      	mov	r5, r0
 8009324:	4608      	mov	r0, r1
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	f7f8 fb59 	bl	80019de <_close>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d000      	beq.n	8009332 <_close_r+0x16>
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0fb      	beq.n	8009330 <_close_r+0x14>
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	2000a774 	.word	0x2000a774

08009340 <_fclose_r>:
 8009340:	2900      	cmp	r1, #0
 8009342:	d03d      	beq.n	80093c0 <_fclose_r+0x80>
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	4605      	mov	r5, r0
 8009348:	460c      	mov	r4, r1
 800934a:	b108      	cbz	r0, 8009350 <_fclose_r+0x10>
 800934c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800934e:	b37b      	cbz	r3, 80093b0 <_fclose_r+0x70>
 8009350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009354:	b90b      	cbnz	r3, 800935a <_fclose_r+0x1a>
 8009356:	2000      	movs	r0, #0
 8009358:	bd70      	pop	{r4, r5, r6, pc}
 800935a:	4628      	mov	r0, r5
 800935c:	4621      	mov	r1, r4
 800935e:	f7fe f8c7 	bl	80074f0 <__sflush_r>
 8009362:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009364:	4606      	mov	r6, r0
 8009366:	b133      	cbz	r3, 8009376 <_fclose_r+0x36>
 8009368:	4628      	mov	r0, r5
 800936a:	69e1      	ldr	r1, [r4, #28]
 800936c:	4798      	blx	r3
 800936e:	2800      	cmp	r0, #0
 8009370:	bfb8      	it	lt
 8009372:	f04f 36ff 	movlt.w	r6, #4294967295
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	061b      	lsls	r3, r3, #24
 800937a:	d41c      	bmi.n	80093b6 <_fclose_r+0x76>
 800937c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800937e:	b141      	cbz	r1, 8009392 <_fclose_r+0x52>
 8009380:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009384:	4299      	cmp	r1, r3
 8009386:	d002      	beq.n	800938e <_fclose_r+0x4e>
 8009388:	4628      	mov	r0, r5
 800938a:	f7fe faa9 	bl	80078e0 <_free_r>
 800938e:	2300      	movs	r3, #0
 8009390:	6323      	str	r3, [r4, #48]	; 0x30
 8009392:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009394:	b121      	cbz	r1, 80093a0 <_fclose_r+0x60>
 8009396:	4628      	mov	r0, r5
 8009398:	f7fe faa2 	bl	80078e0 <_free_r>
 800939c:	2300      	movs	r3, #0
 800939e:	6463      	str	r3, [r4, #68]	; 0x44
 80093a0:	f7fe f9ea 	bl	8007778 <__sfp_lock_acquire>
 80093a4:	2300      	movs	r3, #0
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	f7fe f9e8 	bl	800777c <__sfp_lock_release>
 80093ac:	4630      	mov	r0, r6
 80093ae:	bd70      	pop	{r4, r5, r6, pc}
 80093b0:	f7fe f9dc 	bl	800776c <__sinit>
 80093b4:	e7cc      	b.n	8009350 <_fclose_r+0x10>
 80093b6:	4628      	mov	r0, r5
 80093b8:	6921      	ldr	r1, [r4, #16]
 80093ba:	f7fe fa91 	bl	80078e0 <_free_r>
 80093be:	e7dd      	b.n	800937c <_fclose_r+0x3c>
 80093c0:	2000      	movs	r0, #0
 80093c2:	4770      	bx	lr

080093c4 <_fstat_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4c08      	ldr	r4, [pc, #32]	; (80093e8 <_fstat_r+0x24>)
 80093c8:	2300      	movs	r3, #0
 80093ca:	4605      	mov	r5, r0
 80093cc:	4608      	mov	r0, r1
 80093ce:	4611      	mov	r1, r2
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	f7f8 fb07 	bl	80019e4 <_fstat>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	d000      	beq.n	80093dc <_fstat_r+0x18>
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0fb      	beq.n	80093da <_fstat_r+0x16>
 80093e2:	602b      	str	r3, [r5, #0]
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	bf00      	nop
 80093e8:	2000a774 	.word	0x2000a774

080093ec <_isatty_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4c07      	ldr	r4, [pc, #28]	; (800940c <_isatty_r+0x20>)
 80093f0:	2300      	movs	r3, #0
 80093f2:	4605      	mov	r5, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	f7f8 fafc 	bl	80019f4 <_isatty>
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	d000      	beq.n	8009402 <_isatty_r+0x16>
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0fb      	beq.n	8009400 <_isatty_r+0x14>
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	2000a774 	.word	0x2000a774

08009410 <_lseek_r>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	4c08      	ldr	r4, [pc, #32]	; (8009434 <_lseek_r+0x24>)
 8009414:	4606      	mov	r6, r0
 8009416:	2500      	movs	r5, #0
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	461a      	mov	r2, r3
 800941e:	6025      	str	r5, [r4, #0]
 8009420:	f7f8 fafc 	bl	8001a1c <_lseek>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d000      	beq.n	800942a <_lseek_r+0x1a>
 8009428:	bd70      	pop	{r4, r5, r6, pc}
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0fb      	beq.n	8009428 <_lseek_r+0x18>
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	2000a774 	.word	0x2000a774

08009438 <_read_r>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	4c08      	ldr	r4, [pc, #32]	; (800945c <_read_r+0x24>)
 800943c:	4606      	mov	r6, r0
 800943e:	2500      	movs	r5, #0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	461a      	mov	r2, r3
 8009446:	6025      	str	r5, [r4, #0]
 8009448:	f7f8 faea 	bl	8001a20 <_read>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d000      	beq.n	8009452 <_read_r+0x1a>
 8009450:	bd70      	pop	{r4, r5, r6, pc}
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0fb      	beq.n	8009450 <_read_r+0x18>
 8009458:	6033      	str	r3, [r6, #0]
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	2000a774 	.word	0x2000a774
